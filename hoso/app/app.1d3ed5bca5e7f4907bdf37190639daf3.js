!function(){function move(array,fromIndex,toIndex){if(!_.isNumber(fromIndex)||_.isNaN(fromIndex)||0>fromIndex)throw new Error("fromIndex must be a positive number");if(!_.isNumber(toIndex)||_.isNaN(toIndex)||0>toIndex)throw new Error("toIndex must be a positive number");return array.splice(toIndex,0,array.splice(fromIndex,1)[0]),array}_.mixin({move:move})}(),function(){"use strict";function configure($compileProvider,$httpProvider,$logProvider,$animateProvider,appConfig){$animateProvider.classNameFilter(/\banimated\b/),$compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|market|ftp|mailto|file|tel|itms|itms-apps|data):/),$compileProvider.debugInfoEnabled(!!appConfig.debugInfoEnabled),$httpProvider.interceptors.push("authHttpResponseInterceptor"),$httpProvider.interceptors.push("metaHeaders"),$httpProvider.interceptors.push("retryInterceptor"),$logProvider.debugEnabled(appConfig.debugLogLevel)}function authHttpResponseInterceptor($q,$location,$injector,HttpManager){return{request:function(request){return HttpManager.registerNewRequest(request),request},response:function(response){return response||$q.when(response)},responseError:function(rejection){if(401===rejection.status&&-1===rejection.config.url.indexOf("ChangeUsername")){var Login=$injector.get("Login");Login.logout(),Login.setRedirectRouteAfterLogin(),$location.path("/login")}return $q.reject(rejection)}}}function metaHeaders(Environment,UserAgent,appConfig,$localStorage,$injector){return{request:function(config){var SessionService=$injector.get("SessionService"),appVersion=appConfig.version,brand=Environment.get().brand,environment=UserAgent.deviceIsAndroid?"Android":UserAgent.deviceIsIOS?"iOS":"web",universalLoginUrl=appConfig.universalLoginApiEndpoint[brand],requestUrl=config.url.match(/.*\//);return requestUrl=requestUrl[0].slice(0,-1),(null===requestUrl||requestUrl!==universalLoginUrl)&&(config.headers["X-META-BRAND"]=brand,config.headers["X-META-ENVIRONMENT"]=environment,config.headers["X-META-VERSION"]=appVersion,$localStorage.has("xsrfHeader")&&!SessionService.xsrfHasChanged()&&(config.headers["X-XSRF-TOKEN"]=$localStorage.get("xsrfHeader"))),config}}}function mobileGoogleTagManager(googleTagManagerCordovaProvider){googleTagManagerCordovaProvider.trackingId="GTM-KZG3MX",googleTagManagerCordovaProvider.period=30}function analyticsProvider($analyticsProvider){$analyticsProvider.excludeRoutes(["tempToken=","username=","password=","email=","__lastpassid__=","onepasswdfill="])}var app,directives,resources,filters,providers,services,components,constants,configConstants,isMobileApp=-1===document.URL.indexOf("http://")&&-1===document.URL.indexOf("https://"),analyticsModule=isMobileApp?"angulartics.google.tagmanager.cordova":"angulartics.google.tagmanager";app=angular.module("app",["config.constants","constants","ngCookies","ngResource","ngSanitize","ngRoute","ngTouch","ngAnimate","html-templates","ui.mask","ui.bootstrap","angulartics",analyticsModule,"directives","components","migrate","resources","filters","providers","services","security","login","longform","layout","home","contactus","appVersion","privacy","locations","notifications","contracts","plans","pcp","accountactivity","tests","appointments","visits","procedures","billing","find-a-doctor","specialties","angularSpinner","ui.map","ui.bootstrap.datepicker","angular-svg-round-progressbar","marketing","claims","vdt","angularFileUpload","pages","sharedAccess","messages","notebook","learning-resources","killswitch","lobby","cost-estimator","timeline","announcements","mdlive","healthcare-bluebook","signup","rsa","rx-manager","old-member-center","legacy","pin","care-team","growth-chart","profile","MakeReservationAppointment","makeAppointments","faq","insurance","diabetes","customerSupportChat","plan-documents","healthyactions","patientHistory","referrals","MedNow","quick-search","wellness","todo","healthInfo","healthTracking","healthConditions","feedbackSurvey","combinedTimelineEvents","strive","partners","sitemap","fhir-auth","ngFileUpload","app.preloaded.data","inpatient"]),directives=angular.module("directives",["filters","services"]),resources=angular.module("resources",["services"]),filters=angular.module("filters",["services"]),providers=angular.module("providers",[]),components=angular.module("components",[]),components=angular.module("modal-controllers",[]),services=angular.module("services",["resources","app.preloaded.data"]),constants=angular.module("constants",[]),configConstants=angular.module("config.constants",[]),app.config(["$compileProvider","$httpProvider","$logProvider","$animateProvider","appConfig",configure]),app.config(["$analyticsProvider",analyticsProvider]),isMobileApp&&app.config(["googleTagManagerCordovaProvider",mobileGoogleTagManager]),app.factory("authHttpResponseInterceptor",["$q","$location","$injector","HttpManager",authHttpResponseInterceptor]),app.factory("metaHeaders",["Environment","UserAgent","appConfig","$localStorage","$injector",metaHeaders])}(),angular.module("config.constants").constant("appConfig",{version:"5.10.3",debugLogLevel:!1,debugInfoEnabled:!1,killswitch:!0,apiEndpoint:"api/v2",apiEndpointV1:"apiv1/v1",uiEndpoint:"",universalLoginApiEndpoint:{ph:"https://www.priorityhealth.com/app/universal-login-web-api/api",sh:"https://webapp.spectrumhealth.org/app/universal-login-web-api/api"},accessProblemUrl:{ph:"http://www.spectrum-health.org/myhealth/access-problem",sh:"http://www.spectrum-health.org/myhealth/access-problem"},forgotPasswordUrl:"https://webapp.spectrumhealth.org/app/universal-login-ui/#/forgotPassword?appId=",createAccountUrl:"https://myhealth.spectrumhealth.org/#/splash",myHealthCustomerSupportPhoneNumber:"1-877-308-5083",contactCenterPhoneNumber:"844.322.7374",contactCenterMarketingPhoneNumber:"844.eCareSH",universalLoginAppId:{ph:"MyHealthV2PH",sh:"MyHealthV2SH"},myHealthItunesUrl:"https://itunes.apple.com/us/app/spectrum-health-myhealth/id396885759?mt=8",myHealthGooglePlayUrl:"https://play.google.com/store/apps/details?id=org.spectrum_health.mySpectrum",spectrumMyHealthUrl:"https://myhealth.spectrumhealth.org/#/login/",universalLoginApiEndpointV1:"ul",universalLoginV1AppId:{ph:"MyHealth",sh:"MyHealth"},liveAgentChatChannel:{url:"https://d.la1c1.salesforceliveagent.com/chat",deploymentId:"572E0000000XZAM",orgId:"00DE0000000bCDk"},salesForceScript:{url:"https://c.la1-c2cs-phx.salesforceliveagent.com/content/g/js/40.0/deployment.js"}}),function(){"use strict";angular.module("app.preloaded.data",[])}(),function(){"use strict";function PreloadData($http,$q,$window,appConfig){function deferredStatus(){var deferred=$q.defer();return $http.get(apiRoute+"/status").then(function(result){deferred.resolve(result)})["catch"](function(reason){var error={data:reason.statusText};deferred.resolve(error)}),deferred.promise}function deferredProfile(xsrfHeader){var deferred=$q.defer();return $http.get(apiRoute+"/profile/preloaddata",{headers:{"X-XSRF-TOKEN":xsrfHeader}}).then(function(result){deferred.resolve(result)})["catch"](function(reason){var error={data:reason.statusText};deferred.resolve(error)}),deferred.promise}function getData(){$window.myHealthDataPreload={};var userProfilesPromise="",appStatusPromise=deferredStatus();if(0===document.URL.indexOf("http://")||0===document.URL.indexOf("https://"))try{var header=$window.localStorage.getItem("xsrfHeader");userProfilesPromise=header?deferredProfile(header):""}catch(e){}$window.myHealthDataPreload.preloadedDataPromise=$q.all({appStatus:appStatusPromise,userProfiles:userProfilesPromise})}var apiRoute=appConfig.apiEndpoint;return getData(),{getData:getData,deferredStatus:deferredStatus,deferredProfile:deferredProfile}}function preload(){var $injector=angular.injector(["ng","app.preloaded.data","config.constants"]),$http=$injector.get("$http"),$q=$injector.get("$q"),$window=$injector.get("$window"),appConfig=$injector.get("appConfig");PreloadData($http,$q,$window,appConfig)}preload(),angular.module("app.preloaded.data").factory("PreloadData",PreloadData),PreloadData.$inject=["$http","$q","$window","appConfig"]}(),function(){"use strict";function PreloadData(Profile,userProfilesInitialData,ProfilePhotoService,$sessionStorage){if(userProfilesInitialData&&"object"==typeof userProfilesInitialData){Profile.getProfile(userProfilesInitialData.loggedInUser),Profile.getProfile(userProfilesInitialData.currentUser).then(function(){ProfilePhotoService.setProfilePhoto()});try{$sessionStorage.set("loggedIn",!0)}catch(e){}}else try{$sessionStorage.remove("loggedIn")}catch(e){}}function AppBootstrap($rootScope,$window,Login,mobileSecurity,Pin,FeatureStatus,$location,Users,AuthorizationEvaluatorService,RoleEvaluatorService){FastClick.attach(document.body),$rootScope.pin=Pin.initialize(),$rootScope.$on("pin.stateChanged",function(ev,pin){$rootScope.pin=pin}),mobileSecurity.enable(),$rootScope.$on("$routeChangeError",function(event,current,previous,rejection){null!==rejection&&rejection.featuresDisabled&&$location.url("/")}),$rootScope.$on("$routeChangeStart",function(event,next){$rootScope.title=next.title;var redirectToRoot=!1,isAllFeaturesOn=next.feature?FeatureStatus.checkMultipleFeatureStatuses(next.feature):!0,isAnyFeatureOn=next.anyFeature?FeatureStatus.checkMultipleFeatureStatuses(next.anyFeature,!0):!0;isAllFeaturesOn&&isAnyFeatureOn||(redirectToRoot=!0),next.roles&&0===_.intersection(next.roles,Users.currentUser.get().menuRoles).length&&(redirectToRoot=!0),next.rolesExpression&&!RoleEvaluatorService.evaluateRoleExpression(next.rolesExpression,Users.currentUser.get().menuRoles)&&(redirectToRoot=!0),next.authorization&&FeatureStatus.checkFeatureStatus("authorizations")&&!AuthorizationEvaluatorService.isAuthorized(next.authorization,Users.currentUser.get().authorizations)&&(redirectToRoot=!0),redirectToRoot&&(Login.setRedirectRouteAfterLogin(),$location.path("/")),window.scrollTo(0,0)}),$rootScope.$on("$routeChangeSuccess",function(event,current,previous){previous&&current.hasOwnProperty("$$route")&&current.$$route.hardRefresh&&current!==previous&&$window.location.reload()})}angular.module("app").run(PreloadData),PreloadData.$inject=["Profile","userProfilesInitialData","ProfilePhotoService","$sessionStorage"],angular.module("app").run(AppBootstrap),AppBootstrap.$inject=["$rootScope","$window","Login","mobileSecurity","Pin","FeatureStatus","$location","Users","AuthorizationEvaluatorService","RoleEvaluatorService"]}(),function(){"use strict";function AppCtrl($scope,appConfig,Environment,Users,Login,$location,$route,Authorization,FeatureStatus,$window,GtmDataLayerService,$localStorage,StandardAccessNavService){function getProxyPermissions(){var proxyPermissions,sharedAccessPermissions=$localStorage.get("sharedAccessPermissions");return proxyPermissions=sharedAccessPermissions&&"undefined"!==sharedAccessPermissions?JSON.parse(sharedAccessPermissions):void 0}function updateLoggedInStatus(){$scope.loggedIn=Login.getLoggedInStatus(),updateLogoUrl()}function updateLogoUrl(){$scope.loggedIn?"ph"===$scope.brand?$scope.homeUrl="/timeline":$scope.wellnessOnly()&&!$scope.currentUser.isPatient&&$scope.currentUser.isMember?$scope.homeUrl="/wellness":$scope.currentUser.isPatient||$scope.currentUser.isMember?$scope.homeUrl="/timeline":$scope.homeUrl="/welcome":$scope.homeUrl="/"}function usePhTheme(){return FeatureStatus.checkFeatureStatus("phThemeOverrides")&&$scope.currentUser&&"green"===$scope.currentUser.uiExperience}function useQuickSearch(){return FeatureStatus.checkFeatureStatus("quickSearch")}function preloadComplete(){return $window.myHealthDataPreload.preloadComplete}$scope.appName="My Health",$scope.config=appConfig,$scope.allowLocation=null,$scope.$on("$routeChangeSuccess",function(event,current){if(current.$$route){var rawClassName=current.$$route.routeClass?current.$$route.routeClass:current.$$route.title;if(rawClassName){var className=rawClassName.toLowerCase().replace(/&/g,"and").replace(/\s+/g,"-")+"-route-content";$scope.routeClassName=className}var permissions=getProxyPermissions();if(permissions){$scope.isStandardSharedAccess=!1;for(var x=0;x<permissions.length;x+=1)"STANDARD_ADOLESCENT_MEDICAL_SHARED_ACCESS"===permissions[x].permissionlabel&&($scope.isStandardSharedAccess=!0)}else $scope.isStandardSharedAccess=!1}}),$scope.isStandardSharedAccess=!1,$scope.$on("$locationChangeStart",function(event,newUrl){var permissions=getProxyPermissions();if(permissions){$scope.isStandardSharedAccess=!1;for(var x=0;x<permissions.length;x+=1)"STANDARD_ADOLESCENT_MEDICAL_SHARED_ACCESS"===permissions[x].permissionlabel&&($scope.isStandardSharedAccess=!0,StandardAccessNavService.checkRoute(newUrl)||$location.path("/timeline"))}else $scope.isStandardSharedAccess=!1}),$scope.homeUrl="/",$scope.brand=Environment.get().brand.toLowerCase(),$scope.wellnessOnly=function(){return FeatureStatus.checkFeatureStatus("wellnessOnlyLandingPage")&&Authorization.wellnessOnly()},$scope.$on("currentUserSet",function(){$scope.currentUser=Users.currentUser.get(),$window.isMember=$scope.currentUser.isMember,$window.isPatient=$scope.currentUser.isPatient,$window.userType=$scope.currentUser.getAnalyticsUserType(),$window.uiExperience=$scope.currentUser.uiExperience,updateLogoUrl(),GtmDataLayerService.pushEvents([{currentUserType:$scope.currentUser.getAnalyticsUserType()},{currentUIExperience:$scope.currentUser.uiExperience},{currentEPersonId:$scope.currentUser.ePersonId}])}),$scope.$on("loggedInUserSet",function(){$scope.loggedInUser=Users.loggedInUser.get(),GtmDataLayerService.pushEvents([{loggedInUserType:$scope.loggedInUser.getAnalyticsUserType()},{loggedInUIExperience:$scope.loggedInUser.uiExperience},{loggedInEPersonId:$scope.loggedInUser.ePersonId}])}),$scope.currentUser=Users.currentUser.get(),$scope.loggedInUser=Users.loggedInUser.get(),GtmDataLayerService.pushEvents([{loggedInUserType:$scope.loggedInUser.getAnalyticsUserType()},{loggedInUIExperience:$scope.loggedInUser.uiExperience},{loggedInEPersonId:$scope.loggedInUser.ePersonId},{currentUserType:$scope.currentUser.getAnalyticsUserType()},{currentUIExperience:$scope.currentUser.uiExperience},{currentEPersonId:$scope.currentUser.ePersonId}]),$scope.signOut=function(){Login.logout(),$scope.currentUser=Users.getDefaultUser(),$window.isMember=void 0,$window.isPatient=void 0,$window.uiExperience=void 0,$localStorage.remove("sharedAccessPermissions"),$scope.isStandardSharedAccess=!1,GtmDataLayerService.pushEvents([{loggedInUserType:"guest"},{loggedInUIExperience:void 0},{loggedInEPersonId:void 0},{currentUserType:"guest"},{currentUIExperience:void 0},{currentEPersonId:void 0}])},$scope.isUserProxied=function(){return Users.isUserProxied()},$scope.hasChatAvailable=function(){return Authorization.hasCustomerSupportChat()},$scope.usePhTheme=usePhTheme,$scope.useQuickSearch=useQuickSearch,$scope.preloadComplete=preloadComplete,$scope.emailRegEx=/^[_A-Za-z0-9-\+]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$/,$scope.reload=function(){$route.reload()},$scope.refresh=function(){$location.reload()},updateLoggedInStatus(),$scope.$on("loggedInStatusChanged",updateLoggedInStatus),$scope.$on("$routeChangeStart",function(event,next){next.$$route&&"/timeline"===next.$$route.originalPath?$scope.showCarousel=!0:$scope.showCarousel=!1})}angular.module("app").controller("AppCtrl",AppCtrl),AppCtrl.$inject=["$scope","appConfig","Environment","Users","Login","$location","$route","Authorization","FeatureStatus","$window","GtmDataLayerService","$localStorage","StandardAccessNavService"]}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.otherwise({redirectTo:"/"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("security",["services","filters"]),function(){"use strict";function secondsSince(date){var now=(new Date).getTime(),then=null;return _.isString(date)&&(date=Date.parse(date)),then=_.isDate(date)?date.getTime():date,(now-then)/1e3}function mobileSecurityProvider(){var defaultOptions,options;defaultOptions={maxInactiveDuration:120,ignore:["/"],beforePause:[],afterResume:[],loginUrl:"/login",listenTo:{tabVisibility:!1,appBackground:!0}},options=_.extend({},defaultOptions),this.setLoginPath=function(path){return this.options("loginUrl",path)},this.setMaxDuration=function(duration){return this.options("maxInactiveDuration",duration)},this.options=function(key,value){var argCount=arguments.length;switch(argCount){case 0:return options;case 1:return _.isObject(key)?(_.extend(options,key),this):options[key];default:return options[key]=value,this}return this},this.reset=function(){return options=_.extend({},defaultOptions),this},this.ignorePaths=function(){return _.forEach(arguments,function(arg){options.ignore.push(arg)}),this},this.doBeforePause=function(fn){return _.isFunction(fn)&&options.beforePause.push(fn),this},this.doAfterResume=function(fn){return _.isFunction(fn)&&options.afterResume.push(fn),this},this.$get=function($location,$storage,$injector,RegexUtil){function MobileSecurity(){this.isEnabled=!1}function shouldIgnorePath(path){return _.some(options.ignore,function(ignoredPath){var regex=RegexUtil.pathToRegex(ignoredPath),test=regex.test(path);return test})}function shouldListen(listen){var method=listen?"addEventListener":"removeEventListener";options.listenTo.tabVisibility&&document[method]("visibilitychange",onVisibilityChange),options.listenTo.appBackground&&(document[method]("pause",onAppPaused,!1),document[method]("resume",onAppResumed,!1))}function onAppPaused(){runHandlers(options.beforePause)}function runHandlers(handlers){_.forEach(handlers||[],function(handler){_.isFunction(handler)&&$injector.invoke(handler)})}function onVisibilityChange(){var visible="visible"===document.visibilityState;visible?onAppResumed():onAppPaused()}function onAppResumed(){runHandlers(options.afterResume)}return MobileSecurity.prototype.shouldIgnorePath=shouldIgnorePath,MobileSecurity.prototype.enable=function(){shouldListen(!0),this.isEnabled=!0},MobileSecurity.prototype.disable=function(){shouldListen(!1),this.isEnabled=!1},MobileSecurity.prototype.pause=function(){this.isEnabled&&onAppPaused()},MobileSecurity.prototype.resume=function(){this.isEnabled&&onAppResumed()},new MobileSecurity},this.$get.$inject=["$location","$storage","$injector","RegexUtil"]}function configure(mobileSecurityProvider){function onAppPaused($storage){$storage.set("lastState",window.location.hash).set("pausedAt",new Date)}function onAppResume($storage,$location,Login,mobileSecurity){var storedPausedAt=$storage.get("pausedAt"),lastState=$storage.get("lastState");if(storedPausedAt){var secondsPassed=secondsSince(storedPausedAt),loggedIn=Login.getLoggedInStatus();$storage.remove("pausedAt").remove("lastState"),loggedIn&&secondsPassed>options.maxInactiveDuration&&(Login.logout(),mobileSecurity.shouldIgnorePath(lastState)||$location.path(options.loginUrl))}}var options=mobileSecurityProvider.options();onAppPaused.$inject=["$storage"],onAppResume.$inject=["$storage","$location","Login","mobileSecurity"],mobileSecurityProvider.ignorePaths("pages/*","locations/*","physicians/*","about/*").doBeforePause(onAppPaused).doAfterResume(onAppResume)}var module=angular.module("security");module.provider("mobileSecurity",[mobileSecurityProvider]),module.config(["mobileSecurityProvider",configure])}(),angular.module("login",["services","filters"]),angular.module("login").constant("loginConfig",{MigrationLogicCodes:{UsernameFormatUnacceptable:"AccountNotMigratedUsernameFormatUnacceptable"}}),function(){"use strict";function BaseLogin($scope,Login,$location,FeatureStatus,appConfig,Environment,usSpinnerService,Pin,$window,ProfilePhotoService,$routeParams,$q){function cancel(){$location.url("/")}function preLoginActions(){$scope.error="",usSpinnerService.spin(spinner)}function login(loginModel){preLoginActions(),loginModel?Login.authenticate(loginModel).then(postLoginActions)["catch"](loginFailure):loginFailure()}function postLoginExternalRedirect(data){return $scope.getRedirectUrl().then(function(result){return $window.location=result.ssoUrl,data},function(error){loginFailure(error)})}function postLoginActions(data){return ProfilePhotoService.setProfilePhoto(),usSpinnerService.stop(spinner),void 0!==$scope.getRedirectUrl?postLoginExternalRedirect(data):("fhir"!==$routeParams.redirect&&Login.login(),"fhir"===$routeParams.redirect?(Login.setLoggedInStatus(!1),$scope.$broadcast("loggedInStatusChanged"),$location.url("/fhir-auth")):Login.shouldRedirectToRouteAfterLogin()?Login.redirectToSavedRoute():Login.needToMigrateVal()?$location.url("/migrate"):Pin.state.isEnabled?$location.url("/pin/create"):FeatureStatus.checkFeatureStatus("wellnessOnlyLandingPage")&&!data.isPatient&&_.includes(data.authorizations,"WELLNESS_ONLY")?$location.path("/wellness"):data.menuRoles.indexOf("lobby")>-1?$location.url("/welcome"):FeatureStatus.checkFeatureStatus("inpatientExperience")&&data.isAdmitted?$location.url("/current-admission"):$location.url("/timeline"),$window.scrollTo(0,0),$q.when(data))}function loginFailure(error){usSpinnerService.stop(spinner),$scope.showUnlockMessage=!1,angular.isDefined($scope.password)&&($scope.password=""),angular.isObject($scope.loginInfo)&&($scope.loginInfo.password=""),$scope.error="Something went wrong on our end. Please try again.",error&&("AuthFailure"===error.authErrorCode?"spectrum"===appConfig.brand||"sh"===Environment.get().brand?($scope.error="Wrong username/password combination. Three or more attempts will lock your account.",$scope.showUnlockMessage=!0):$scope.error="Some credentials that were provided were incorrect.":"Locked"===error.authErrorCode?$scope.error="Your account has been locked. To unlock your account please reset your password or wait 60 minutes. If you encounter any difficulties, please contact MyHealth Customer Support for assistance at (877) 308-5083.":error.status&&($scope.error+=" ("+error.status+")"))}var spinner="spinner-main";$scope.forgotPasswordUrl=appConfig.forgotPasswordUrl+Environment.get().appId,$scope.login=login,$scope.cancel=cancel,$scope.loginFailure=loginFailure,$scope.postLoginActions=postLoginActions,$scope.preLoginActions=preLoginActions}angular.module("login").controller("BaseLogin",BaseLogin),BaseLogin.$inject=["$scope","Login","$location","FeatureStatus","appConfig","Environment","usSpinnerService","Pin","$window","ProfilePhotoService","$routeParams","$q"]}(),function(){"use strict";function ResetUsernameCtrl($scope,$location,$controller,ChangeUsername,Notifications,Login,$timeout){function initialize(){queryParams=$location.search(),queryParams.token?($scope.$on("sessionDeleted",loadToken),Login.logoutWithoutRedirect()):$location.url("/")}function loadToken(){ctrl.token=ChangeUsername.getTokenFromEmail(queryParams.token),ctrl.token.$promise.then(function(token){requestToken=token,(token.isExpired||!token.isValid)&&($location.url("/"),$timeout(function(){Notifications.error('Your username verification link has expired. Please sign in and go to "Account Settings" to resend the email.')}))}),ctrl.token.$promise["finally"](function(){ctrl.loading=!1})}function changeUsername(password){$scope.preLoginActions();var promise=ChangeUsername.completeRequest(queryParams.token,password),postData={token:queryParams.token,password:password},urlQueryParams={isUsernameChanged:null};promise.then(function(){urlQueryParams.isUsernameChanged=!0,login(postData,urlQueryParams)}),promise["catch"](function(response){if(401===response.status){var error={authErrorCode:"AuthFailure"};$scope.loginFailure(error)}else urlQueryParams.isUsernameChanged=!1,login(postData,urlQueryParams)})}function login(postData,urlQueryParams){Login.authenticate(postData,urlQueryParams).then(function(data){$scope.postLoginActions(data),$timeout(urlQueryParams.isUsernameChanged?function(){Notifications.clear().success("Your username has been successfully updated.")}:function(){Notifications.clear().error('Your username was not updated. Please try again. View your <a id="account-settings-notification" href="#/profile/account-settings">Account Settings</a>.')})})["catch"]($scope.loginFailure)}var ctrl=this,requestToken={},queryParams={};$controller("BaseLogin",{$scope:$scope}),ctrl.token={},ctrl.loading=!0,ctrl.changeUsername=changeUsername,initialize()}angular.module("login").controller("ResetUsernameCtrl",ResetUsernameCtrl),ResetUsernameCtrl.$inject=["$scope","$location","$controller","ChangeUsername","Notifications","Login","$timeout"]}(),function(){"use strict";function LoginCtrl($scope,$location,Login,usSpinnerService,$window,$routeParams,Pin,FeatureStatus,$controller){function initialize(){$controller("BaseLogin",{$scope:$scope}),"fhir"===$scope.authMode&&($scope.infoMsg="Login to grant access to your MyHealth information"),usSpinnerService.stop(spinner),$scope.loggedIn?$location.path("/"):Pin.state.hasRefreshToken&&Pin.state.isEnabled&&$location.path("/pin/login"),void 0!==$routeParams.tempToken&&($scope.error="",usSpinnerService.spin(spinner),Login.ssoAuthenticate($routeParams.tempToken).then(function(data){usSpinnerService.stop(spinner),Login.login(),"healthequity"===$routeParams.redirect?$location.url("/insurance/HealthEquity/auto"):"exerciserewards"===$routeParams.redirect?$location.url("/insurance/ExerciseRewards/auto"):"strive"===$routeParams.redirect?$location.url("/strive"):FeatureStatus.checkFeatureStatus("wellnessOnlyLandingPage")&&!data.isPatient&&_.includes(data.authorizations,"WELLNESS_ONLY")?$location.path("/wellness"):data.menuRoles.indexOf("lobby")>-1?$location.url("/welcome"):FeatureStatus.checkFeatureStatus("inpatientExperience")&&data.isAdmitted?$location.url("/current-admission"):$location.url("/timeline"),$window.scrollTo(0,0)},function(){usSpinnerService.stop(spinner),$location.url("/login")}))}var spinner="spinner-main";$scope.loginInfo={},$scope.loginInfo.username="",$scope.authMode=$routeParams.redirect,initialize()}angular.module("login").controller("LoginCtrl",LoginCtrl),LoginCtrl.$inject=["$scope","$location","Login","usSpinnerService","$window","$routeParams","Pin","FeatureStatus","$controller"]}(),function(){"use strict";function controller($scope,$location,SessionService,Users,SharedAccess,Login){Login.logout(),$location.path("/login")}var module=angular.module("login");module.controller("LogoutCtrl",["$scope","$location","SessionService","Users","SharedAccess","Login",controller])}(),function(){"use strict";function SSOCafeWellCtrl($scope,$location,usSpinnerService,Pin,$controller,getRedirectUrl){function initialize(){$scope.getRedirectUrl=getRedirectUrl,$controller("BaseLogin",{$scope:$scope}),usSpinnerService.stop(spinner),$scope.loggedIn?$location.path("/"):Pin.state.hasRefreshToken&&Pin.state.isEnabled&&$location.path("/pin/login")}var spinner="spinner-main";$scope.loginInfo={},$scope.loginInfo.username="",initialize()}angular.module("login").controller("SSOCafeWellCtrl",SSOCafeWellCtrl),SSOCafeWellCtrl.$inject=["$scope","$location","usSpinnerService","Pin","$controller","getRedirectUrl"]}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/login",{title:"Login",templateUrl:"app/login/views/login.html",controller:"LoginCtrl"}).when("/login/:tempToken",{title:"Login",templateUrl:"app/login/views/login.html",controller:"LoginCtrl"}).when("/logout",{title:"Logout",templateUrl:"app/login/views/logout.html",controller:"LogoutCtrl"}).when("/forgot-username",{title:"Forgot Username",templateUrl:"app/login/views/forgot-username.html",controller:"LoginCtrl"}).when("/reset/username",{title:"Change Username",templateUrl:"app/login/views/reset-username.html",controller:"ResetUsernameCtrl",controllerAs:"vm",resolve:{changeUsernameFeature:changeUsernameFeature}}).when("/sso/:partner",{title:"MyHealth Login for CafeWell",templateUrl:"app/login/views/login.html",feature:"singleSignOnCafeWell",controller:"SSOCafeWellCtrl",resolve:{getRedirectUrl:ssoRedirect}})}function changeUsernameFeature(FeatureStatus){return FeatureStatus.checkFeatureStatus("changeUsername")}function ssoRedirect($q,$route,SSO){return $q.when(function(){var partner=$route.current.params.partner;return partner&&"CAFEWELL"===partner.toUpperCase()?SSO.getCafeWellUrl():$.when(void 0)})}angular.module("app").config(routeConfiguration),routeConfiguration.$inject=["$routeProvider"],changeUsernameFeature.$inject=["FeatureStatus"],ssoRedirect.$inject=["$q","$route","SSO"]}(),angular.module("layout",["ngResource","services","filters","dndLists"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.otherwise({templateUrl:"app/layout/views/landing-menu.html",controller:"MenuCtrl"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("layout").constant("layoutConfig",{sidebarMenuUrl:"app/layout/data/sidebar-menu.json",quickLinksMenuUrl:"app/layout/data/quick-links-menu.json"}),function(){"use strict";angular.module("layout").service("MenuCacheService",["$cacheFactory",function($cacheFactory){return $cacheFactory("full-menu")}])}(),function(){"use strict";function MenuService($resource,config,MenuCacheService,$q,RoleEvaluatorService,RegexUtil,FeatureStatus,AuthorizationEvaluatorService,$route,$localStorage,StandardAccessNavService){function getMenuItemsByLocation(path){return getMenuFromCache().then(function(data){var node;return node="/"===path?data:findMatchedPath(path,data.items||[]),"undefined"!=typeof node?node:$q.reject(node)})["catch"](function(){return $q.reject("Failed")})}function markPathsActiveAndFilterRoles(path,items,roleArray,authorizations){var sharedAccessPermissions,sharedAccessPermissionsJson=$localStorage.get("sharedAccessPermissions"),matchFound=!1;sharedAccessPermissionsJson&&sharedAccessPermissionsJson.length>0&&(sharedAccessPermissions=JSON.parse(sharedAccessPermissionsJson));for(var i=0;i<items.length;i+=1){var menuItemOkToShow=RoleEvaluatorService.evaluateRoleExpressions(items[i].roles,roleArray)===!0;if(items[i].hasOwnProperty("roles")&&!items[i].disabled&&menuItemOkToShow?items[i].hasOwnProperty("hideWhenAvailable")&&FeatureStatus.checkMultipleFeatureStatuses(items[i].hideWhenAvailable,!0)?items[i].authorized=!1:items[i].hasOwnProperty("showWhenAvailable")&&!FeatureStatus.checkMultipleFeatureStatuses(items[i].showWhenAvailable,!0)?items[i].authorized=!1:(items[i].authorized=!0,items[i].hasOwnProperty("items")?markPathsActiveAndFilterRoles(path,items[i].items,roleArray,authorizations)||items[i].url===path||hasAlternativeUrl(items[i],path)?(matchFound=!0,items[i].active=!0):items[i].active=!1:items[i].url===path||hasAlternativeUrl(items[i],path)?(matchFound=!0,items[i].active=!0):items[i].thirdLevelNav&&path.substring(0,items[i].url.length)===items[i].url?(matchFound=!0,items[i].active=!0):items[i].active=!1):items[i].authorized=!1,FeatureStatus.checkFeatureStatus("authorizations")&&FeatureStatus.checkFeatureStatus("wellnessOnlyLandingPage")&&items[i].hasOwnProperty("notAuthorized")&&AuthorizationEvaluatorService.isAuthorized(items[i].notAuthorized,authorizations)&&(items[i].authorized=!1),FeatureStatus.checkFeatureStatus("authorizations")&&items[i].hasOwnProperty("authorization")&&!AuthorizationEvaluatorService.isAuthorized(items[i].authorization,authorizations)&&(items[i].authorized=!1),items[i].authorized&&sharedAccessPermissions)for(var x=0;x<sharedAccessPermissions.length;x+=1)"STANDARD_ADOLESCENT_MEDICAL_SHARED_ACCESS"===sharedAccessPermissions[x].permissionlabel&&(items[i].authorized=StandardAccessNavService.checkRoute(items[i].url))}return matchFound}function findMatchedPath(path,items){for(var matchedItem,i=0;i<items.length;i+=1){if(items[i].url===path){matchedItem=items[i];break}if(items[i].hasOwnProperty("items")){var subItemMatched=findMatchedPath(path,items[i].items);if("undefined"!=typeof subItemMatched){matchedItem=subItemMatched;break}}}return matchedItem}function getMenuFromCache(){var data=cache.get("full-menu");return data?$q.when(data):resource.getMenu({date:new Date}).$promise.then(function(returnData){
return cache.put("full-menu",returnData),returnData})["catch"](function(returnData){return $q.reject(returnData)})}function getRoutesFromCache(){var data=cache.get("route-items");if(data)return $q.when(data);var routeItems=[];return angular.forEach($route.routes,function(route){route.title&&routeItems.push({title:route.title,url:route.originalPath,roles:route.roles,feature:route.feature,keywords:route.keywords})}),cache.put("route-items",routeItems),$q.when(routeItems)}function getQuickLinksFromCache(){var data=cache.get("quick-links-menu");return data?$q.when(data):resource.getQuickLinks({date:new Date}).$promise.then(function(returnData){return cache.put("quick-links-menu",returnData),returnData})["catch"](function(returnData){return $q.reject(returnData)})}function hasAlternativeUrl(item,path){var matchFound=!1;return angular.forEach(item.altUrls,function(url){!matchFound&&RegexUtil.pathToRegex(url).test(path)&&(matchFound=!0)}),matchFound}var cache=MenuCacheService,resource=$resource("full-menu",{},{getMenu:{method:"Get",url:config.sidebarMenuUrl},getQuickLinks:{method:"Get",url:config.quickLinksMenuUrl}}),global=this;global.quickLinksMenuState={loaded:!1,changed:!1},global.getMenuBasedOnLocationAndRole=function(path,roleArray,authorizations){return getMenuItemsByLocation(path).then(function(specificLocationData){return specificLocationData?global.getFullMenuWithStatusAndRoles(path,roleArray,authorizations).then(function(){return specificLocationData})["catch"](function(error){return $q.reject(error)}):void 0})["catch"](function(error){return $q.reject(error)})},global.getFullMenuWithStatusAndRoles=function(path,roleArray,authorizations){return getMenuFromCache().then(function(data){return markPathsActiveAndFilterRoles(path,data.items||[],roleArray,authorizations),data?data:$q.reject("Failed")})},global.getQuickLinksWithStatusAndRoles=function(path,roleArray,authorizations){return getQuickLinksFromCache().then(function(data){return markPathsActiveAndFilterRoles(path,data.items||[],roleArray,authorizations),data?data:$q.reject("Failed")})},global.getRoutesWithStatusAndRoles=function(path,roleArray,authorizations){return getRoutesFromCache().then(function(data){return markPathsActiveAndFilterRoles(path,data||[],roleArray,authorizations),data?data:$q.reject("Failed")})}}angular.module("layout").service("MenuService",MenuService),MenuService.$inject=["$resource","layoutConfig","MenuCacheService","$q","RoleEvaluatorService","RegexUtil","FeatureStatus","AuthorizationEvaluatorService","$route","$localStorage","StandardAccessNavService"]}(),function(){"use strict";function service($resource,$window){var resource=$resource("app/layout/data/tutorial.json");this.getTutorialSlides=function(){return resource.query()},this.getHasSeenTutorial=function(){return $window.localStorage.getItem("hasSeenMyHealthMobileTutorial")},this.setHasSeenTutorial=function(val){$window.localStorage.setItem("hasSeenMyHealthMobileTutorial",val)}}var module=angular.module("layout");module.service("TutorialService",["$resource","$window",service])}(),function(){"use strict";function service(){var evaluateRoleExpression=function(roleExpression,userRolesArray){var roleRegEx=/\w+/g;if(/^\w+$/.test(roleExpression)===!0)return _.includes(userRolesArray,roleExpression);var expressionRoles=roleExpression.match(roleRegEx),variableDeclare="";return _.each(expressionRoles,function(name){var value="false";_.includes(userRolesArray,name)&&(value="true"),variableDeclare+="var "+name+" = "+value+"; "}),eval(variableDeclare+roleExpression)},evaluateRoleExpressions=function(roleExpressionArray,userRolesArray){return _.reduce(roleExpressionArray,function(agg,roleExpression){return agg||evaluateRoleExpression(roleExpression,userRolesArray)},!1)};return{evaluateRoleExpression:evaluateRoleExpression,evaluateRoleExpressions:evaluateRoleExpressions}}var module=angular.module("layout");module.service("RoleEvaluatorService",[service])}(),function(){"use strict";function service(){function isAuthorized(key,authorizations){return _.includes(authorizations||[],key)}var exposedService={isAuthorized:isAuthorized};return exposedService}var module=angular.module("layout");module.service("AuthorizationEvaluatorService",[service])}(),function(){"use strict";function SidebarCtrl($scope,TodoService,$parse,$rootScope,appConfig,$location,MenuService,MessagesService,usSpinnerService,Notifications,FeatureStatus,Timeline,OldMemberCenterService,ProfilePhotoService){function loadMenu(){$scope.currentUser&&MenuService.getFullMenuWithStatusAndRoles($location.path(),$scope.currentUser.menuRoles,$scope.currentUser.authorizations).then(function(data){$scope.menu=data.items})}function loadAlertCount(){$scope.statusLoading=!0,MessagesService.getAlertsCount().then(function(){$scope.statusLoading=!1},function(){$scope.statusLoading=!1})}$scope.photoMenuStep=1,$scope.goBackToOldMemberCenter=function(destination){OldMemberCenterService.goBackToOldMemberCenter(destination)},$scope.nextStep=function(){$scope.photoMenuStep+=1},$scope.prevStep=function(){$scope.photoMenuStep-=1},$scope.closePhotoMenu=function(){$scope.showPhotoMenu=!1},$scope.$on("$routeChangeSuccess",function(){loadMenu()}),$scope.$watch("currentUser.menuRoles",function(){loadMenu(),$scope.currentUser&&($scope.currentUser.isMember||$scope.currentUser.isPatient)?loadAlertCount():$scope.currentUser&&$scope.currentUser.ePersonId&&loadAlertCount()}),$scope.$watch(function(){return TodoService.toDoCount},function(newVal){newVal&&($scope.toDoCount=TodoService.toDoCount)}),$scope.$watch(function(){return Boolean(FeatureStatus.checkFeatureStatus())},function(val){val&&loadMenu()}),$scope.removeProfileImage=function(){usSpinnerService.spin("spinner-main");var removePromise=ProfilePhotoService.removeProfilePhoto();removePromise.then(function(){var setPromise=ProfilePhotoService.setProfilePhoto();setPromise.then(function(imageUrl){$scope.currentUser.profileImage=imageUrl,usSpinnerService.stop("spinner-main")}),setPromise["catch"](function(fallbackUrl){$scope.currentUser.profileImage=fallbackUrl,Notifications.clear(),Notifications.error("<b>Error:</b> We were unable to retrieve your photo."),usSpinnerService.stop("spinner-main")})}),removePromise["catch"](function(){Notifications.clear(),Notifications.error("<b>Error:</b> We were unable to remove your photo."),usSpinnerService.stop("spinner-main")}),$scope.photoMenuStep=1},$scope.getBadgeValue=function(item){var propertyParser=$parse(item.badgeIndicator),badgeValue=propertyParser($scope);return badgeValue},$scope.shouldShowBadge=function(item){return item.badgeIndicator&&$scope.getBadgeValue(item)}}angular.module("layout").controller("SidebarCtrl",SidebarCtrl),SidebarCtrl.$inject=["$scope","TodoService","$parse","$rootScope","appConfig","$location","MenuService","MessagesService","usSpinnerService","Notifications","FeatureStatus","Timeline","OldMemberCenterService","ProfilePhotoService"]}(),function(){"use strict";function QuickLinksCtrl($scope,$location,$filter,MenuService,ProfileDetails,Users,UserAgent){function initialize(){$scope.isTrayOpened=!1,$scope.isMobile=UserAgent.isMobile,$scope.menu=[{title:"N/A"}]}function loadQuickLinks(){$scope.currentUser&&MenuService.getQuickLinksWithStatusAndRoles($location.path(),$scope.currentUser.menuRoles,$scope.currentUser.authorizations).then(function(data){var filteredMenu=$filter("filter")(data.items,function(item){return item.authorized});filteredMenu=angular.copy(filteredMenu),defaultMenuOrderIds=_.chain(filteredMenu).each(function(menuItem,index){menuItem.sortOrder=index,menuItem.url="#"+menuItem.url}).map("id").value(),setScopeMenu(filteredMenu),Users.isUserProxied()||(restoreSortOrderFromUserPreference(filteredMenu),lastSavedSortOrder||$scope.menuHasNewItems()||(lastSavedSortOrder=getMenuSortOrder()))})}function restoreSortOrderFromUserPreference(defaultMenuForUser){var savedSortOrder=getSavedSortOrder();if(savedSortOrder){var userHasCustomized=updateUserPreferenceIfNeeded(savedSortOrder,defaultMenuForUser),addedNewHighPriority=!1;if(userHasCustomized){var newMenuOrder=[];_.each(savedSortOrder,function(tileId){var item=_.find($scope.menu,{id:tileId});item&&(item.newItem=!1,newMenuOrder.push(item))});var extraItems=_.difference(defaultMenuForUser,newMenuOrder);_.each(_.filter(extraItems,{highPriority:!0}).reverse(),function(item){item.newItem=!1,addedNewHighPriority=!0,newMenuOrder.unshift(item)}),_.each(_.filter(extraItems,function(item){return!item.highPriority}),function(item){item.newItem=!0,newMenuOrder.push(item)}),setScopeMenu(newMenuOrder)}else{var defaultMenuIds=_.map(defaultMenuForUser,"id"),newItemsIds=_.difference(defaultMenuIds,savedSortOrder);_.each($scope.menu,function(item){item.newItem=!1}),_.forEach(newItemsIds,function(newItemId){var item=_.find($scope.menu,{id:newItemId});item.highPriority?addedNewHighPriority=!0:item.newItem=!0})}addedNewHighPriority&&saveMenuCustomization(!0)}else saveMenuCustomization()}function updateUserPreferenceIfNeeded(savedSortOrder,defaultMenuForUser){var quickLinksIsCustomizedByUser=userHasCustomizedMenuPreviously();return quickLinksIsCustomizedByUserHasNeverBeenSet()&&(quickLinksIsCustomizedByUser=!savedSortOrderMatchesDefault(savedSortOrder,defaultMenuForUser),ProfileDetails.saveUserPreferences({quickLinksIsCustomizedByUser:quickLinksIsCustomizedByUser})),quickLinksIsCustomizedByUser}function savedSortOrderMatchesDefault(savedSortOrder){var defaultMenuSortOrder=_.range(1,24),savedSortOrderWithValidMenuItems=_.intersection(savedSortOrder,defaultMenuSortOrder),defaultMenuSortOrderWithoutNewMenuItems=_.intersection(defaultMenuSortOrder,savedSortOrder);return angular.toJson(savedSortOrderWithValidMenuItems)===angular.toJson(defaultMenuSortOrderWithoutNewMenuItems)}function getSavedSortOrder(){var user=Users.loggedInUser.get();return user.userPreferences?user.userPreferences.quickLinksCustomization:null}function userHasCustomizedMenuPreviously(){var user=Users.loggedInUser.get();return user.userPreferences?user.userPreferences.quickLinksIsCustomizedByUser:!1}function quickLinksIsCustomizedByUserHasNeverBeenSet(){var user=Users.loggedInUser.get();return _.isUndefined(user.userPreferences.quickLinksIsCustomizedByUser)}function setScopeMenu(newItems){$scope.menu.length=0,_.each(newItems,function(item){$scope.menu.push(item)})}function getMenuSortOrder(){return _.chain($scope.menu).filter(function(menuItem){return!menuItem.newItem}).map("id").value()}function saveMenuCustomization(ignoreNewItems){if($scope.menuHasNewItems()&&!ignoreNewItems){var newItems=_.filter($scope.menu,{newItem:!0});_.each(newItems,function(item){if(item.newItem=!1,userHasCustomizedMenuPreviously()){var currentIndex=$scope.menu.indexOf(item);_.move($scope.menu,currentIndex,$scope.menu.length)}})}var menuCustomizations=getMenuSortOrder();if(angular.toJson(menuCustomizations)!==angular.toJson(lastSavedSortOrder)){var quickLinksIsCustomizedByUser=MenuService.quickLinksMenuState.changed||userHasCustomizedMenuPreviously();ProfileDetails.saveUserPreferences({quickLinksCustomization:menuCustomizations,quickLinksIsCustomizedByUser:quickLinksIsCustomizedByUser}).$promise.then(function(){lastSavedSortOrder=menuCustomizations,MenuService.quickLinksMenuState.changed=!1})}}function isMenuSorted(){var currentMenu=_.map($scope.menu,"id");return _.isEqual(currentMenu,defaultMenuOrderIds)?!0:!1}var lastSavedSortOrder,defaultMenuOrderIds;initialize(),$scope.menuHasNewItems=function(){return _.some($scope.menu,{newItem:!0})},$scope.$watch("currentUser.ePersonId",function(){var isProxied=Users.isUserProxied();isProxied&&$scope.isTrayOpened&&$scope.toggleOpenTray(!0),loadQuickLinks()}),$scope.toggleOpenTray=function(skipSave){$scope.isTrayOpened&&!skipSave&&(saveMenuCustomization(),$scope.resetTilesAreYouSure=!1),$scope.isTrayOpened=!$scope.isTrayOpened,$scope.$broadcast("toggleOpenQuickLinksTray",$scope.isTrayOpened)},$scope.showShowCustomizeButton=function(){return MenuService.quickLinksMenuState.loaded&&!Users.isUserProxied()},$scope.resetQuickLinksOrder=function(){$scope.resetTilesAreYouSure=!1,setScopeMenu(_.sortBy($scope.menu,"sortOrder")),saveMenuCustomization()},$scope.resetQuickLinksOrderInitialClick=function(){isMenuSorted()||($scope.resetTilesAreYouSure=!0)},$scope.resetQuickLinksNope=function(){$scope.resetTilesAreYouSure=!1},$scope.showQuickLinksMenu=function(){return $scope.loggedIn&&($scope.currentUser.isPatient||$scope.currentUser.isMember&&!$scope.wellnessOnly())}}angular.module("layout").controller("QuickLinksCtrl",QuickLinksCtrl),QuickLinksCtrl.$inject=["$scope","$location","$filter","MenuService","ProfileDetails","Users","UserAgent"]}(),function(){"use strict";function controller($scope,TutorialService){$scope.getHasSeenTutorial=function(){return TutorialService.getHasSeenTutorial()},TutorialService.getTutorialSlides().$promise.then(function(data){$scope.tutorialItems=data})}var module=angular.module("layout");module.controller("TutorialCtrl",["$scope","TutorialService",controller])}(),function(){"use strict";function controller($scope,$location,MenuService,OldMemberCenterService,$timeout,$rootScope){function enableButton(){$scope.buttonDisabled=!1}function goBackToOldMemberCenter(destination){$scope.buttonDisabled=!0,$timeout(enableButton,2e4),OldMemberCenterService.goBackToOldMemberCenter(destination)}function titleFromURL(title){title=title?title.split("/"):"";var title1=title[1]?title[1].toUpperCase().substring(0,1)+title[1].slice(1):"MyHealth",title2=title[2]?title[2].toUpperCase().substring(0,1)+title[2].slice(1):"";if(title=title1+" "+title2,/-/.test(title)){var _title=title?title.split("-"):"",_title1=_title[0]?_title[0].toUpperCase().substring(0,1)+_title[0].slice(1):"MyHealth",_title2=_title[1]?_title[1].toUpperCase().substring(0,1)+_title[1].slice(1):"",_title3=_title[2]?_title[2].toUpperCase().substring(0,1)+_title[2].slice(1):"";title=_title1+" "+_title2+" "+_title3}return title}$scope.backToOMC=goBackToOldMemberCenter,$scope.enableButton=enableButton,$scope.buttonDisabled=!1,$rootScope.title=titleFromURL($location.path()),$scope.currentUser&&MenuService.getMenuBasedOnLocationAndRole($location.path(),$scope.currentUser.menuRoles,$scope.currentUser.authorizations).then(function(data){$scope.menu=data})}angular.module("layout").controller("MenuCtrl",controller),controller.$inject=["$scope","$location","MenuService","OldMemberCenterService","$timeout","$rootScope"]}(),function(){"use strict";function controller(FeatureStatus){this.crYear=(new Date).getFullYear(),this.partnerBrandingEnabled=function(){return FeatureStatus.checkFeatureStatus("partnerBranding")}}var module=angular.module("layout");module.controller("FooterCtrl",["FeatureStatus",controller])}(),function(){"use strict";function controller($scope,FeatureStatus,Users){$scope.showSharedAccessLink=function(){return!Users.isUserProxied()&&FeatureStatus.checkFeatureStatus("sharedAccess")?!0:!1}}var module=angular.module("layout");module.controller("RightSidebarCtrl",["$scope","FeatureStatus","Users",controller])}(),function(){"use strict";function directive(){return{restrict:"A",link:function(scope,elem,attrs){var target=attrs.sidebarToggleTarget||options.target,$target=$(target),contentSelector="#main, #header, #sidebar, #page",pushDirection=attrs.sidebarToggle||"right",pushCls=[options.clsPrefix,pushDirection].join("-");elem.click(function(ev){ev.preventDefault(),ev.stopPropagation(),"pushed-right"===pushCls&&$target.removeClass("pushed-left"),"pushed-left"===pushCls&&$target.removeClass("pushed-right"),$target.toggleClass(pushCls),scope.$apply()}),$(contentSelector).click(function(ev){var $clickTarget=$(ev.target);$clickTarget.hasClass("ignore-toggle")||0!==$clickTarget.parents(".ignore-toggle").length||$target.removeClass(pushCls)}),scope.$watch("loggedIn",function(loggedIn){loggedIn||$target.removeClass(pushCls)}),scope.$on("$routeChangeSuccess",function(){$target.removeClass(pushCls)})}}}var module=angular.module("directives"),options={clsPrefix:"pushed",target:"#page"};module.directive("sidebarToggle",[directive])}(),function(){"use strict";function directive($rootScope){return{restrict:"A",link:function(scope,elem,attrs){function onGestureStart(){metaElement.content=scalableContent,metaElement.content=fixedContent}function fix(){!isFixUsed&&metaElement&&/iPhone|iPad|iPod/.test(userAgent)&&!/Opera Mini/.test(userAgent)&&(isFixUsed=!0,metaElement.content=fixedContent,document.addEventListener("gesturestart",onGestureStart,!1))}fix()}}}var module=angular.module("directives"),metaElement=document.querySelector&&document.querySelector('meta[name="viewport"]'),userAgent=navigator.userAgent,scalableContent="width=device-width, user-scalable=no, minimum-scale=0.25, maximum-scale=1.6",fixedContent="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0",isFixUsed=!1;module.directive("iosScaleFix",["$rootScope",directive])}(),function(){"use strict";function directive(){return{restrict:"A",link:function(scope,elem,attrs){elem.css("background-image","url(../../assets/images/"+backgrounds[Math.floor(Math.random()*(backgrounds.length-1))]+")")}}}var module=angular.module("directives"),backgrounds=["iStock_000006875025Medium-380.jpg","iStock_000011717432Medium-380.jpg","iStock_000017647923Medium-380.jpg","iStock_000018609145Medium-380.jpg","iStock_000022968669Medium-380.jpg"];module.directive("randomImage",[directive])}(),function(){"use strict";function quickLinksDirective($timeout,MenuService){return{restrict:"E",scope:{menu:"=",isTrayOpened:"=",hasNewItems:"&",isMenuVisible:"&"},templateUrl:"app/layout/views/quick-links.html",link:function(scope,element){function initialize(){scope.directiveInitialized=!1,scope.dragEnabled=!0}function updateUrlStatus(enabled){_.each(scope.menu,function(item){enabled?item.urlBak&&(item.url=item.urlBak,item.urlBak=""):(item.urlBak=item.url,item.url="")})}function render(showCarousel){scope.directiveInitialized=!0,updateUrlStatus(showCarousel),(!showCarousel||carouselActivated&&showCarousel)&&(carouselElement.trigger("destroy.owl.carousel"),carouselActivated=!1),$timeout(function(){showCarousel&&scope.isMenuVisible()&&(carouselElement.owlCarousel(owlConfig),MenuService.quickLinksMenuState.loaded=!0,carouselActivated=!0),scope.dragEnabled=!showCarousel})}var carouselElement=element.find("ul#tile-carousel"),owlConfig={dots:!1,autoRefresh:!1,autoWidth:!0,loop:!1,margin:0,nav:!0,navClass:["",""],navText:['<div class="quick-link-control prev hidden-xs"><i class="icon icon-angle-left"></i></div>','<div class="quick-link-control next hidden-xs"><i class="icon icon-angle-right"></i></div>',"",""],responsiveClass:!1,responsive:{}},carouselActivated=!1;initialize(),scope.$on("toggleOpenQuickLinksTray",function(event,trayIsOpened){trayIsOpened&&scope.hasNewItems()&&$timeout(function(){$("html, body").animate({scrollTop:$("#quick-links-new-items").offset().top},1e3)},250),render(!trayIsOpened)}),scope.carouselIsLoading=function(){var result=!scope.isTrayOpened&&!carouselActivated;return result},scope.dragStart=function(event){$timeout(function(){var srcElement=angular.element(event.srcElement),iconElement=srcElement.find("i.tile-icon")[0];if(iconElement){var iconClass=_.find(iconElement.className.split(" "),function(className){return 0===className.indexOf("icon-")});angular.element("body > li[dnd-draggable] i").addClass(iconClass)}})},scope.itemDropped=function(newIndex,item){if(-1===newIndex)return!1;var currentItem=_.find(scope.menu,{id:item.id}),oldIndex=scope.menu.indexOf(currentItem);return newIndex>oldIndex&&(newIndex-=1),currentItem.newItem&&(currentItem.newItem=!1),scope.$apply(function(){scope.menu.splice(newIndex,0,scope.menu.splice(oldIndex,1)[0]),angular.element(".dnd-dragging-source").removeClass("dnd-dragging-source"),MenuService.quickLinksMenuState.changed=!0}),!0},scope.$watchCollection("menu",function(){scope.menu&&scope.menu.length>1&&!scope.isTrayOpened&&render(!0)})}}}angular.module("directives").directive("quickLinks",quickLinksDirective),quickLinksDirective.$inject=["$timeout","MenuService"]}(),function(){"use strict";function directive(UserAgent){return{restrict:"A",link:function(scope,elem,attrs){function checkHeight(){var minHeight=0;$(watchSelector).each(function(){minHeight=Math.max(minHeight,$(this).outerHeight(!0))}),elem.css("min-height",minHeight)}function resetHeight(){elem.css("min-height",0)}var watchSelector=attrs.watchHeight,watchEvents=["orientationchange"];(UserAgent.isMobileApp||UserAgent.isMobile)&&watchEvents.push("resize"),scope.$on("$routeChangeSuccess",function(){resetHeight()}),scope.$watch(function(){resetHeight(),checkHeight()}),_.forEach(watchEvents,function(eventName){window.addEventListener(eventName,function(){resetHeight(),checkHeight()})})}}}var module=angular.module("directives");module.directive("watchHeight",["UserAgent",directive])}(),function(){"use strict";function directive(Environment,$parse,$timeout,TutorialService){return{templateUrl:"app/layout/views/tutorial.html",replace:!0,restrict:"A",link:function(scope,element,attr){function render(){element.removeClass("invisible"),element.owlCarousel(owlTutorialConfig);for(var i=0;i<scope.tutorialItems.length;i+=1)angular.element(document.querySelector("."+scope.tutorialItems[i].elementClass)).addClass("hide-element")}function destroy(){element.addClass("invisible"),angular.forEach(angular.element(".hide-element"),function(value){angular.element(value).removeClass("hide-element")}),element.data("owlCarousel")&&element.data("owlCarousel").destroy()}element.addClass("invisible"),scope.tutorialClicked=function(){scope.currentItemIndex<scope.tutorialItems.length-1?element.owlCarousel().trigger("next.owl.carousel"):(destroy(),TutorialService.setHasSeenTutorial(!0))},scope.$watchCollection(attr.tutorial,function(tutorialItems){tutorialItems&&tutorialItems.length&&(destroy(),TutorialService.getHasSeenTutorial()||(angular.element(document.querySelector(".hide-element")).removeClass("hide-element"),scope.tutorialItems=tutorialItems,$timeout(render,500)))}),element.on("changed.owl.carousel",function(event){event.item&&null!==event.item.index&&(scope.currentItemIndex=event.item.index)})}}}var module=angular.module("directives"),owlTutorialConfig={dots:!1,autoWidth:!1,loop:!1,margin:0,nav:!1,navClass:["",""],navText:["","","",""],responsiveClass:!1,responsive:{0:{items:1}},touchDrag:!1,pullDrag:!1,freeDrag:!1,mouseDrag:!1};module.directive("tutorial",["Environment","$parse","$timeout","TutorialService",directive])}(),function(){"use strict";angular.module("MedNow",["services","constants","ngRoute"])}(),function(){"use strict";function MedNowRouteConfiguration($routeProvider){$routeProvider.when("/mednow",{title:"MedNow Appointment",templateUrl:"app/mednow/views/landing.html",controller:"MedNowController",feature:"mednow"})}angular.module("MedNow").config(MedNowRouteConfiguration),MedNowRouteConfiguration.$inject=["$routeProvider"]}(),function(){"use strict";function MedNowController($scope,Users,NavigationService){var currentUser=Users.currentUser.get();$scope.NavigationService=NavigationService,$scope.canStartEvisit=currentUser.isPatient,$scope.currentUserName=currentUser.displayName.toLocaleLowerCase()}angular.module("MedNow").controller("MedNowController",MedNowController),MedNowController.$inject=["$scope","Users","NavigationService"]}(),function(){"use strict";function MedNowAppLinksService(mobileAppLinkPrefix,FeatureStatus,UserAgent,medNowAppLinksIds){var itunesUrl,googlePlayUrl,medNowAndroidAppIdPath,medNowiOSAppIdPath,medNowVidyoEnabled=FeatureStatus.checkFeatureStatus("medNow_Vidyo");return medNowVidyoEnabled?(medNowAndroidAppIdPath=medNowAppLinksIds.medNowAndroid,medNowiOSAppIdPath=medNowAppLinksIds.medNowiOS):(medNowAndroidAppIdPath=medNowAppLinksIds.webExAndroid,medNowiOSAppIdPath=medNowAppLinksIds.webExiOS),UserAgent.deviceIsIOS?(itunesUrl=mobileAppLinkPrefix.mobile.ios+medNowiOSAppIdPath,googlePlayUrl=mobileAppLinkPrefix.web.android+medNowAndroidAppIdPath):UserAgent.deviceIsAndroid?(itunesUrl=mobileAppLinkPrefix.web.ios+medNowiOSAppIdPath,googlePlayUrl=mobileAppLinkPrefix.mobile.android+medNowAndroidAppIdPath):(itunesUrl=mobileAppLinkPrefix.web.ios+medNowiOSAppIdPath,googlePlayUrl=mobileAppLinkPrefix.web.android+medNowAndroidAppIdPath),{itunesUrl:itunesUrl,googlePlayUrl:googlePlayUrl}}angular.module("MedNow").constant("medNowAppLinksIds",{webExAndroid:"com.cisco.webex.meetings&hl=en",webExiOS:"cisco-webex-meetings/id298844386?mt=8",medNowAndroid:"org.spectrumhealth.mednow",medNowiOS:"spectrum-health-mednow/id1263205928?ls=1&mt=8"}),angular.module("MedNow").service("MedNowAppLinksService",MedNowAppLinksService),MedNowAppLinksService.$inject=["mobileAppLinkPrefix","FeatureStatus","UserAgent","medNowAppLinksIds"]}(),angular.module("old-member-center",[]),function(){"use strict";function _routeConfiguration($routeProvider){$routeProvider.when("/member-center/healthByChoice",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"],authorization:"HEALTH_BY_CHOICE"}).when("/member-center/memberHandbook",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/memberPerks",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/plans",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/personalHealthRecord",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/changePrimaryCareProvider",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/healthAssessment",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"],authorization:"HEALTH_BY_CHOICE"}).when("/member-center/approvedDrugs",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/visionBenefits",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"],authorization:"VISION_MANAGER"}).when("/member-center/healthLibrary",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/healthAndWellness",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/wellness",{templateUrl:"app/old-member-center/views/wellness-launch-out.html",controller:"WellnessCtrl",feature:"separateWellnessPage",roles:["green"]}).when("/member-center/preventiveHealth",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",feature:"separateWellnessPage",roles:["green"]}).when("/member-center/priorityHealthNews",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/contactPriorityHealth",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/payMyPremium",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"],authorization:"PAY_MY_PREMIUM"}).when("/member-center/priorityHealthMailbox",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/memberForms",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/feedbackForm",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]}).when("/member-center/otherPHInfo",{templateUrl:"app/old-member-center/views/old-member-center.html",controller:"OldMemberCenterController",roles:["green"]})}var app=angular.module("app");app.config(["$routeProvider",_routeConfiguration])}(),function(){"use strict";function OldMemberCenterService(appConfig,Environment,$window,UserAgent,AuthService,PopupService){function buildSsoLink(tempToken,destination,appId){return appConfig.universalLoginApiEndpoint[Environment.get().brand]+"/OldMemberCenterRedirector?tempToken="+tempToken+"&appId="+appId+"&destination="+destination}function goBackToOldMemberCenter(destination){destination||(destination=homeDestination);var url="redirect.html";PopupService.prepPopup(url,"_system"),AuthService.generateTempToken(appId).$promise.then(function(data){url=buildSsoLink(data.tempToken,destination,appId),PopupService.openPopup(url,"_system")},function(){PopupService.closePopup()})}var appId=Environment.get().appId,homeDestination="Home";this.homeDestination=homeDestination,this.goBackToOldMemberCenter=goBackToOldMemberCenter,this.buildSsoLink=buildSsoLink}angular.module("old-member-center").service("OldMemberCenterService",OldMemberCenterService),OldMemberCenterService.$inject=["appConfig","Environment","$window","UserAgent","AuthService","PopupService"]}(),function(){"use strict";function OldMemberCenterCtrl($scope,OldMemberCenterService,$timeout,$http,$location){function enableButton(){$scope.buttonDisabled=!1}function goBackToOldMemberCenter(destination){$scope.buttonDisabled=!0,$timeout(enableButton,2e4),OldMemberCenterService.goBackToOldMemberCenter(destination)}$scope.backToOMC=goBackToOldMemberCenter,$scope.enableButton=enableButton,$scope.buttonDisabled=!1;var parsedUrl=$location.url().replace("/member-center/","");$http.get("app/old-member-center/data/page-text.json").success(function(data){data[parsedUrl]||(parsedUrl="default"),$scope.text=data[parsedUrl]})}angular.module("old-member-center").controller("OldMemberCenterController",OldMemberCenterCtrl),OldMemberCenterCtrl.$inject=["$scope","OldMemberCenterService","$timeout","$http","$location"]}(),angular.module("longform",["services","filters"]),function(){"use strict";function service($http,appConfig){var route=[appConfig.apiEndpoint,"LongFormEnrollment"].join("/");this.submitForm=function(formData){return $http({method:"POST",url:route,data:formData})}}var module=angular.module("longform");module.service("LongForm",["$http","appConfig",service])}(),function(){"use strict";function LongformCtrl(InsuranceProviders,$scope,Users,$route,GeographyService,LongForm,V1Session,Notifications,usSpinnerService,Moment,FeatureStatus,ContactUs){var userModel=Users.currentUser.get();if($scope.combinedEnrollment=FeatureStatus.checkFeatureStatus("combinedEnrollment"),$scope.myMatch=FeatureStatus.checkFeatureStatus("combinedEnrollment"),$scope.InsuranceProviders=InsuranceProviders,$scope.providersList=$scope.InsuranceProviders.getAllInsuranceProviders(),$scope.memberForm=userModel.isPatient,$scope.patientForm=userModel.isMember,$scope.contactUsPhoneNumber=ContactUs.phoneNumber,$scope.genders=["Female","Male"],$scope.longForm={FirstName:userModel.firstName,LastName:userModel.lastName,EmailAddress:userModel.username,DOB:userModel.dob.substring(5,7)+userModel.dob.substring(8,10)+userModel.dob.substring(0,4),State:"MI"},$scope.myMatch===!0&&$scope.memberForm===!0&&($scope.longForm.provider=$scope.providersList[0]),void 0!==userModel.gender){var gender=userModel.gender+"";$scope.longForm.Gender=gender.substring(0,1)+angular.lowercase(gender.substring(1,userModel.gender.length))}$scope.wizardStep=1,$scope.states=GeographyService.getStates(),$scope.longFormComplete=userModel.hasPendingEnrollmentLongForm,$scope.setLongFormDates=function(submissionDate){var completedDate;completedDate=submissionDate?new Moment(submissionDate+"Z"):new Moment;
var expectedDate=completedDate.clone();expectedDate.add({days:3}),$scope.longFormEnrollmentCompleteDate=completedDate.toDate(),$scope.longFormExpectedResponseDate=expectedDate.toDate()},userModel.enrollmentLongFormLastDate&&$scope.setLongFormDates(userModel.enrollmentLongFormLastDate),$scope.next=function(){$scope.wizardStep+=1},$scope.back=function(){$scope.wizardStep-=1},$scope.cancel=function(){$route.reload()},$scope.submit=function(){usSpinnerService.spin("spinner-main");var data=angular.copy($scope.longForm);if(data.DOB=[data.DOB.substring(0,2),data.DOB.substring(2,4),data.DOB.substring(4)].join("/"),void 0!==data.contractid){var phSplit=data.contractid.split("-");data.PriorityContractSuffix=phSplit[1],data.PriorityContractNumber=phSplit[0]}LongForm.submitForm(data).then(function(){$scope.longFormComplete=!0,$scope.setLongFormDates(),usSpinnerService.stop("spinner-main")},function(){Notifications.error("Error: Failed to submit form"),usSpinnerService.stop("spinner-main")})}}var module=angular.module("longform");module.controller("LongformController",["InsuranceProviders","$scope","Users","$route","GeographyService","LongForm","V1Session","Notifications","usSpinnerService","Moment","FeatureStatus","ContactUs",LongformCtrl])}(),angular.module("migrate",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/migrate",{title:"Migrate",templateUrl:"app/migrate/views/migrate.html",controller:"MigrateController"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("migrate").constant("migrateConfig",{apiRoutes:{migrate:"/migrate"}}),function(){"use strict";function controller($scope,Users,MigrateService,appConfig,Notifications,UserAgent,usSpinnerService,$location,Environment,AuthService,Login){var currentUser=Users.currentUser.get();$scope.migrate={},$scope.triedMigrating=!1,$scope.migrateSuccess=!1,$scope.migrationInProgress=!1;var emailIsSet=angular.isDefined(currentUser.email)&&currentUser.email.indexOf("@")>-1;emailIsSet&&($scope.migrate.newUsername=currentUser.email,$scope.emailIsSet=emailIsSet),"ph"!==Environment.get().brand&&$location.path("/login");var usernameIsAnEmailAddress=currentUser.username.indexOf("@")>-1;usernameIsAnEmailAddress&&($scope.migrate.newUsername=currentUser.username),$scope.submitClicked=function(){usSpinnerService.spin("spinner-main"),$scope.migrationInProgress=!0,AuthService.generateTempToken(Environment.get().appId).$promise.then(function(tempTokenData){MigrateService.migrateAccount($scope.migrate.newUsername,$scope.migrate.newPassword,tempTokenData.tempToken).$promise.then(function(data){$scope.triedMigrating=!0,$scope.migrationInProgress=!1,usSpinnerService.stop("spinner-main"),void 0!==data.MigrationSuccess&&null!==data.MigrationSuccess&&(data.MigrationSuccess?($scope.migrateSuccess=!0,UserAgent.isMobileApp?Notifications.info("Info: Please use the Spectrum Health app."):(Login.logout(),window.location=appConfig.spectrumMyHealthUrl+data.Message)):($scope.migrateSuccess=!1,Notifications.error("Error: Migration failed message - "+data.MigrationMessage)))},function(){$scope.triedMigrating=!0,$scope.migrateSuccess=!1,$scope.migrationInProgress=!1,$scope.migrate.newUsername="",$scope.migrate.newPassword="",$scope.migrate.newPasswordConfirm="",Notifications.error("Your account could not be upgraded at this time. Please try again."),usSpinnerService.stop("spinner-main"),window.scrollTo(0,0)})})}}var module=angular.module("migrate");module.controller("MigrateController",["$scope","Users","MigrateService","appConfig","Notifications","UserAgent","usSpinnerService","$location","Environment","AuthService","Login",controller])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service($resource,appConfig,Environment,migrateConfig){var apiEndpoint=appConfig.universalLoginApiEndpoint[Environment.get().brand].replace(/\/$/,"");this.migrateAccount=function(newUsername,newPassword,tempToken){var fullRoute=resourceRoute(apiEndpoint,migrateConfig.apiRoutes.migrate+"?tempToken="+tempToken),migrationResult=$resource(fullRoute).save({UserName:newUsername,Password:newPassword});return migrationResult}}var module=angular.module("migrate");module.service("MigrateService",["$resource","appConfig","Environment","migrateConfig",service])}(),angular.module("signup",["ui.bootstrap","services","filters"]),function(){"use strict";function isUserProxiedCheck(Users,$q){var deferred=$q.defer();return Users.isUserProxied()?deferred.reject():deferred.resolve(),deferred.promise}function routeConfiguration($routeProvider){$routeProvider.when("/signup",{title:"Signup",templateUrl:"app/signup/views/signup-page.html",controller:"SignupCtrl",resolve:{getRedirectUrl:ssoRedirect}}).when("/signup/AddMemberData",{title:"Signup",templateUrl:"app/signup/views/add-missing-data.html",rolesExpression:"blue && !green && hasAccess",feature:"myMatch",resolve:{isUserProxiedCheck:isUserProxiedCheck}}).when("/signup/AddPatientData",{title:"Signup",templateUrl:"app/signup/views/add-missing-data.html",rolesExpression:"green && !blue && hasAccess",feature:"myMatch",resolve:{isUserProxiedCheck:isUserProxiedCheck}}).when("/signup/sso/:partner",{title:"Signup SSO",templateUrl:"app/signup/views/signup-page.html",feature:"singleSignOnCafeWell",controller:"SignupCtrl",resolve:{getRedirectUrl:ssoRedirect}})}function ssoRedirect($q,$route,SSO){return $q.when(function(){var partner=$route.current.params.partner;return partner&&"CAFEWELL"===partner.toUpperCase()?SSO.getCafeWellUrl().then(function(result){return result.ssoUrl}):$q.when(void 0)})}var app=angular.module("app");isUserProxiedCheck.$inject=["Users","$q"],ssoRedirect.$inject=["$q","$route","SSO"],app.config(["$routeProvider",routeConfiguration])}(),angular.module("signup").constant("signupConfig",{ageError:{minor:{heading:"Message to Minors",subHeading:"We show that you have entered the date of birth of a minor.",message:"Minors are not able to have their own MyHealth accounts. To gain access to your child’s information, you must first set up your own MyHealth account. Once your account is set up, to maintain the privacy and security of our patient’s information, we will need to verify that you are the parent or guardian. This verification must be done in person at a Spectrum Health facility for that access to be provided for you. Often, it is best to go to your child's primary care provider's office, but any Spectrum Health location should be able to assist you. Be sure to bring photo identification. Spectrum Health staff will complete the process for you."},adolescent:{heading:"Message to Adolescents",subHeading:"We show that you have entered the date of birth of an adolescent.",message:"Due to legal restrictions on information for this population, at this time, detailed health information for patients between the ages of 12 - 17 is not available through MyHealth. Please see our FAQ or contact our Customer Support team for additional information."}}}),function(){"use strict";function SignupCtrl(InsuranceProviders,Signup,$scope,$location,$http,$sce,usSpinnerService,Notifications,Login,Users,signupConfig,FeatureStatus,AgeCalculator,$routeParams,getRedirectUrl,$cookies){var getFormattedDob=function(dobMMDDYYYY,delimiterChar){return(void 0===delimiterChar||null===delimiterChar)&&(delimiterChar="/"),[dobMMDDYYYY.slice(0,2),dobMMDDYYYY.slice(2,4),dobMMDDYYYY.slice(4,8)].join(delimiterChar)};if($scope.InsuranceProviders=InsuranceProviders,$scope.providersList=$scope.InsuranceProviders.getAllInsuranceProviders(),$scope.signupDropIn=FeatureStatus.checkFeatureStatus("signUpDropIn"),$scope.accountModel={},$scope.hideHeader=!0,$scope.focusStartInsurance=!1,$scope.wizard={step1:"step1",step2:"step2",step3:"step3",step4:"step4",rsa:"rsa",ageError:"ageError",termsDeclined:"termsDeclined",emailError:"emailError"},$scope.startingWizardStep=$scope.wizard.step1,Login.setRedirectExternalUrlAfterLogin(getRedirectUrl),$scope.invitationid="",void 0!==$routeParams.invitationid&&($scope.invitationid=$routeParams.invitationid),$scope.signupDropIn&&void 0!==$routeParams.signUpGuid){var signUpGuid=$routeParams.signUpGuid;if($cookies.getObject(signUpGuid)){var patient=$cookies.getObject(signUpGuid);$cookies.remove(signUpGuid),$scope.accountModel.firstName=patient.firstName,$scope.accountModel.lastName=patient.lastName,$scope.accountModel.dob=patient.dob.replace(/\//g,""),$scope.accountModel.email=patient.email,void 0!==patient.insurance&&patient.insurance?($scope.accountModel.provider=_.find($scope.providersList,function(ins){return ins.description===$scope.InsuranceProviders.InsuranceProviderConstants.PH}),$scope.focusStartInsurance=!0):($scope.accountModel.provider=_.find($scope.providersList,function(ins){return ins.description===$scope.InsuranceProviders.InsuranceProviderConstants.Other}),$scope.startingWizardStep=$scope.wizard.step2)}}$scope.goToWizardStep=function(step){$scope.wizardStep=step},$scope.cancelRegistration=function(){$location.path("")},$scope.createGuestAccount=function(){usSpinnerService.spin("spinner-main"),$scope.termsBtnDisabled=!0,$scope.accountModel.userAcceptTermsConditions=!0;var age=AgeCalculator.calculateAge(new Date(getFormattedDob($scope.accountModel.dob,"/")));age>=18?Signup.createGuestAccount({Email:$scope.accountModel.email,Password:$scope.accountModel.password,UserAcceptTermsConditions:!0,dob:getFormattedDob($scope.accountModel.dob,"-"),firstName:$scope.accountModel.firstName,lastName:$scope.accountModel.lastName,userName:$scope.accountModel.email}).$promise.then(function(){usSpinnerService.stop("spinner-main"),$scope.beginRsa()},function(data){409===data.status?($scope.accountModel.email="",$scope.accountModel.password="",$scope.accountModel.passwordConfirm="",$scope.goToWizardStep($scope.wizard.emailError)):(Notifications.error("Error: Failed to create account"),$scope.goToWizardStep($scope.wizard.step1)),usSpinnerService.stop("spinner-main"),$scope.termsBtnDisabled=!1}):($scope.goToWizardStep($scope.wizard.ageError),12>age?$scope.ageError=signupConfig.ageError.minor:$scope.ageError=signupConfig.ageError.adolescent,usSpinnerService.stop("spinner-main"))},$scope.beginRsa=function(){var userModel=Users.currentUser.get();userModel.username=$scope.accountModel.email,userModel.firstName=$scope.accountModel.firstName,userModel.lastName=$scope.accountModel.lastName,userModel.dob=[$scope.accountModel.dob.substring(4),$scope.accountModel.dob.substring(0,2),$scope.accountModel.dob.substring(2,4)].join("-"),userModel.contractid=$scope.accountModel.contractid,userModel.provider=$scope.accountModel.provider,Users.currentUser.set(userModel),$scope.signupView=$scope.wizard.rsa},$scope.goToWizardStep($scope.startingWizardStep)}var module=angular.module("signup");module.controller("SignupCtrl",["InsuranceProviders","Signup","$scope","$location","$http","$sce","usSpinnerService","Notifications","Login","Users","signupConfig","FeatureStatus","AgeCalculator","$routeParams","getRedirectUrl","$cookies",SignupCtrl])}(),function(){"use strict";angular.module("signup").controller("AddMissingDataController",["Users","usSpinnerService","EnrollmentStatus","Notifications","$rootScope",function(Users,usSpinnerService,EnrollmentStatus,Notifications,$rootScope){var vm=this,userModel=Users.currentUser.get();void 0!==userModel.isPatient&&userModel.isPatient?vm.title="Add Priority Health Information":vm.title="Add Spectrum Health Information",vm.loading=!0,vm.enrollmentWizardSteps={"default":"default",rsa:"rsa",longform:"longform"},vm.enrollmentWizardStep=vm.enrollmentWizardSteps["default"],$rootScope.$on("goToLongForm",function(){vm.enrollmentWizardStep=vm.enrollmentWizardSteps.longform}),vm.showEnrollmentForms=function(){vm.getDataDisabled=!0,vm.isLoading=!0,EnrollmentStatus.getEnrollmentStatus().then(function(response){userModel.addingMissingPieceFirstname=response.data.firstname,userModel.addingMissingPieceLastname=response.data.lastname,userModel.dob=response.data.dateOfBirth,userModel.addingMissingPiece=response.data.addingMissingPiece,userModel.hasPendingEnrollmentLongForm=response.data.hasPendingEnrollmentLongForm,userModel.enrollmentLongFormLastDate=response.data.enrollmentLongFormLastDate,Users.currentUser.set(userModel),vm.getDataDisabled=!1,vm.enrollmentWizardStep=response.data.canAttemptRSAAgainThisSession?vm.enrollmentWizardSteps.rsa:vm.enrollmentWizardSteps.longform,vm.isLoading=!1},function(){vm.getDataDisabled=!1,vm.isLoading=!1,Notifications.error("Error: Unable to get enrollment information.")})},vm.showEnrollmentForms(),vm.loading=!1}])}(),function(){"use strict";angular.module("signup").factory("Signup",["appConfig","signupConfig","$resource",function(appConfig,signupConfig,$resource){var route=[appConfig.apiEndpoint,"account"].join("/"),resource=$resource(route,{},{createAccount:{method:"POST",headers:{retry:!0}}}),createGuestAccount=function(data){return resource.createAccount(data)};return{createGuestAccount:createGuestAccount}}])}(),function(){"use strict";angular.module("signup").factory("SignupWizard",[function(){var wizard={step1:"step1",step2:"step2",step3:"step3",step4:"step4",currentStepNumber:1,rsa:"rsa",ageError:"ageError",termsDeclined:"termsDeclined",emailError:"emailError"},getWizard=function(){return wizard},getCurrentStepNumber=function(){return wizard.currentStepNumber},setCurrentStepNumber=function(stepNumber){wizard.currentStepNumber=stepNumber},goToNextStep=function(){wizard.currentStepNumber+=1},goToPreviousStep=function(){wizard.currentStepNumber-=1};return{goToNextStep:goToNextStep,goToPreviousStep:goToPreviousStep,getWizard:getWizard,setCurrentStepNumber:setCurrentStepNumber,getCurrentStepNumber:getCurrentStepNumber}}])}(),angular.module("notifications",[]),function(){"use strict";function provider(){var options,global;global=this,options={ttl:-1,type:"info",methods:{error:"danger",info:"info",warn:"warning",success:"success"},cssPrefix:"alert"},global.setOptions=function(newOptions){return angular.extend(options,newOptions),this},global.ttl=function(ttl){return angular.isDefined(ttl)?(options.ttl=ttl,this):options.ttl},global.type=function(type){return angular.isDefined(type)?(options.type=type,this):options.type},global.methods=function(methods){return angular.isDefined(methods)?(options.methods=methods,this):options.methods},global.cssPrefix=function(cssPrefix){return angular.isDefined(cssPrefix)?(options.cssPrefix=cssPrefix,this):options.cssPrefix},global.$get=function($timeout,$rootScope){function Notifications(){var self=this;this.notifications={},this.index=0,this.options=options,$rootScope.$on("$locationChangeStart",function(){self.clear(!0)})}return Notifications.prototype.broadcastUpdate=function(){$rootScope.$broadcast("notifications::update",this.notifications)},Notifications.prototype.all=function(){return this.notifications},Notifications.prototype.add=function(message,type,ttl,persist){var notification,index=this.index+1,self=this;return this.index=this.index+1,notification={message:message?message.toString():"",type:type?type.toString():options.type,ttl:ttl&&(_.isNumber(ttl)||_.isString(ttl))?parseInt(ttl,10):options.ttl,persist:_.isBoolean(ttl)&&ttl===!0||persist},this.notifications[index]=notification,notification.ttl>0&&$timeout(function(){self.remove(index)},notification.ttl),this.broadcastUpdate(),index},Notifications.prototype.remove=function(index){return this.notifications.hasOwnProperty(index)&&(delete this.notifications[index],this.broadcastUpdate()),this},Notifications.prototype.clear=function(keepPersistent){return angular.forEach(this.notifications,function(note,index){keepPersistent&&note.persist||this.remove(index)},this),this.broadcastUpdate(),this},angular.forEach(options.methods,function(value,key){var method=value,type=value;angular.isString(key)&&isNaN(key)&&key!==type&&(method=key),Notifications.prototype[method]=function(message,ttl,persist){this.add(message,type,ttl,persist)}}),new Notifications},global.$get.$inject=["$timeout","$rootScope"]}var module=angular.module("notifications");module.provider("Notifications",[provider])}(),function(){"use strict";function directive(notifications){return{restrict:"AE",replace:!1,templateUrl:"app/notifications/templates/notifications.html",link:function(scope){scope.cssPrefix=notifications.options.cssPrefix,scope.notifications=notifications.all(),scope.remove=function(index){notifications.remove(index)},scope.anyNotifications=function(){var keys=_.keys(scope.notifications);return keys&&keys.length}}}}var module=angular.module("notifications");module.directive("notificationList",["Notifications",directive])}(),angular.module("home",["services","filters"]),function(){"use strict";function controller($scope,$http,$location,config,$routeParams,FeatureStatus){function initialize(){var featureStatus=FeatureStatus.getFeatureStatus();"string"!=typeof featureStatus?getMenuData(featureStatus):reloadHomeUrl(),void 0!==$routeParams.invitationid&&$location.path("/signup"),$scope.loggedIn&&$location.path($scope.homeUrl)}function getMenuData(data){features=data.features;var menuPromise=$http.get(config.menuUrl);menuPromise.then(addHomeMenuItemsFromData),menuPromise["catch"](reloadHomeUrl)}function addHomeMenuItemsFromData(response){for(var menuData=response.data,i=0;i<menuData.length;i+=1){var menuItem=menuData[i];menuItem.hideWhenAvailable?features[menuItem.hideWhenAvailable]||$scope.homeMenu.push(menuItem):menuItem.showWhenAvailable?features[menuItem.showWhenAvailable]&&$scope.homeMenu.push(menuItem):$scope.homeMenu.push(menuItem)}}function reloadHomeUrl(){$location.path($scope.homeUrl)}var features;$scope.homeMenu=[],initialize()}var module=angular.module("home");module.controller("HomeCtrl",["$scope","$http","$location","homeConfig","$routeParams","FeatureStatus",controller])}(),function(){"use strict";function controller($scope,appConfig,Pin,Environment){$scope.createAccountUrl=appConfig.createAccountUrl,$scope.mySpectrumUrl=appConfig.mySpectrumUrl,$scope.loginUrl="login",Pin.state.isEnabled&&Pin.state.hasRefreshToken&&($scope.loginUrl="pin/login"),"spectrum"===appConfig.brand||"sh"===Environment.get().brand?$scope.appName="MyHealth":$scope.appName="PriorityHealth Mobile App"}var module=angular.module("login");module.controller("SplashCtrl",["$scope","appConfig","Pin","Environment",controller])}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/",{title:"Home",templateUrl:"app/home/views/home.html",controller:"HomeCtrl"}).when("/splash/",{title:"Home",templateUrl:"app/home/views/home.html",controller:"HomeCtrl"}).when("/splash/:email/:invitationid",{title:"Home",templateUrl:"app/home/views/home.html",controller:"HomeCtrl"})}angular.module("app").config(["$routeProvider",routeConfiguration])}(),angular.module("home").constant("homeConfig",{menuUrl:"app/home/data/menu.json"}),angular.module("rsa",["services","filters"]),function(){"use strict";function controller(InsuranceProviders,Rsa,$scope,usSpinnerService,Notifications,Users,$rootScope,rsaConfig,FeatureStatus,AgeCalculator,$location,Login,AuthService,Environment,ContactUs){var answers=[];$scope.combinedEnrollment=FeatureStatus.checkFeatureStatus("combinedEnrollment"),$scope.myMatch=FeatureStatus.checkFeatureStatus("MyMatch"),$scope.enrollmentCurrentUser=Users.currentUser.get(),$scope.InsuranceProviders=InsuranceProviders,$scope.providersList=$scope.InsuranceProviders.getAllInsuranceProviders(),$scope.questionNum=0,$scope.progressVal=10,$scope.selected=null,$scope.phoneNumber=ContactUs.phoneNumber,$scope.enrollmentCurrentUser.dob&&($scope.enrollmentCurrentUser.dob=$scope.enrollmentCurrentUser.dob.substring(5,7)+$scope.enrollmentCurrentUser.dob.substring(8,10)+$scope.enrollmentCurrentUser.dob.substring(0,4)),$scope.userHasDOB=!1,$scope.wizard={userInfo:"userInfo",rsa:"rsa",submitting:"submitting",ageError:"ageError",failedQuestionsError:"failedQuestionsError",generalError:"generalError",accountTakenError:"accountTakenError"},$scope.rsaWizardStep=$scope.wizard.userInfo,$scope.needAdditionalInfo=!1,$scope.enrollmentCurrentUser.firstName||$scope.enrollmentCurrentUser.lastName||void 0===$scope.enrollmentCurrentUser.fullName||null===$scope.enrollmentCurrentUser.fullName||($scope.enrollmentCurrentUser.names=$scope.enrollmentCurrentUser.fullName.split(" "),$scope.enrollmentCurrentUser.firstName=$scope.enrollmentCurrentUser.names[0],$scope.enrollmentCurrentUser.lastName=$scope.enrollmentCurrentUser.names[$scope.enrollmentCurrentUser.names.length-1]),$scope.enrollmentCurrentUser.addingMissingPiece===!0&&($scope.enrollmentCurrentUser.firstName=$scope.enrollmentCurrentUser.addingMissingPieceFirstname,$scope.enrollmentCurrentUser.lastName=$scope.enrollmentCurrentUser.addingMissingPieceLastname),$scope.enrollmentCurrentUser.addingMissingPiece===!0?$scope.enrollmentCurrentUser.isPatient===!1?$scope.rsaFormHeader="Select continue to begin enrollment":$scope.rsaFormHeader="Please provide a valid Priority Health contract Id to continue":$scope.rsaFormHeader="Please confirm your data to search our records.",$scope.tryRsaAgain=function(){$scope.rsaWizardStep=$scope.wizard.userInfo,answers=[],$scope.needAdditionalInfo=!1,$scope.questionNum=0,$scope.progressVal=10,$scope.selected=null},$scope.getRsaInfo=function(){usSpinnerService.spin("spinner-main"),$scope.userModel={firstName:$scope.enrollmentCurrentUser.firstName,lastName:$scope.enrollmentCurrentUser.lastName,dob:[$scope.enrollmentCurrentUser.dob.substring(4),$scope.enrollmentCurrentUser.dob.substring(0,2),$scope.enrollmentCurrentUser.dob.substring(2,4)].join("-")},void 0===$scope.enrollmentCurrentUser.contractid?$scope.userModel.contractid=" ":$scope.userModel.contractid=$scope.enrollmentCurrentUser.contractid,void 0===$scope.enrollmentCurrentUser.middleName?$scope.userModel.middleName=" ":$scope.userModel.middleName=$scope.enrollmentCurrentUser.middleName,$scope.userModel.gender=$scope.enrollmentCurrentUser.gender;var age=AgeCalculator.calculateAge(new Date($scope.userModel.dob));age>=18?$scope.enrollmentCurrentUser.addingMissingPiece===!0?Rsa.getMissingPieceMatches($scope.userModel.contractid).then(function(response){var result=parseInt(response[0],10);usSpinnerService.stop("spinner-main"),1===result?$scope.getRsaQuestions():$scope.closeRsa()},function(){usSpinnerService.stop("spinner-main"),$scope.rsaWizardStep=$scope.wizard.generalError}):$scope.needAdditionalInfo?Rsa.filterPatientsMultipleMatches($scope.enrollmentCurrentUser.username,$scope.userModel.middleName,$scope.userModel.gender).then(function(response){var result=parseInt(response[0],10);usSpinnerService.stop("spinner-main"),1===result?$scope.getRsaQuestions():$scope.closeRsa()},function(){usSpinnerService.stop("spinner-main"),$scope.rsaWizardStep=$scope.wizard.generalError}):Rsa.getPatientsByNameAndDob($scope.enrollmentCurrentUser.username,$scope.userModel.firstName,$scope.userModel.lastName,$scope.userModel.dob,$scope.userModel.contractid,$scope.invitationid).then(function(response){var result=parseInt(response[0],10);usSpinnerService.stop("spinner-main"),1===result?$scope.getRsaQuestions():2===result?$scope.needAdditionalInfo=!0:$scope.closeRsa()},function(){usSpinnerService.stop("spinner-main"),$scope.rsaWizardStep=$scope.wizard.generalError}):(usSpinnerService.stop("spinner-main"),$scope.rsaWizardStep=$scope.wizard.ageError,12>=age?$scope.ageError=rsaConfig.ageError.minor:$scope.ageError=rsaConfig.ageError.adolescent)},$scope.getRsaQuestions=function(){usSpinnerService.spin("spinner-main");var userInfo={Username:$scope.enrollmentCurrentUser.username};Rsa.getRsaQuestions(userInfo).then(function(response){usSpinnerService.stop("spinner-main"),response.isSuccess?($scope.rsaWizardStep=$scope.wizard.rsa,$scope.questions=response.questions,$scope.questionSetId=response.questionSetId,$scope.transactionId=response.transactionId,$scope.currentQuestion=$scope.questions[$scope.questionNum],$scope.progressIncrement=90/$scope.questions.length):"Account already created"===response.message?$scope.rsaWizardStep=$scope.wizard.accountTakenError:$scope.rsaWizardStep=$scope.wizard.generalError},function(){usSpinnerService.stop("spinner-main"),$scope.rsaWizardStep=$scope.wizard.generalError})},$scope.updateQuestion=function(){$scope.questionNum+1<$scope.questions.length?($scope.progressVal+=$scope.progressIncrement,$scope.questionNum+=1,$scope.currentQuestion=$scope.questions[$scope.questionNum]):($scope.progressVal=100,$scope.sendRsaQuestions(),$scope.currentQuestion=null)},$scope.saveData=function(){$scope.answer?(answers.push($scope.answer),$scope.answer="",$scope.error=!1,$scope.selected=null,$scope.updateQuestion()):$scope.error=!0},$scope.setAnswer=function(questionId,choiceId,index){$scope.selected=index,$scope.answer={ChoiceId:choiceId,QuestionId:questionId}},$scope.sendRsaQuestions=function(){var answersJson=JSON.parse(angular.toJson(answers)),userInfo={Username:$scope.enrollmentCurrentUser.username,QuestionSetId:$scope.questionSetId,TransactionId:$scope.transactionId,Answers:answersJson};usSpinnerService.spin("spinner-main"),$scope.rsaWizardStep=$scope.wizard.submitting,Rsa.sendRsaAnswers(userInfo).then(function(response){usSpinnerService.stop("spinner-main"),response.isSuccess?($scope.rsaComplete=!0,$scope.closeRsa(!0)):$scope.handleRsaError(response)},function(){usSpinnerService.stop("spinner-main"),$scope.rsaWizardStep=$scope.wizard.generalError})},$scope.rsaInfo=function(){Notifications.warn(rsaConfig.rsaInfo)},$scope.getRsaWizardHeaderText=function(){var returnVal;switch($scope.rsaWizardStep){case $scope.wizard.ageError:returnVal=$scope.ageError.heading;break;default:returnVal="Your Progress"}return returnVal},$scope.showStatusBar=function(){return $scope.rsaWizardStep===$scope.wizard.rsa&&$scope.rsaWizardStep!==$scope.userInfo},$scope.closeRsa=function(success){if("accountTakenError"===$scope.rsaWizardStep)"/signup/AddMemberData"===$location.path()||"/signup/AddPatientData"===$location.path()?$location.path("/timeline"):("/signup"!==$location.path()&&Login.logout(),$location.path("/login"));else if($location.path().match(/\/signup(?:|\/sso\/.*)$/i)){var loginModel={username:$scope.accountModel.email,password:$scope.accountModel.password};usSpinnerService.spin("spinner-main"),Login.authenticate(loginModel).then(function(){return Login.shouldRedirectToExternalUrlAfterLogin().then(function(shouldRedirect){return shouldRedirect?Login.redirectToExternalUrl()["catch"](Notifications.error):(usSpinnerService.stop("spinner-main"),void Login.login())})},function(){usSpinnerService.stop("spinner-main"),$location.path("/login")}).then(function(){$location.path().match(/\/sso.*/i)||(success?$location.path("/timeline"):$location.path("/lobby"))})}else if(success){var appId=Environment.get().appId;$scope.enrollmentCurrentUser.addingMissingPiece===!0?(usSpinnerService.spin("spinner-main"),AuthService.generateTempToken(appId).$promise.then(function(data){Login.ssoAuthenticate(data.tempToken).then(function(){usSpinnerService.stop("spinner-main"),$location.path("/timeline")})})):AuthService.generateTempToken(appId).$promise.then(function(data){Login.logout(),Login.ssoAuthenticate(data.tempToken).then(function(profile){Login.login(),profile.menuRoles.indexOf("lobby")>-1?$location.path("/welcome"):$location.path("/timeline")})})}else $rootScope.$emit("goToLongForm")},$scope.goToLobby=function(){"/signup"===$location.path()?$scope.closeRsa():$location.path("/lobby")},$scope.handleRsaError=function(response){switch(response.errorCode){case"ERROR_ADDITIONAL_QUESTIONS_REQUIRED":$scope.questions=response.questions,$scope.questionSetId=response.questionSetId,$scope.transactionId=response.transactionId,$scope.currentQuestion=$scope.questions[0],$scope.rsaWizardStep=$scope.wizard.rsa;break;case"ERROR_FAILED_QUESTIONS":$scope.enrollmentCurrentUser.addingMissingPiece===!0?$scope.closeRsa():$scope.rsaWizardStep=$scope.wizard.failedQuestionsError;break;default:$scope.rsaWizardStep=$scope.wizard.generalError}}}var module=angular.module("rsa");module.controller("RsaController",["InsuranceProviders","Rsa","$scope","usSpinnerService","Notifications","Users","$rootScope","rsaConfig","FeatureStatus","AgeCalculator","$location","Login","AuthService","Environment","ContactUs",controller])}(),angular.module("rsa").constant("rsaConfig",{rsaInfo:"In order to protect your personal and medical information, Spectrum Health has partnered with a third party service to help verify identity before we link your patient record to your MyHealth account. Our partner uses data from a large compilation of public records and other commercially available data sources to ask you questions that only you should be able to answer. The questions are designed based on the compiled data. No private records or credit data were used. The questions and corresponding answers are not stored anywhere. Only the number of correct and incorrect answers, and whether or not the identity verification was successful, is stored.",ageError:{minor:{heading:"Message to Minors",subHeading:"We show that you have entered the date of birth of a minor.",message:"Minors are not able to have their own MyHealth accounts. To gain access to your child’s information, you must first set up your own MyHealth account. Once your account is set up, to maintain the privacy and security of our patient’s information, we will need to verify that you are the parent or guardian. This verification must be done in person at a Spectrum Health facility for that access to be provided for you. Often, it is best to go to your child's primary care provider's office, but any Spectrum Health location should be able to assist you. Be sure to bring photo identification. Spectrum Health staff will complete the process for you."},adolescent:{heading:"Message to Adolescents",subHeading:"We show that you have entered the date of birth of an adolescent.",message:"Due to legal restrictions on information for this population, at this time, detailed health information for patients between the ages of 12 - 17 is not available through MyHealth. Please see our FAQ or contact our Customer Support team for additional information."}}}),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/rsa",{title:"RSA",templateUrl:"app/rsa/views/rsa.html"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function service($resource,appConfig){var combinedEnrollmentUrl=appConfig.apiEndpoint+"/combinedEnrollment",missingPieceUrl=appConfig.apiEndpoint+"/PatientOrMemberEnrollment",resource=$resource(combinedEnrollmentUrl,{},{getPatientData:{method:"GET",headers:{retry:!0},transformResponse:[]},getMissingData:{method:"GET",url:missingPieceUrl,headers:{retry:!0},transformResponse:[]},getQuestions:{method:"POST",headers:{retry:!0}},sendQuestions:{method:"PUT",headers:{retry:!0}}}),getPatientsByNameAndDob=function(username,firstname,lastname,dob,contractid,invitationid){return resource.getPatientData({contractId:contractid,invitationId:invitationid,UserName:username,FirstName:firstname,LastName:lastname,Dob:dob}).$promise},getMissingPieceMatches=function(contractId){return resource.getMissingData({contractId:contractId}).$promise},filterPatientsMultipleMatches=function(username,middlename,gender){return resource.getPatientData({UserName:username,MiddleName:middlename,Gender:gender}).$promise},getRsaQuestions=function(data){return resource.getQuestions(data).$promise},sendRsaAnswers=function(data){return resource.sendQuestions(data).$promise};return{getPatientsByNameAndDob:getPatientsByNameAndDob,getMissingPieceMatches:getMissingPieceMatches,filterPatientsMultipleMatches:filterPatientsMultipleMatches,getRsaQuestions:getRsaQuestions,sendRsaAnswers:sendRsaAnswers}}var module=angular.module("rsa");module.service("Rsa",["$resource","appConfig",service])}(),angular.module("locations",["services","filters","ui.map"]),
function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/location/video-visits",{title:"Video Visits",templateUrl:"app/locations/views/video-visits.html",controller:"VideoVisitsLandingCtrl"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("locations").constant("locationsConfig",{apiRoutes:{locations:"/locations/",categories:"/locationCategories"},categories:{urgentCare:5,emergency:6},categoriesUrl:"app/locations/data/location-categories.json"}),function(){"use strict";function controller($scope,$routeParams,Locations,Notifications,usSpinnerService,GeoLocationService,LocationPermission,UserAgent,$url,FeatureStatus,Login){var getLocations,getCategoryName,getLocation;$scope.categoryId=$routeParams.categoryId,Login.getLoggedInStatus()===!0?$scope.videoVisitsURL="#/medical/ecare/video-visits":$scope.videoVisitsURL="#/location/video-visits",$scope.hasGoogleMaps=window.google&&window.google.maps,$scope.videoVisitsEnabled=FeatureStatus.checkFeatureStatus("videoVisits"),$scope.getMapUrl=function(loc){return $url.mapAddressUrl(loc)},usSpinnerService.spin("spinner-main");var locationRequest=function(callBack){UserAgent.deviceIsAndroid&&null===LocationPermission.getPermission()?window.navigator.notification.confirm("This app would like to use your location",function(buttonIndex){1===buttonIndex?(LocationPermission.setPermission(!0),callBack()):(LocationPermission.setPermission(!1),$scope.$apply(function(){Notifications.warn("To automatically display locations nearest to you, check that your device's location settings are enabled.")}))},"Location Request",["Allow","Deny"]):LocationPermission.getPermission()!==!1?callBack():Notifications.warn("To automatically display locations nearest to you, check that your device's location settings are enabled.")};getLocations=function(Locations,lat,lon,categoryId){Locations.getCategoryLocations(categoryId,lat,lon).then(function(locations){setTimeout(function(){$scope.$apply(function(){$scope.locations=locations,usSpinnerService.stop("spinner-main"),lat||locationRequest(function(){(new GeoLocationService).then(function(position){getLocations(Locations,position.coords.latitude,position.coords.longitude,categoryId)},function(reason){reason&&Notifications.error(reason),Notifications.warn("If you are having problems displaying locations nearest to you check that your device's location settings are enabled.")})})})},1)},function(){Notifications.error("Error: We were unable to load locations."),usSpinnerService.stop("spinner-main")})},getLocation=function(Locations,lat,lon,locationId){Locations.get(locationId).then(function(location){setTimeout(function(){$scope.$apply(function(){$scope.location=location,$scope.locations=[location],usSpinnerService.stop("spinner-main"),lat||locationRequest(function(){(new GeoLocationService).then(function(position){getLocation(Locations,position.coords.latitude,position.coords.longitude,locationId)},function(reason){reason&&Notifications.error(reason),Notifications.warn("If you are having problems displaying locations nearest to you check that your device's location settings are enabled.")})})})},1)},function(){Notifications.error("Error: We were unable to load location."),usSpinnerService.stop("spinner-main")})},getCategoryName=function(categoryId){categoryId?"5"===categoryId?$scope.title="Urgent Care Locations":"6"===categoryId?$scope.title="Emergency Care Locations":Locations.getCategory(categoryId).then(function(category){setTimeout(function(){$scope.$apply(function(){$scope.title=category.name})},1)},function(){Notifications.error("Error: We were unable to load title.")}):$scope.title="Locations Near Me"},$routeParams.locationId?getLocation(Locations,null,null,$routeParams.locationId):(getCategoryName($routeParams.categoryId),getLocations(Locations,null,null,$routeParams.categoryId))}var module=angular.module("locations");module.controller("LocationsCtrl",["$scope","$routeParams","Locations","Notifications","usSpinnerService","GeoLocationService","LocationPermission","UserAgent","$url","FeatureStatus","Login",controller])}(),function(){"use strict";function controller($scope,Locations,$filter,config,Notifications){$scope.title="Find a Facility",$scope.loading=!0,Locations.categories().success(function(categories){$scope.loading=!1,$scope.categories=$filter("filter")(categories,function(cat){return cat.id!==config.categories.urgentCare&&cat.id!==config.categories.emergency})}).error(function(){$scope.loading=!1,Notifications.error("Error: We were unable to load location categories.")})}var module=angular.module("locations");module.controller("FacilitiesCtrl",["$scope","Locations","$filter","locationsConfig","Notifications",controller])}(),function(){"use strict";var module=angular.module("locations");module.controller("MapCtrl",["$scope","$location","GeoLocationService",function($scope,$location,GeoLocationService){var refreshUserLocation,refreshMarkers,reCenterMap,cachedUserLocation=null;$scope.myMarkers=[],$scope.mapOptions={center:new google.maps.LatLng(35.784,-78.67),zoom:15,mapTypeId:google.maps.MapTypeId.ROADMAP},refreshUserLocation=function(){(new GeoLocationService).then(function(position){$scope.userLocationMarker&&$scope.userLocationMarker.setMap(null),$scope.userLocationMarker=new google.maps.Marker({icon:new google.maps.MarkerImage("assets/images/userLocation.png",new google.maps.Size(22,22),new google.maps.Point(0,18),new google.maps.Point(11,11)),map:$scope.myMap}),cachedUserLocation=new google.maps.LatLng(position.coords.latitude,position.coords.longitude),$scope.userLocationMarker.setPosition(cachedUserLocation)})},refreshMarkers=function(){_.each($scope.myMarkers,function(marker){marker.setMap(null)}),_.each($scope.locations,function(location){var latlng=new google.maps.LatLng(location.latitude,location.longitude),marker=new google.maps.Marker({position:latlng,map:$scope.myMap,icon:location.icon,title:location.title});marker.location=location,$scope.myMarkers.push(marker)})},reCenterMap=function(){var bounds=new google.maps.LatLngBounds,zoomNumber=.05;_.each($scope.locations,function(location){bounds.extend(new google.maps.LatLng(location.latitude,location.longitude))}),cachedUserLocation?bounds.extend(cachedUserLocation):1===$scope.locations.length&&(bounds.extend(new google.maps.LatLng($scope.locations[0].latitude-zoomNumber,$scope.locations[0].longitude-zoomNumber)),bounds.extend(new google.maps.LatLng($scope.locations[0].latitude+zoomNumber,$scope.locations[0].longitude+zoomNumber))),$scope.myMap.fitBounds(bounds)},$scope.refreshMap=function(){refreshMarkers(),refreshUserLocation(),reCenterMap()},$scope.markerClick=function(marker){$location.path("/location/"+marker.location.id)},$scope.markerMouseOver=function(marker){$scope.currentMarker=marker,$scope.currentMarkerLat=marker.getPosition().lat(),$scope.currentMarkerLng=marker.getPosition().lng(),$scope.myInfoWindow.open($scope.myMap,marker)},$scope.$watch("locations",function(){$scope.locations&&$scope.refreshMap()})}])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service($q,$filter,$cacheFactory,appConfig,$resource,DistanceService){function getCacheOtherwise(key,callback){var deferred=$q.defer(),data=cache.get(key);return data?deferred.resolve(data):callback&&callback.call(global,deferred),deferred.promise}function filterPromiseData(fn,callback){var deferred=$q.defer(),promise=fn();return promise.then(function(data){var filtered=callback.call({},data);deferred.resolve(filtered)},function(data){deferred.reject(data)}),deferred.promise}function setLocationIcon(location){var iconUrl;return location.categoryId=global.parseId(location.categoryId),5===location.categoryId?iconUrl="assets/images/urgentCareMapIcon.png":6===location.categoryId&&(iconUrl="assets/images/emergencyMapIcon.png"),iconUrl}var cache=$cacheFactory("locations"),locationResource=$resource("locations",{},{getLocations:{method:"Get",url:resourceRoute(appConfig.apiEndpoint,"locations"),isArray:!0}}),categoryResource=$resource("categories",{},{getCategories:{method:"Get",url:resourceRoute(appConfig.apiEndpoint,"categories"),isArray:!0}}),global=this;global.parseId=function(id){return angular.isString(id)?parseInt(id,10):id},global.setLocationIcon=setLocationIcon,global.all=function(){var cacheKey="locations:all";return getCacheOtherwise(cacheKey,function(deferred){locationResource.getLocations().$promise.then(function(data){_.each(data,function(singleLocation){singleLocation.icon=setLocationIcon(singleLocation)}),cache.put(cacheKey,data),deferred.resolve(data)},function(data){deferred.reject(data)})})},global.filter=function(callback){return filterPromiseData(global.all,callback)},global.filterCategories=function(callback){return filterPromiseData(global.categories,callback)},global.get=function(id){return global.filter(function(data){return $filter("filter")(data,{id:global.parseId(id)},!0)[0]})},global.categories=function(){var cacheKey="locations:categories";return getCacheOtherwise(cacheKey,function(deferred){categoryResource.getCategories().$promise.then(function(data){cache.put(cacheKey,data),deferred.resolve(data)},function(data){deferred.reject(data)})})},global.getCategory=function(categoryId){return global.filterCategories(function(data){return $filter("filter")(data,{id:global.parseId(categoryId)},!0)[0]})},global.getCategoryLocations=function(categoryId,latitude,longitude){return global.filter(function(data){return categoryId=global.parseId(categoryId),latitude&&_.each(data,function(singleLocation){singleLocation.distance=DistanceService.distanceInMiles(singleLocation.latitude,singleLocation.longitude,latitude,longitude),singleLocation.distanceSortable=Number(singleLocation.distance)}),categoryId?$filter("filter")(data,{categoryId:categoryId},!0):$filter("filter")(data,function(data){return 5===data.categoryId||6===data.categoryId?!0:!1},!0)})}}var module=angular.module("locations");module.service("Locations",["$q","$filter","$cacheFactory","appConfig","$resource","DistanceService",service])}();var myApp=angular.module("services",[]);myApp.factory("GeoLocationService",["$q","$window","$rootScope",function($q,$window,$rootScope){"use strict";return function(){var deferred=$q.defer();return $window.navigator&&$window.navigator.geolocation?$window.navigator.geolocation.getCurrentPosition(function(position){$rootScope.$apply(function(){deferred.resolve(position)})},function(error){$rootScope.$apply(function(){switch(error.code){case 1:deferred.reject();break;case 2:deferred.reject("User location information is unavailable.");break;case 3:deferred.reject("The request to get user location timed out.");break;default:deferred.reject("An unknown error occurred getting geolocation.")}deferred.reject(error)})},{timeout:8e3,enableHighAccuracy:!0}):$rootScope.$apply(function(){deferred.reject({type:"error",message:"Geolocation is not supported"})}),deferred.promise}}]),function(){"use strict";function service(){var allowLocation=null;this.setPermission=function(newPermission){allowLocation=newPermission},this.getPermission=function(){return allowLocation}}var module=angular.module("locations");module.service("LocationPermission",service)}(),function(){"use strict";function service(){var global=this,earthRadiusInMeters=6378137;global.distanceInMiles=function(latA,lonA,latB,lonB){var a=Math.pow(Math.sin((latB-latA)*Math.PI/180/2),2)+Math.cos(latA*Math.PI/180)*Math.cos(latB*Math.PI/180)*Math.pow(Math.sin((lonB-lonA)*Math.PI/180/2),2);return parseFloat(Math.round(earthRadiusInMeters*(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)))/1e3*.6214*10)/10).toFixed(1)}}var module=angular.module("locations");module.service("DistanceService",[service])}(),angular.module("partners",[]),function(){"use strict";function PartnerBrandingService($resource,$q,FeatureStatus){function extractIcon(partners,appointment){if(appointment.location){var partner=getPartnerByAppointmentLocationId(partners,appointment.location.id);if(partner||(partner=getPartnerByAppointmentLocationName(partners,appointment.location.name)),partner){var featureSwitchKey="partnerBranding_Appointments_"+partner.name;if(!FeatureStatus.checkFeatureStatus(featureSwitchKey))return;updateAppointmentWithPartnerIcons(appointment,partner)}}}function getPartnerByAppointmentLocationId(partners,locationId){for(var partner,i=0;i<partners.length;i+=1)if(partner=partners[i],partner.ids.indexOf(locationId)>-1)return partner}function getPartnerByAppointmentLocationName(partners,locationName){return _.find(partners,function(partner){var regularExp=new RegExp(partner.regEx.pattern,partner.regEx.flags);return locationName.match(regularExp)})}function updateAppointmentWithPartnerIcons(appointment,partner){partner&&(appointment.partnerIcon={svgIcon:partner.svgIcon,svgIconGray:partner.svgIconGray})}function getPartnerIcons(appointments){var deferred=$q.defer();return FeatureStatus.checkFeatureStatus("partnerBranding")?getPartners().then(function(partners){if(_.isArray(partners)&&partners.length<1)throw new Error("Partners in Partner Branding Service uninitialized");return _.isArray(appointments)?_.each(appointments,function(appointment){extractIcon(partners,appointment)}):extractIcon(partners,appointments),appointments})["catch"](function(){throw new Error("getPartners() GET call failed in Partner Branding Service")}):(deferred.resolve(appointments),deferred.promise)}function getPartners(){var deferred=$q.defer();if(partners)return deferred.resolve(partners),deferred.promise;var resourceConfig={name:"partners",params:{},config:{getPartnerList:{method:"GET",url:"app/partner-branding/data/partners.json"}}},partnerResource=$resource(resourceConfig.name,resourceConfig.params,resourceConfig.config);return partnerResource.getPartnerList().$promise.then(function(data){return data.partners?(data.partners.forEach(function(partner){partner.logo="assets/images/partners/"+partner.name.toLowerCase()+"/logo.png",partner.svgIcon="assets/images/partners/"+partner.name.toLowerCase()+"/icon.svg",partner.svgIconGray="assets/images/partners/"+partner.name.toLowerCase()+"/icon-gray.svg"}),partners=data.partners):[]})}var partners;return{getPartnerIcons:getPartnerIcons,getPartners:getPartners}}angular.module("partners").factory("PartnerBrandingService",PartnerBrandingService),PartnerBrandingService.$inject=["$resource","$q","FeatureStatus"]}(),angular.module("contactus",["services","filters"]),angular.module("faq",["services"]),angular.module("privacy",[]),angular.module("sitemap",["layout"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/about/noticeofprivacypractices",{title:"Notice of Privacy Practices",templateUrl:"app/aboutus/views/notice-of-privacy-practices.html"}).when("/about/contactus",{title:"Contact Us",templateUrl:"app/aboutus/views/contactus.html",controller:"ContactusController",roles:["blue","lobby","guest"]}).when("/about/contactPH",{title:"Contact Priority Health",templateUrl:"app/aboutus/views/contact-priority-health.html",controller:"ContactusController",roles:["green"]}).when("/about/privacy",{title:"Privacy Policy",templateUrl:"app/aboutus/views/privacy.html",controller:"PrivacyController"}).when("/about/joint-commission",{title:"Joint Commission Public Notice",templateUrl:"app/aboutus/views/joint-commission.html",roles:["blue","lobby","guest"]}).when("/about/terms",{title:"Terms of Use",templateUrl:"app/aboutus/views/terms.html"}).when("/about/information",{title:"App Information",templateUrl:"app/aboutus/views/information.html"}).when("/about/aboutus",{title:"About Spectrum Health",templateUrl:"app/aboutus/views/aboutus.html",roles:["blue","lobby","guest"]}).when("/about/faq",{title:"Frequently Asked Questions",templateUrl:"app/aboutus/views/faqs.html",controller:"FaqController",resolve:{faqs:function(Faq){return Faq.getFaqs()}}}).when("/about/sitemap",{title:"Sitemap",templateUrl:"app/aboutus/views/sitemap.html",controller:"SitemapController"}).when("/about/partners",{title:"Our Partners",templateUrl:"app/aboutus/views/partners.html",controller:"PartnerPageController",feature:"partnerBranding"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function SitemapController($scope,$http,MenuService,$location){MenuService.getFullMenuWithStatusAndRoles($location.path(),$scope.currentUser.menuRoles,$scope.currentUser.authorizations).then(function(data){$scope.menu=data.items})}var module=angular.module("sitemap");module.controller("SitemapController",["$scope","$http","MenuService","$location",SitemapController])}(),function(){"use strict";function service($resource){var resource=$resource("app/aboutus/data/contactus.json");this.getInformation=function(){return resource.query()},this.phoneNumber="877.308.5083"}var module=angular.module("contactus");module.service("ContactUs",["$resource",service])}(),function(){"use strict";function ContactusController(ContactUs,$scope,Notifications,UserAgent,Contracts,OldMemberCenterService,$timeout){function enableLink(){$scope.linkDisabled=!1}function goBackToOldMemberCenter(destination){$scope.linkDisabled=!0,$timeout(enableLink,2e4),OldMemberCenterService.goBackToOldMemberCenter(destination)}$scope.phoneNumber=ContactUs.phoneNumber,$scope.isMobileApp=UserAgent.isMobileApp,$scope.defaultPlanPhoneNumber="8883896646",$scope.dualContract=!0,$scope.backToOMC=goBackToOldMemberCenter,$scope.enableLink=enableLink,$scope.linkDisabled=!1,$scope.getContactInfo=function(){$scope.isLoading=!0,ContactUs.getInformation().$promise.then(function(data){$scope.isLoading=!1,$scope.items=data},function(){$scope.isLoading=!1,Notifications.error("Error: Failed to load contact information.")})},$scope.initCoBrowse=function(){$("html, body").animate({scrollTop:0},"slow"),eGain.cobrowse.startCobrowse()},$scope.loggedIn&&Contracts.allCards().$promise.then(function(response){var cards=response;if(1===cards.length)return $scope.phoneNum=cards[0].contactPhoneNumber,$scope.dualContract=!1,void($scope.loaded=!0);for(var i=1;i<cards.length;i+=1){if(cards[i].contract.contractID!==cards[i-1].contract.contractID)return $scope.dualContract=!0,void($scope.loaded=!0);$scope.phoneNum=cards[i].contactPhoneNumber,$scope.dualContract=!1,$scope.loaded=!0}},function(){$scope.dualContract=!0,$scope.loaded=!0})}var module=angular.module("contactus");module.controller("ContactusController",["ContactUs","$scope","Notifications","UserAgent","Contracts","OldMemberCenterService","$timeout",ContactusController])}(),function(){"use strict";function VersionCtrl($scope,appConfig){$scope.version=appConfig.version}var module=angular.module("appVersion",[]);module.controller("VersionCtrl",["$scope","appConfig",VersionCtrl])}(),function(){"use strict";function PrivacyController($scope,$location){$scope.privacyPdfUrl="https://www.priorityhealth.com/privacy",$scope.showPrivacyPractices=function(){window.scrollTo(0,0),$location.path("/about/noticeofprivacypractices")}}var module=angular.module("privacy");module.controller("PrivacyController",["$scope","$location",PrivacyController])}(),function(){"use strict";function PartnerPageController($scope,PartnerBrandingService,Notifications,FeatureStatusService){$scope.partners=[],$scope.getPartners=function(){PartnerBrandingService.getPartners().then(function(partners){$scope.partners=partners.filter(function(partner){var partnerFeatureKey="partnerBranding_PartnerPage_"+partner.name;return FeatureStatusService.checkFeatureStatus(partnerFeatureKey)})})["catch"](function(){Notifications.clear().error("<b>Error</b> &mdash; Failed to load partner information.")})}}angular.module("partners").controller("PartnerPageController",PartnerPageController),PartnerPageController.$inject=["$scope","PartnerBrandingService","Notifications","FeatureStatus"]}(),function(){"use strict";function FaqController($scope,$location,$anchorScroll,$timeout,Users,faqs){$scope.init=function(){$scope.faqs=faqs;var currentUser=Users.currentUser.get();currentUser.isAdolescent()&&!$location.hash()&&$location.hash("adolescentaccess"),$timeout(function(){$anchorScroll()})},$scope.init()}var module=angular.module("faq");module.controller("FaqController",["$scope","$location","$anchorScroll","$timeout","Users","faqs",FaqController])}(),function(){"use strict";function service(Users,FeatureStatus,$sce,$resource){function getFaqs(){return resource.query().$promise.then(filterDisabledItems).then(filterByRoles).then(trustAsHtml)}function isGreen(items){return _.includes(items,"green")}function filterByRoles(data){var currentUser=Users.currentUser.get(),list=[];return currentUser&&currentUser.isMember&&!currentUser.isPatient?(angular.forEach(data,function(category){isGreen(category.roles)&&(category.items=_.filter(category.items,function(item){return isGreen(item.roles)}),list.push(category))}),list):data}function filterDisabledItems(data){var list=[];return angular.forEach(data,function(item){!item||item.showWhenAvailable||item.hideWhenAvailable?item&&item.showWhenAvailable&&FeatureStatus.checkFeatureStatus(item.showWhenAvailable)?list.push(item):item&&item.hideWhenAvailable&&!FeatureStatus.checkFeatureStatus(item.hideWhenAvailable)&&list.push(item):list.push(item)}),list}function trustAsHtml(data){return angular.forEach(data,function(faqCategory){angular.forEach(faqCategory.items,function(item){item.question=$sce.trustAsHtml(item.question),item.answer=$sce.trustAsHtml(item.answer)})}),data}var resource=$resource("app/aboutus/data/faq.json");this.getFaqs=getFaqs}var module=angular.module("faq");module.service("Faq",["Users","FeatureStatus","$sce","$resource",service])}(),angular.module("tests",["services"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/tests",{title:"Test Results & Procedures",templateUrl:"app/tests/views/test-landing-page.html",controller:"TestLandingPageController",roles:["blue"]}).when("/medical/tests/labs",{title:"Lab Results",templateUrl:"app/tests/views/lab-summaries.html",controller:"TestSummariesController",roles:["blue"]}).when("/medical/test/results",{title:"Test Results",templateUrl:"app/tests/views/test-summaries.html",controller:"TestSummariesController",reloadOnSearch:!1,roles:["blue"]}).when("/medical/tests/labs/:resultSystem/:orderId/:date",{title:"Lab Results",templateUrl:"app/tests/views/labs-detail.html",controller:"LabsDetailController",roles:["blue"]}).when("/medical/tests/radiology/:sourceSystem/:orderId/:fromDate/:toDate",{title:"Radiology Results",templateUrl:"app/tests/views/radiology-detail.html",controller:"RadiologyDetailController",roles:["blue"]}).when("/medical/tests/orders-to-complete",{title:"Orders To Complete",templateUrl:"app/tests/views/open-orders.html",roles:["blue"],feature:["openOrders"],keywords:["Orders","Orders to Complete","Upcoming Tests and Procedures","Upcoming Orders"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function TestSummariesController($scope,Labs,Radiology,Notifications,FeatureStatus,Moment,$timeout,$location,$sessionStorage){function getResults(){var messageUpdate=$timeout(function(){$scope.loadingMessage="Accessing larger quantities may take longer to load"},5e3),range=getDatesFromFilter();("radiology"===$scope.activeTab||"all"===$scope.activeTab)&&getRadiologySummaries(messageUpdate,range.fromDate,range.toDate),("labs"===$scope.activeTab||"all"===$scope.activeTab)&&getLabSummaries(messageUpdate,range.fromDate,range.toDate)}function setActiveTab(tab){$location.search("type",tab),$scope.activeTab=tab,getResults()}function getLabSummaries(messageUpdate,fromDate,toDate){if(!$scope.labsComplete){var promise=Labs.getSummaries(fromDate.format("YYYY-MM-DD"),toDate.format("YYYY-MM-DD")).$promise;promise.then(function(data){data.forEach(function(labItem){labItem.url=getItemUrl(labItem)}),$scope.labResults=$scope.labResults.concat(data),$scope.testResults=$scope.testResults.concat(data)}),promise["catch"](function(){Notifications.error("Error: Failed to load Lab information.")}),promise["finally"](function(){$scope.labsComplete=!0,($scope.radiologyComplete||!$scope.radiologyAvailable)&&($timeout.cancel(messageUpdate),$scope.loadingMessage="Loading Results")})}}function getRadiologySummaries(messageUpdate,fromDate,toDate){if($scope.radiologyAvailable&&!$scope.radiologyComplete){var promise=Radiology.getSummaries(fromDate.format("YYYY-MM-DD"),toDate.format("YYYY-MM-DD")).$promise;promise.then(function(data){data.forEach(function(radItem){radItem.url=getItemUrl(radItem)}),$scope.radiologyResults=$scope.radiologyResults.concat(data),$scope.testResults=$scope.testResults.concat(data)}),promise["catch"](function(){Notifications.error("Error: Failed to load Radiology Results")}),promise["finally"](function(){$scope.radiologyComplete=!0,$scope.labsComplete&&($timeout.cancel(messageUpdate),$scope.loadingMessage="Loading Results")})}}function getItemUrl(result){if("Lab"===result.eventType)return["#/medical/tests/labs",result.system,result.id,getLabDateForUrl(result)].join("/");var range=getDatesFromFilter();return["#/medical/tests/radiology",result.system,result.id,range.fromDate.format("YYYY-MM-DD"),range.toDate.format("YYYY-MM-DD")].join("/")}function getLabDateForUrl(result){return"EPIC"===result.system.toUpperCase()?result.resultDate:result.collectedDate}function filterResultsByDate(){$scope.numToShow=10,$scope.testResults=[],$scope.labResults=[],$scope.radiologyResults=[],$scope.loadingMessage="Loading Results",$scope.labsComplete=!1,$scope.radiologyComplete=!1,$sessionStorage.set("dateFilter",JSON.stringify($scope.dateFilter)),getResults()}function showWarning(){if($scope.dateFilter&&$scope.dateFilter.month&&$scope.dateFilter.range&&$scope.dateFilter.year){var limit=new Moment(now);limit.subtract(3,"y");var selected=new Moment(now);return selected.year($scope.dateFilter.year),selected.month($scope.dateFilter.month),selected.subtract($scope.dateFilter.range+1,"M"),selected.isBefore(limit)}return!1}function dateYearsAgo(years){var today=new Date(now);return today.setFullYear(today.getFullYear()-years),today}function getDatesFromFilter(){var baseStartDate=new Moment($scope.dateFilter.month+"-1-"+$scope.dateFilter.year,"MM-DD-YYYY"),toDate=baseStartDate.endOf("month"),fromDate=new Moment(toDate).subtract($scope.dateFilter.range-1,"month").date(1);return{fromDate:fromDate,toDate:toDate}}function resultsTypeTitle(){switch($scope.activeTab){case"labs":return"lab";case"all":return"test";default:return $scope.activeTab}}function getDefaultDateFilter(){var dateFilter=null;return dateFilter=$sessionStorage.get("dateFilter")?JSON.parse($sessionStorage.get("dateFilter")):{range:3,month:now.getMonth()+1,year:now.getFullYear()}}var now=new Date(Date.now());$scope.dateFilter=getDefaultDateFilter(),$scope.testResults=[],$scope.labResults=[],$scope.radiologyResults=[],$scope.activeTab=$location.search().type||"all",$scope.numToShow=10,$scope.labsComplete=!1,$scope.radiologyComplete=!1,$scope.loadingMessage="Loading Results",$scope.radiologyAvailable=FeatureStatus.checkFeatureStatus("radiology"),$scope.getResults=getResults,$scope.filterResultsByDate=filterResultsByDate,$scope.showWarning=showWarning,$scope.dateYearsAgo=dateYearsAgo,$scope.setActiveTab=setActiveTab,$scope.resultsTypeTitle=resultsTypeTitle,$scope.showMore=function(){$scope.numToShow+=10},$scope.isActiveTab=function(tab){return tab===$scope.activeTab}}angular.module("tests").controller("TestSummariesController",TestSummariesController),TestSummariesController.$inject=["$scope","Labs","Radiology","Notifications","FeatureStatus","Moment","$timeout","$location","$sessionStorage"]}(),function(){"use strict";function controller(Labs,Physicians,$scope,$sce,$routeParams,usSpinnerService,Notifications,$window,$filter){$scope.view="visual",$scope.getLab=function(){$scope.isLoading=!0,Labs.getDetail($routeParams.orderId,$routeParams.resultSystem,$routeParams.date).then(function(data){$scope.lab=data,$scope.visualViewEnabled=!0;var date=$filter("date")($scope.lab.date,"MMM d, yyyy"),resultName=btoa("This message is regarding "+$scope.lab.name+" that was resulted on "+date);$scope.messageURL="?body="+resultName,$scope.lab.physicianComments&&$sce.trustAsHtml($scope.lab.physicianComments=$scope.lab.physicianComments.replace(/\n/g,"<br><br>")),$scope.lab.orderingPhysicianId&&Physicians.getPhysician({id:$scope.lab.physicianId}).$promise.then(function(data){$scope.physicianPhoto=data.photo}),$scope.isLoading=!1},function(){$scope.isLoading=!1,Notifications.error("Error: Failed to load Lab information.")})},$scope.buildVisualView=function(value){var referenceHigh=parseFloat(value.normalHigh),referenceLow=parseFloat(value.normalLow),result=parseFloat(value.result);(isNaN(referenceHigh)||isNaN(referenceLow)||isNaN(result))&&($scope.view="data",$scope.visualViewEnabled=!1);var visualView={};return visualView.referenceLowPct="30%",visualView.referenceHighPct="70%",referenceLow>result?visualView.resultClass="result-low":result>=referenceLow&&referenceHigh>=result?visualView.resultClass="result-normal":visualView.resultClass="result-high",visualView},$scope.print=function(){$window.print()}}var module=angular.module("tests");module.controller("LabsDetailController",["Labs","Physicians","$scope","$sce","$routeParams","usSpinnerService","Notifications","$window","$filter",controller])}(),function(){"use strict";function controller(Radiology,$scope,$routeParams,usSpinnerService,Notifications,$window,$sce,easternTimeFilter){$scope.getResult=function(){$scope.isLoading=!0,Radiology.getDetail($routeParams.sourceSystem,$routeParams.orderId,$routeParams.fromDate,$routeParams.toDate).then(function(data){$scope.isLoading=!1,$scope.result=data,$scope.result.body=$sce.trustAsHtml(data.body),$scope.result.signatureLine=$sce.trustAsHtml(data.signatureLine),$scope.result.providerComments.forEach(function(comment){comment.text=$sce.trustAsHtml(comment.text)}),$scope.result.addenda.forEach(function(addendum){addendum.text=$sce.trustAsHtml(addendum.text)});var resultDateString=easternTimeFilter($scope.result.resultDate,"MM/DD/YY");$scope.messageBodyQueryParam="?body="+btoa("This message is regarding "+$scope.result.testName+" that was resulted on "+resultDateString+".")},function(){$scope.isLoading=!1,Notifications.error("Error: Unable to load radiology result")})},$scope.print=function(){$window.print()}}var module=angular.module("tests");module.controller("RadiologyDetailController",["Radiology","$scope","$routeParams","usSpinnerService","Notifications","$window","$sce","easternTimeFilter",controller])}(),function(){"use strict";function controller($scope,$location,MenuService){MenuService.getMenuBasedOnLocationAndRole($location.path(),$scope.currentUser.menuRoles,$scope.currentUser.authorizations).then(function(data){$scope.menu=data})}var module=angular.module("tests");module.controller("TestLandingPageController",["$scope","$location","MenuService",controller])}(),function(){"use strict";function LabsService($resource,appConfig){function markAsRead(labId,labSystem){resources.detail.markRead({id:labId,system:labSystem},null)}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),routes={summary:[apiEndpoint,"labs"].join("/"),detail:[apiEndpoint,"labs/:system/:id"].join("/")},resources={summary:$resource(routes.summary),detail:$resource(routes.detail,null,{markRead:{method:"PUT"}})};this.getSummaries=function(startDate,endDate){return resources.summary.query({startDate:startDate,endDate:endDate})},this.getDetail=function(labId,labSystem,labDate){var result=resources.detail.get({id:labId,system:labSystem,labDate:labDate});return result.$promise.then(function(){markAsRead(labId,labSystem)}),result.markedRead=!0,result.$promise}}angular.module("tests").service("Labs",LabsService),LabsService.$inject=["$resource","appConfig"]}(),function(){"use strict";function service($resource,appConfig){
function markAsRead(data){resources.detail.markRead({epicOrderId:data.epicOrderId},null)}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),routes={summary:[apiEndpoint,"radiology"].join("/"),detail:[apiEndpoint,"radiology",":sourceSystem:epicOrderId",":orderId"].join("/")},resources={summary:$resource(routes.summary),detail:$resource(routes.detail,null,{markRead:{method:"PUT"}})};this.getSummaries=function(startDate,endDate){return resources.summary.query({startDate:startDate,endDate:endDate})},this.getDetail=function(sourceSystem,orderId,fromDate,toDate){var result=resources.detail.get({sourceSystem:sourceSystem,orderId:orderId,startDate:fromDate,endDate:toDate});return result.$promise.then(markAsRead),result.$promise}}var module=angular.module("tests");module.service("Radiology",["$resource","appConfig",service])}(),function(){"use strict";function _directive(){return{templateUrl:"app/tests/views/filter-box.html",restrict:"E",scope:!0,link:function(scope){function getYears(numYears){for(var currentYear=(new Date).getFullYear(),years=[currentYear],i=1;numYears>=i;i+=1)years.push(currentYear-i);return years}scope.months=[{val:1,text:"January"},{val:2,text:"February"},{val:3,text:"March"},{val:4,text:"April"},{val:5,text:"May"},{val:6,text:"June"},{val:7,text:"July"},{val:8,text:"August"},{val:9,text:"September"},{val:10,text:"October"},{val:11,text:"November"},{val:12,text:"December"}],scope.years=getYears(3),scope.monthRanges=[{val:1,text:"1 Month"},{val:3,text:"3 Months"},{val:6,text:"6 Months"}]}}}var module=angular.module("tests");module.directive("dateFilter",_directive)}(),angular.module("appointments",["directives","services","filters","combinedTimelineEvents","MedNow"]),function(){"use strict";function service($resource,appConfig,Moment,PartnerBrandingService){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),routes={summary:[apiEndpoint,"appointments"].join("/"),detail:[apiEndpoint,"appointments/:id"].join("/")},resources={summary:$resource(routes.summary,null,{getAppointmentsByEPersonIds:{method:"POST",isArray:!0}}),detail:$resource(routes.detail)};this.getSummaries=function(){var promise=resources.summary.query().$promise;return promise.then(PartnerBrandingService.getPartnerIcons)},this.getAppointmentsByEPersonIds=function(appointmentsInfo){var promise=resources.summary.getAppointmentsByEPersonIds(appointmentsInfo).$promise;return promise.then(PartnerBrandingService.getPartnerIcons)},this.getDetail=function(eventId){var promise=resources.detail.get({id:eventId}).$promise;return promise.then(function(appointment){var typesToShowArrivalTimeFor=["Same Day","Physical","Well-Child Exam"];return typesToShowArrivalTimeFor.indexOf(appointment.description)>-1&&(appointment.arrivalTime=new Moment(appointment.start).add(-15,"minutes")),appointment}).then(PartnerBrandingService.getPartnerIcons),promise}}angular.module("appointments").service("Appointments",service),service.$inject=["$resource","appConfig","Moment","PartnerBrandingService"]}(),function(){"use strict";function AppointmentSummaryController(Appointments,$scope,Notifications,FeatureStatus,CombinedTimelineEvents){$scope.numToShow=5,$scope.appointmentListFeatureEnabled=FeatureStatus.checkFeatureStatus("dtAppointmentList"),$scope.confirmFeatureEnabled=FeatureStatus.checkFeatureStatus("dtConfirmAppointment")&&$scope.appointmentListFeatureEnabled,$scope.questionnairesFeatureEnabled=FeatureStatus.checkFeatureStatus("dtQuestionnaires")&&$scope.appointmentListFeatureEnabled,$scope.cancelFeatureEnabled=FeatureStatus.checkFeatureStatus("schedulingCancel"),$scope.showSharedAccessLink=function(){return CombinedTimelineEvents.isAvailable},$scope.showMoreEvents=function(){$scope.numToShow+=5},$scope.getAppointments=function(){$scope.isLoading=!0,Appointments.getSummaries().then(function(data){$scope.appointments=data,$scope.isLoading=!1},function(){Notifications.error("Error: Failed to load Appointment information."),$scope.isLoading=!1})}}angular.module("appointments").controller("AppointmentSummaryController",AppointmentSummaryController),AppointmentSummaryController.$inject=["Appointments","$scope","Notifications","FeatureStatus","CombinedTimelineEvents"]}(),function(){"use strict";function controller(Appointments,MedNowAppLinksService,$scope,$routeParams,Notifications,FeatureStatus,$location,Scheduling,UserAgent){$scope.appointmentListFeatureEnabled=FeatureStatus.checkFeatureStatus("dtAppointmentList"),$scope.confirmFeatureEnabled=FeatureStatus.checkFeatureStatus("dtConfirmAppointment")&&$scope.appointmentListFeatureEnabled,$scope.questionnairesFeatureEnabled=FeatureStatus.checkFeatureStatus("dtQuestionnaires")&&$scope.appointmentListFeatureEnabled,$scope.cancelFeatureEnabled=FeatureStatus.checkFeatureStatus("schedulingCancel"),$scope.eCheckInEnabled=FeatureStatus.checkFeatureStatus("eCheckIn"),$scope.medNowVidyoEnabled=FeatureStatus.checkFeatureStatus("medNow_Vidyo"),$scope.showMap=!0,$scope.showSmallMap=!1,$scope.hideText="Hide Map",$scope.showText="Show Map",$scope.isMobileApp=UserAgent.isMobileApp,$scope.itunesUrl=MedNowAppLinksService.itunesUrl,$scope.googlePlayUrl=MedNowAppLinksService.googlePlayUrl,$scope.getAppointment=function(){$scope.isLoading=!0,Appointments.getDetail($routeParams.eventId).then(function(data){$scope.appointment=data,$scope.allowCancel=Scheduling.cancelAllowed($scope.appointment),$scope.appointment.department&&$scope.appointment.department.address&&$scope.buildMap(),$scope.isLoading=!1},function(){Notifications.error("Error: Failed to load Appointment information."),$scope.isLoading=!1})},$scope.buildMap=function(){var geocoder=new google.maps.Geocoder;if($scope.appointment&&$scope.appointment.department&&$scope.appointment.department.address){var address=$scope.appointment.department.address.address1+" "+$scope.appointment.department.address.city+", "+$scope.appointment.department.address.state+", "+$scope.appointment.department.address.zip;$scope.address=address.replace(/ /g,"+"),geocoder.geocode({address:address},function(results,status){if(status===google.maps.GeocoderStatus.OK){var latLng=results[0].geometry.location,mapOptions={center:latLng,zoom:15,mapTypeId:google.maps.MapTypeId.ROADMAP},map=new google.maps.Map(document.getElementById("map"),mapOptions);$scope.marker=new google.maps.Marker({position:latLng,map:map}),google.maps.event.addDomListener(window,"resize",function(){google.maps.event.trigger(map,"resize"),map.setCenter(latLng)}),google.maps.event.trigger(map,"resize"),map.setCenter(latLng),$scope.$apply()}})}},$scope.cancelAppointment=function(){$scope.allowCancel&&(Scheduling.cancelAllowed($scope.appointment)?$location.path("/medical/appointments/cancel/"+$scope.appointment.id):Notifications.error("Error: This appointment must be canceled at least 1 hour in advance. To cancel less than 1 hour in advance, contact the provider’s office."))},$scope.toggleMap=function(currentValue){$scope.showMap=!currentValue,$scope.showSmallMap=!currentValue,$scope.showMap&&$scope.buildMap()}}angular.module("appointments").controller("AppointmentDetailController",controller),controller.$inject=["Appointments","MedNowAppLinksService","$scope","$routeParams","Notifications","FeatureStatus","$location","Scheduling","UserAgent"]}(),function(){"use strict";function controller($routeParams,Notifications,Scheduling,$location,Moment,FeatureStatus){var vm=this;vm.datatileCompletedDetectorConfig=[{targetSelector:".completeworkflow",eventToRaise:"appointment-cancelled"}],vm.dtCancellationEnabled=FeatureStatus.checkFeatureStatus("dtCancellation"),vm.init=function(){var appointmentId=$routeParams.eventId;vm.cancelRequest={},vm.isLoading=!0,Scheduling.getCancelReasons(appointmentId).then(function(data){vm.cancelReasons=data.cancelReasons,vm.appointment=data.appointment,vm.cancelReasonRequired=data.cancelReasonRequired,vm.allowComments=data.allowComments,vm.cancelRequest.appointmentContactId=vm.appointment.cancelId},function(){Notifications.error("Error: Failed to load cancellation reasons.")})["finally"](function(){vm.isLoading=!1})},vm.cancel=function(){Scheduling.cancelAllowed(vm.appointment)?(vm.isLoading=!0,Scheduling.cancelAppointment(vm.cancelRequest).then(function(){$location.path("/medical/appointments/cancel/success")},function(error){"MinimumLeadTimeExceeded"===error.data.message?Notifications.error("Error: This appointment must be canceled at least 1 hour in advance. To cancel less than 1 hour in advance, contact the provider’s office."):Notifications.error("Error: Failed to cancel appointment.")})["finally"](function(){vm.isLoading=!1})):Notifications.error("Error: This appointment must be canceled at least 1 hour in advance. To cancel less than 1 hour in advance, contact the provider’s office.")},vm.showCancelWarning=function(){if(!vm.appointment||!vm.appointment.start)return!1;var apptDate=new Moment(vm.appointment.start),nowDate=new Moment;return apptDate.diff(nowDate,"hours")<=24}}var module=angular.module("appointments");module.controller("AppointmentCancelController",["$routeParams","Notifications","Scheduling","$location","Moment","FeatureStatus",controller])}(),function(){"use strict";function controller($http,$routeParams,appConfig){var apptDataTileVM=this;apptDataTileVM.datatileCompletedDetectorConfig=[{targetSelector:".completeworkflow",eventToRaise:"appointment-workflow-completed"},{targetSelector:".inlinesave",eventToRaise:"appointment-confirmed"}],$routeParams.mode?$http.get("app/appointments/data/appt-data-tile-descriptions.json").success(function(result){apptDataTileVM.pageDescription=result[$routeParams.mode]}):apptDataTileVM.pageDescription="Select an appointment to view appointment actions.",$http.post(appConfig.apiEndpoint+"/clearcache",{clearVisitsCache:!1,clearAppointmentsCache:!0,clearTimelineCache:!0})}angular.module("appointments").controller("AppointmentDataTileCtrl",controller),controller.$inject=["$http","$routeParams","appConfig"]}(),function(){"use strict";var module=angular.module("appointments"),directive=function(){return{restrict:"A",link:function(scope,elem){function fixSlotTargetArea(){iframe.$(".content [id^=canceltable] tbody tr:not(:last)",iframe.document).css("cursor","pointer"),iframe.$(".content [id^=canceltable] tbody tr:not(:last)",iframe.document).on("click",function(a){iframe.$(a.currentTarget,iframe.document).children(".radio").children("input").prop("checked",!0),iframe.enableIfChecked("form0","nextstep")})}var iframe=elem[0].contentWindow;scope.$on("dtLocationChanged",function(){iframe.$(".content [id^=canceltable]",iframe.document).length>0&&fixSlotTargetArea()})}}};module.directive("datatileCancellation",[directive])}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/appointments",{title:"Upcoming Appointments",templateUrl:"app/appointments/views/appointments-summary.html",controller:"AppointmentSummaryController",roles:["blue"],keywords:["appointments"]}),$routeProvider.when("/medical/appointments-admissions",{title:"Appointments & Admissions",roles:["blue"],resolve:{redirectToAppointmentsOrAdmissions:function(Users,FeatureStatus,$location){Users.currentUser.get().isAdmitted&&FeatureStatus.checkFeatureStatus("inpatientExperience")?$location.path("/medical/admissions"):$location.path("/medical/appointments")}}}),$routeProvider.when("/medical/appointments/datatile",{title:"Appointments",templateUrl:"app/appointments/views/appointments-data-tile.html",roles:["blue"],controller:"AppointmentDataTileCtrl",controllerAs:"appDataTileVM",feature:["dtAppointmentList"]}),$routeProvider.when("/medical/appointments/questionnaires",{templateUrl:"app/appointments/views/appointments-confirm.html",roles:["blue"],feature:"dtConfirmAppointment"}),$routeProvider.when("/medical/appointments/waitlist",{title:"Appointments Waitlist",templateUrl:"app/appointments/views/appointments-waitlist.html",roles:["blue"],controller:"AppointmentDataTileCtrl",controllerAs:"appDataTileVM",feature:"dtWaitList"}),$routeProvider.when("/medical/appointments/:eventId",{title:"Appointment Detail",templateUrl:"app/appointments/views/appointment-detail.html",controller:"AppointmentDetailController",roles:["blue"]}),$routeProvider.when("/medical/appointments/cancel/:eventId",{title:"Appointment Cancel",templateUrl:"app/appointments/views/appointment-cancel.html",controller:"AppointmentCancelController",controllerAs:"cancel",roles:["blue"],feature:"schedulingCancel",keywords:["Cancel Appointment"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function appointmentsInit($rootScope,$log,RslCacheClearKeys,RslCacheClearer){$rootScope.$on("appointment-workflow-completed",function(){RslCacheClearer.clear([RslCacheClearKeys.TimelineCache,RslCacheClearKeys.AppointmentsCache]).then(function(){$log.debug(RslCacheClearKeys.TimelineCache+" was called"),$log.debug(RslCacheClearKeys.AppointmentsCache+" was called")})}),$rootScope.$on("appointment-confirmed",function(){RslCacheClearer.clear([RslCacheClearKeys.TimelineCache,RslCacheClearKeys.AppointmentsCache]).then(function(){$log.debug(RslCacheClearKeys.TimelineCache+" was called"),$log.debug(RslCacheClearKeys.AppointmentsCache+" was called")})}),$rootScope.$on("appointment-cancelled",function(){RslCacheClearer.clear([RslCacheClearKeys.TimelineCache,RslCacheClearKeys.AppointmentsCache]).then(function(){$log.debug(RslCacheClearKeys.TimelineCache+" was called"),$log.debug(RslCacheClearKeys.AppointmentsCache+" was called")})})}angular.module("appointments").run(appointmentsInit),appointmentsInit.$inject=["$rootScope","$log","RslCacheClearKeys","RslCacheClearer"]}(),angular.module("procedures",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/procedures/request",{title:"Procedure Request",templateUrl:"app/procedures/views/procedure-request.html",controller:"ProcedureRequestCtrl",roles:["blue"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function service($resource,$url){var route=$url.apiRoute("procedures"),params={},resource=$resource(route,params,{questions:{url:$url.apiRoute("procedures/getQuestions")},locations:{isArray:!0,url:$url.apiRoute("procedures/getLocations")}});this.getProcedures=function(){return resource.query()},this.requestProcedure=function(request){return resource.save(request)},this.getQuestions=function(procedureId){return resource.questions({procedureId:procedureId})},this.getLocations=function(procedureName){return resource.locations({procedureName:procedureName})},this.getDays=function(){return[{value:1,text:"Monday"},{value:2,text:"Tuesday"},{value:3,text:"Wednesday"},{value:4,text:"Thursday"},{value:5,text:"Friday"},{value:6,text:"Saturday"},{value:0,text:"Sunday"}]}}var module=angular.module("procedures");module.service("Procedure",["$resource","$url",service])}(),function(){"use strict";function filter(){return function(procedure){return procedure?iconPaths[procedure.id]||iconPaths["default"]:iconPaths["default"]}}var module=angular.module("procedures"),iconPaths={10:"app/procedures/assets/images/mammogram.png",20:"app/procedures/assets/images/bone-density-test.png","default":"assets/images/spectrum/flag.png"};module.filter("procedureIconPath",[filter])}(),function(){"use strict";function controller($scope,Procedure,$busy,Notifications,Moment){$scope.minDate=(new Moment).add(1,"days").format("YYYY-MM-DD"),$scope.availableDays=Procedure.getDays(),$scope.steps=[{title:"Procedure",templateUrl:"app/procedures/views/request-steps/procedure.html"},{title:"Information",templateUrl:"app/procedures/views/request-steps/questions.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"Date & Time",templateUrl:"app/procedures/views/request-steps/date.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"Review",templateUrl:"app/procedures/views/request-steps/review.html",showPrevButton:!0,showCancelButton:!0,showSubmitButton:!0}],$scope.wizard={currentStep:null,currentIndex:0,currentStepNum:1,hideNav:!1,next:function(){$scope.wizard.setStep(Math.min($scope.wizard.currentStepNum+1,$scope.steps.length))},prev:function(){$scope.wizard.setStep(Math.max($scope.wizard.currentStepNum-1,1))},cancel:function(){$scope.reset()},submit:function(){var request=Procedure.requestProcedure($scope.request);return $busy.watch(request.$promise),request.$promise.then(function(resp){return resp.error?Notifications.error("Your procedure request failed.  Please review your information and try again"):$scope.submitted=!0,resp},function(resp){return Notifications.error("Your procedure request failed.  Please review your information and try again"),resp})},setStep:function(step){$scope.wizard.currentStepNum=step,$scope.wizard.currentIndex=step-1,$scope.wizard.currentStep=$scope.steps[$scope.wizard.currentIndex]},isNextAvailable:function(){return $scope.wizardForm.$dirty&&$scope.wizardForm.$valid}},$scope.init=function(){$scope.reset(),$scope.loading=!0,$scope.procedures=Procedure.getProcedures(),$busy.watch($scope.procedures.$promise),$scope.procedures.$promise.then(function(resp){return $scope.loading=!1,resp},function(resp){return $scope.loading=!1,resp})},$scope.reset=function(){$scope.request={callInformation:{},preferredSlots:{daysOfWeek:[]}},$scope.locations=[],$scope.questions=[],$scope.availableDays=Procedure.getDays(),$scope.wizard.setStep(1)},$scope.hasCallTimes=function(info){return info&&(info.morning||info.afternoon||info.evening)},$scope.toggleDay=function(day){var idx=$scope.request.preferredSlots.daysOfWeek.indexOf(day.value);idx>-1?$scope.request.preferredSlots.daysOfWeek.splice(idx,1):$scope.request.preferredSlots.daysOfWeek.push(day.value)},$scope.generateReview=function(){function getDayNames(values){var days=_.map(values.sort(),function(value){var day=_.find($scope.availableDays,function(day){return value===day.value});return day.text});return days.join(", ")}function getLocationName(id){var match=_.find($scope.locations,function(location){return location.id===id});return match?match.locationName:"None Specified"}function getCallTimes(){var selectedTimes=[];return $scope.request.preferredSlots.isMorningOk&&selectedTimes.push("AM"),$scope.request.preferredSlots.isAfternoonOk&&selectedTimes.push("PM"),selectedTimes.length?selectedTimes.join(", "):"No Preference"}$scope.review={procedure:$scope.procedure.name,primaryLocation:getLocationName($scope.request.primaryLocation),secondaryLocation:getLocationName($scope.request.secondaryLocation),startDate:$scope.request.preferredSlots.preferredStartDate,endDate:$scope.request.preferredSlots.preferredEndDate,days:getDayNames($scope.request.preferredSlots.daysOfWeek),times:getCallTimes(),number:$scope.request.callInformation.bestPhoneNumber}},$scope.selectProcedure=function(procedure){procedure?($scope.procedure=procedure,$scope.request.appointmentTypeName=$scope.procedure.name,$scope.locations=Procedure.getLocations($scope.procedure.name),$scope.questions=Procedure.getQuestions($scope.procedure.id),$scope.questions.$promise.then(function(response){return $scope.request.questionSet=response.questionSet,response}),$busy.watch($scope.locations.$promise),$busy.watch($scope.questions.$promise),$scope.wizard.next()):$scope.procedure=null}}var module=angular.module("procedures");module.controller("ProcedureRequestCtrl",["$scope","Procedure","$busy","Notifications","Moment",controller])}(),angular.module("care-team",["services","filters"]),function(){"use strict";function service($resource,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),routes={summary:[apiEndpoint,"careteam"].join("/")},resources={summary:$resource(routes.summary)};this.getCareTeam=function(){var response=resources.summary.query();return response.$promise.then(function(data){_.each(data,function(staff){staff.messageId=1===staff.providerSource?staff.careManagerId:staff.epicId})}),response}}var module=angular.module("care-team");module.service("CareTeam",["$resource","appConfig",service])}(),function(){"use strict";function controller(CareTeam,$scope,Notifications){$scope.showPastTeamContact=!1,$scope.noActiveResults=!1,$scope.noInactiveResults=!1,$scope.getCareTeam=function(){$scope.isLoading=!0,CareTeam.getCareTeam().$promise.then(function(data){if($scope.careTeam=data,$scope.noActiveResults=!0,$scope.noInactiveResults=!0,$scope.careTeam&&$scope.careTeam.length>0)for(var i=$scope.careTeam.length-1;i>-1;i-=1)$scope.careTeam[i].isActive?("PRIMARY CARE PHYSICIAN"===$scope.careTeam[i].title&&($scope.careTeam[i].title="PRIMARY CARE PROVIDER"),$scope.noActiveResults=!1):$scope.noInactiveResults=!1;$scope.isLoading=!1},function(){Notifications.error("Error: Failed to load Care Team information."),$scope.isLoading=!1})}}var module=angular.module("care-team");module.controller("CareTeamController",["CareTeam","$scope","Notifications",controller])}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/careteam",{title:"Care Team",templateUrl:"app/care-team/views/care-team-summary.html",controller:"CareTeamController"}).when("/insurance/careteam",{title:"Care Team",templateUrl:"app/care-team/views/care-team-summary.html",controller:"CareTeamController"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("visits",["services","filters"]),function(){"use strict";function service($resource,appConfig,PartnerBrandingService){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),routes={summary:[apiEndpoint,"encounter"].join("/"),detail:[apiEndpoint,"encounter"].join("/")},resources={summary:$resource(routes.summary),detail:$resource(routes.detail)};this.getSummaries=function(){var promise=resources.summary.query().$promise;return promise.then(PartnerBrandingService.getPartnerIcons)},this.getDetail=function(eventId,system){var promise=resources.detail.get({id:eventId,system:system}).$promise;return promise.then(PartnerBrandingService.getPartnerIcons)}}angular.module("app").service("Visits",service),service.$inject=["$resource","appConfig","PartnerBrandingService"]}(),function(){"use strict";function controller(Visits,$scope,usSpinnerService,Notifications){$scope.numToShow=5,$scope.showMoreEvents=function(){$scope.numToShow+=5},$scope.getVisits=function(){$scope.isLoading=!0,Visits.getSummaries().then(function(data){$scope.visits=data,$scope.isLoading=!1},function(){$scope.loading=!1,Notifications.error("Error: Failed to load past appointments."),$scope.isLoading=!1})}}angular.module("visits").controller("VisitSummaryController",controller),controller.$inject=["Visits","$scope","usSpinnerService","Notifications"]}(),function(){"use strict";function controller(Visits,$scope,$routeParams,usSpinnerService,Notifications,FeatureStatus){$scope.openNotesFeatureEnabled=FeatureStatus.checkFeatureStatus("openNotes"),$scope.getVisit=function(){$scope.isLoading=!0,Visits.getDetail($routeParams.eventId,$routeParams.system).then(function(data){$scope.visit=data,$scope.isLoading=!1},function(){Notifications.error("Error: Failed to load Appointment information."),$scope.isLoading=!1})}}angular.module("visits").controller("VisitDetailController",controller),controller.$inject=["Visits","$scope","$routeParams","usSpinnerService","Notifications","FeatureStatus"]}(),function(){"use strict";function FullReportCtrl(Visits,$scope,$routeParams,usSpinnerService,Notifications,$sce){$scope.getFullReport=function(){usSpinnerService.spin("spinner-main"),Visits.getDetail($routeParams.eventId,$routeParams.system).then(function(data){usSpinnerService.stop("spinner-main"),$scope.visit=data,$scope.visit.clinicalDocumentHtmlContent=$sce.trustAsHtml($scope.visit.clinicalDocumentHtmlContent)},function(){usSpinnerService.stop("spinner-main"),Notifications.error("Error: Failed to load Full Report.")})}}angular.module("visits").controller("FullReportCtrl",FullReportCtrl),FullReportCtrl.$inject=["Visits","$scope","$routeParams","usSpinnerService","Notifications","$sce"]}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/visits",{title:"Past Appointments",templateUrl:"app/visits/views/visits-summary.html",controller:"VisitSummaryController",roles:["blue"],keywords:["appointments","past appointments","Summary"]}).when("/medical/visits/:eventId/:system",{title:"Appointments",templateUrl:"app/visits/views/visit-detail.html",controller:"VisitDetailController",roles:["blue"]}).when("/medical/visit-report/:eventId/:system",{title:"Visit Full Report",templateUrl:"app/visits/views/visit-full-report.html",controller:"FullReportCtrl",roles:["blue"]}).when("/medical/recent-visits/",{title:"Recent Visits",templateUrl:"app/visits/views/recent-visit-reports.html",roles:["blue"],feature:["openNotes"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("billing",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/costs/billing",{title:"Billing",templateUrl:"app/billing/views/billing.html",controller:"BillingCtrl",roles:["blue"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("billing").constant("billingConfig",{apiRoutes:{billing:"/Billing",medData:"/sso/meddata"}}),function(){"use strict";function controller($scope,Billing,Notifications,usSpinnerService,$sce,UserAgent,FeatureStatus){$scope.title="Billing",$scope.isMobileDevice=UserAgent.isMobileDevice,$scope.isBillingFeatureEnabled=FeatureStatus.checkFeatureStatus("billing_PayMyBills"),$scope.isLoading=!1,$scope.isError=!1,$scope.isBillingFeatureEnabled&&(usSpinnerService.spin("spinner-main"),$scope.isLoading=!0,Billing.getMedData().$promise.then(function(data){$scope.iframeSrc=$sce.trustAsResourceUrl(data.urlMedData)},function(){$scope.isError=!0,Notifications.error("Error: Failed to authenticate user")})["finally"](function(){usSpinnerService.stop("spinner-main"),$scope.isLoading=!1}))}var module=angular.module("billing");module.controller("BillingCtrl",["$scope","Billing","Notifications","usSpinnerService","$sce","UserAgent","FeatureStatus",controller])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service(config,appConfig,$resource){var resource=$resource("billing",{},{getBilling:{method:"Get",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.billing)},getMedData:{method:"Get",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.medData),transformResponse:function(data){return{urlMedData:angular.fromJson(data)}}}}),global=this;global.getBilling=function(cpi,username){return resource.getBilling({cpi:cpi,username:username})},global.getMedData=function(){return resource.getMedData()}}var module=angular.module("billing");module.service("Billing",["billingConfig","appConfig","$resource",service])}(),angular.module("healthInfo",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/health-info/immunizations",{title:"Health Info Immunizations",templateUrl:"app/health-info/views/immunizations.html",roles:["blue"],resolve:{healthInfoService:function(HealthInfoService){return HealthInfoService.redirectFirstTab("immunizations","/medical/health-info/biometric-trends")}}}).when("/medical/health-info/health-issues",{title:"Health Info Health Issues",templateUrl:"app/health-info/views/health-issues.html",roles:["blue"],resolve:{healthInfoService:function(HealthInfoService){return HealthInfoService.redirectFirstTab("healthIssues","/medical/health-info/preventive-care")}}}).when("/medical/health-info/preventive-care",{title:"Health Info Preventive Care",templateUrl:"app/health-info/views/preventive-care.html",roles:["blue"],resolve:{healthInfoService:function(HealthInfoService){return HealthInfoService.redirectFirstTab("preventiveCare","/medical/health-info/allergies")}}}).when("/medical/health-info/allergies",{title:"Health Info Allergies",templateUrl:"app/health-info/views/allergies.html",roles:["blue"],resolve:{healthInfoService:function(HealthInfoService){return HealthInfoService.redirectFirstTab("allergies","/medical/health-info/immunizations")}}}).when("/medical/health-info/biometric-trends",{title:"Health Info Biometric Trends",templateUrl:"app/health-info/views/biometric-trends.html",roles:["blue"],feature:"biometricTrends"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function service($q,$location,FeatureStatus){function redirectFirstTab(feature,newPath){var deferred=$q.defer();return FeatureStatus.checkFeatureStatus(feature)?deferred.resolve():$location.path(newPath),deferred.promise}this.redirectFirstTab=redirectFirstTab}var module=angular.module("healthInfo");module.service("HealthInfoService",["$q","$location","FeatureStatus",service])}(),function(){"use strict";var module=angular.module("healthInfo"),directive=function(){return{restrict:"A",link:function(scope,elem){function fixClickArea(){iframe.$(".content [id^=healthmainttopics] tbody tr:not(:last) td:first-child",iframe.document).css("cursor","pointer"),iframe.$(".content [id^=healthmainttopics] tbody tr:not(:last) td:first-child",iframe.document).on("click",function(e){if(!iframe.$(e.target).is("input")){var checkbox=iframe.$(e.currentTarget,iframe.document).children("input");checkbox.prop("checked",!checkbox.prop("checked")),iframe.enableIfChecked("hm_appt_form","REQUESTAPPT")}})}var iframe=elem[0].contentWindow;scope.$on("dtLocationChanged",function(){iframe.$(".content [id^=healthmainttopics]",iframe.document).length>0&&fixClickArea()})}}};module.directive("datatilePreventativeCare",[directive])}(),angular.module("healthTracking",[]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/health-tracking",{title:"Health Tracking",templateUrl:"app/health-tracking/views/health-tracking.html",roles:["isPatientAndSameUserOrMinor"],feature:"healthTracking",keywords:["Flow Sheets","Patient Entered Flowsheets"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("insurance",["services","filters","ngRoute"]),angular.module("medications",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/medications",{title:"Medications",templateUrl:"app/medications/views/medications.html",controller:"MedicationsCtrl",roles:["blue"]}).when("/medical/medications/renew",{title:"Renew Prescription",templateUrl:"app/medications/views/medications-renew.html",controller:"MedicationsCtrl",roles:["blue"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("medications").constant("medicationsConfig",{apiRoutes:{medications:"/prescriptions"}}),function(){"use strict";function controller($scope,$routeParams,Notifications,usSpinnerService,Medications,FeatureStatus){$scope.title="Medications",$scope.addMedication=!1,$scope.medication="",$scope.addingMedication=!1,$scope.date=new Date,$scope.selfReportedLoading=!0,$scope.loading=!0,$scope.dtMedicationsAvailable=FeatureStatus.checkFeatureStatus("dtMedications"),$scope.dtMedicationsAvailable||(Medications.getSelfReportedMedications({selfReported:!0}).$promise.then(function(medications){$scope.selfReportedLoading=!1,$scope.medications=medications,usSpinnerService.stop("spinner-main")},function(){$scope.selfReportedLoading=!1,Notifications.error("Error: Failed to load self-reported medications."),usSpinnerService.stop("spinner-main")}),Medications.getProviderReportedMedications({selfReported:!1}).$promise.then(function(medications){$scope.loading=!1,$scope.providerMedications=medications,usSpinnerService.stop("spinner-main")},function(){$scope.loading=!1,Notifications.error("Error: Failed to load provider-reported medications."),
usSpinnerService.stop("spinner-main")})),$scope.deleteMedication=function(medication,index){usSpinnerService.spin("spinner-main"),Medications.deleteSelfReportedMedication({id:medication.prescriptionID}).$promise.then(function(){$scope.selfReportedLoading=!1,usSpinnerService.stop("spinner-main"),$scope.medications.splice(index,1)},function(){$scope.selfReportedLoading=!1,Notifications.error("Error: Failed to delete self-reported medications."),usSpinnerService.stop("spinner-main")})},$scope.addSelfReportedMedication=function(){usSpinnerService.spin("spinner-main"),Medications.addSelfReportedMedication({name:$scope.medication.name,dosage:$scope.medication.dosage,frequency:$scope.medication.frequency,notes:$scope.medication.notes}).$promise.then(function(medication){$scope.addMedication=!1,$scope.medications.push(medication),usSpinnerService.stop("spinner-main"),$scope.addMedication=!1,$scope.medication=""},function(){usSpinnerService.stop("spinner-main"),Notifications.error("Error: Failed to add self-reported medication")})},$scope.updateSelfReportedMedication=function(medication){usSpinnerService.spin("spinner-main"),Medications.updateSelfReportedMedication({name:medication.name,dosage:medication.dosage,frequency:medication.frequency,notes:medication.notes,prescriptionID:medication.prescriptionID}).$promise.then(function(){usSpinnerService.stop("spinner-main")},function(){usSpinnerService.stop("spinner-main"),Notifications.error("Error: Failed to update self-reported medication")})}}var module=angular.module("medications"),app=angular.module("app");app.requires.push("medications"),module.controller("MedicationsCtrl",["$scope","$routeParams","Notifications","usSpinnerService","Medications","FeatureStatus",controller])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service($q,config,appConfig,$resource){global=this;var resource=$resource("medications",{},{getMedications:{method:"Get",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.medications),isArray:!0},addMedication:{method:"Post",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.medications),isArray:!1},updateMedication:{method:"Put",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.medications),isArray:!1},deleteMedication:{method:"Delete",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.medications),isArray:!1}}),global=this;global.getSelfReportedMedications=function(data){return resource.getMedications(data)},global.addSelfReportedMedication=function(data){return resource.addMedication(data)},global.updateSelfReportedMedication=function(data){return resource.updateMedication(data)},global.deleteSelfReportedMedication=function(data){return resource.deleteMedication(data)},global.getProviderReportedMedications=function(data){return resource.getMedications(data)}}var module=angular.module("medications");module.service("Medications",["$q","medicationsConfig","appConfig","$resource",service])}(),angular.module("messages",["services","filters","ngResource","angulartics","ui.bootstrap","ngFileUpload"],function($uibTooltipProvider){"use strict";$uibTooltipProvider.options({placement:"top",trigger:"mouseenter"})}),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/message-center/compose",{title:"Message Compose",templateUrl:"app/messages/views/compose.html",controller:"ComposeMessageCtrl",feature:"messages"}).when("/message-center/compose/:rId*",{title:"Message Compose",templateUrl:"app/messages/views/compose.html",controller:"ComposeMessageCtrl",feature:"messages"}).when("/message-center",{title:"Messages",templateUrl:"app/messages/views/messages.html",controller:"MessagesCtrl",feature:"messages"}).when("/message-center/:folder",{title:"Messages",templateUrl:"app/messages/views/messages.html",controller:"MessagesCtrl",feature:"messages"}).when("/message-center/single/:folder/:threadId?/:messageId/:messageType/:messageSubjectId?",{title:"Message",templateUrl:"app/messages/views/single-message.html",controller:"SingleMessageCtrl",feature:"messages"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("messages").constant("messagesConfig",{apiRoutes:{messages:"messages",alerts:"alerts"},messageTypes:{EmailADoctor:"PRACTITIONERS",PrescriptionRenewal:"PRESCRIPTION RENEWAL",CareManager:"CARE MANAGER",DiabetesProductCareTeam:"CARE TEAM",HealthCoach:"HEALTH COACH",GenericHealthCoachPool:"HEALTH COACH",CustomerService:"CUSTOMER SERVICE"},medicalValidFileExtensions:[".bmp",".jpeg",".jpg",".pdf",".png",".tif",".tiff"],customerServiceValidFileExtensions:[".bmp",".jpeg",".jpg",".pdf",".png",".tif",".tiff",".doc",".docx",".xls",".xlsx"]}),angular.module("messages").constant("messageSuggestionsConfig",{apiRoutes:{messagesuggestions:"/messagesuggestions"}}),function(){"use strict";function MessagesCtrl($scope,$location,$routeParams,MessagesService,Notifications,FeatureStatus,OldMemberCenterService){function initialize(){"outbox"!==$scope.folder||FeatureStatus.checkFeatureStatus("messagesEnhancement")||$location.path("/message-center"),loadMessages(!0),MessagesService.getAlertsCount()}function loadMessages(isFirstLoad){$scope.isLoading=!0,isFirstLoad!==!0&&($scope.gettingMore=!0,$scope.getMoreText="Getting Messages");var beforeDate=null,beginAtEpicMessageId=null;if($scope.messages.length){var dateKey="inbox"===$scope.folder?"received":"sent";beforeDate=$scope.messages[$scope.messages.length-1][dateKey],beginAtEpicMessageId=findLastMessageEpicId($scope.messages)}var promise=MessagesService.getMessages($scope.folder,beforeDate,beginAtEpicMessageId);promise.then(function(data){$scope.messages=$scope.messages.concat(data.items),$scope.hasMore=data.hasMoreData}),promise["catch"](function(){Notifications.error("Error: Failed to load messages.")}),promise["finally"](function(){$scope.isLoading=!1,$scope.gettingMore=!1,isFirstLoad!==!0?$scope.getMoreText=loadMoreText:$scope.loading=!1})}function findLastMessageEpicId(messages){for(var i=messages.length-1;i>=0;i-=1){var message=messages[i];if("CustomerService"!==message.messageType)return message.id}return null}function evaluateDisableDelete(){var groupedMessages=_.groupBy($scope.messages,groupByDelete);$scope.checkedForDeleteCount=groupedMessages["delete"]?groupedMessages["delete"].length:0,0===$scope.checkedForDeleteCount&&($scope.showDeleteConfirmation=!1)}function setDeleteConfirmation(value){$scope.showDeleteConfirmation=value}function deleteMessages(){$scope.statusLoading=!0,$scope.showDeleteConfirmation=!1;var groupedMessages=_.groupBy($scope.messages,groupByDelete),promise=MessagesService.deleteMessages(groupedMessages["delete"]);promise.then(function(){$scope.checkedForDeleteCount=0,$scope.messages=groupedMessages.keep}),promise["catch"](function(){Notifications.error("Error: Failed to delete messages, please try again later.")}),promise["finally"](function(){$scope.statusLoading=!1})}function groupByDelete(message){return message.markedForDelete?"delete":"keep"}function goBackToOldMemberCenter(){OldMemberCenterService.goBackToOldMemberCenter("SecureMail")}var loadMoreText="Load More Messages";$scope.messages=[],$scope.getMoreText=loadMoreText,$scope.hasMore=!1,$scope.folder=$routeParams.folder||"inbox",$scope.showDeleteConfirmation=!1,$scope.checkedForDeleteCount=0,$scope.evaluateDisableDelete=evaluateDisableDelete,$scope["delete"]=deleteMessages,$scope.setDeleteConfirmation=setDeleteConfirmation,$scope.loadMoreMessages=function(){loadMessages(!1)},$scope.singleMessage=function(message){var pathToRouteTo=["/message-center/single",$scope.folder,message.messageThreadId,message.id,message.messageType,message.messageSubjectId].filter(function(val){return val}).join("/");$location.path(pathToRouteTo)},$scope.isActive=function(tab){return tab===$scope.folder},$scope.getTableSrc=function(){return"app/messages/views/templates/"+$scope.folder+"-table.tpl.html"},$scope.canDelete=function(message){return"EmailADoctor"===message.messageType?message.isRead:!0},initialize(),$scope.backToOMC=goBackToOldMemberCenter}angular.module("messages").controller("MessagesCtrl",MessagesCtrl),MessagesCtrl.$inject=["$scope","$location","$routeParams","MessagesService","Notifications","FeatureStatus","OldMemberCenterService"]}(),function(){"use strict";function BaseMessageCtrl($scope,MessagesService,Notifications,$location,$localStorage,$uibModal,FileUploader,Upload,config,appConfig,$analytics){function fileTypeValidationErrorMessage(commaSeparatedFileTypes){return"is not an accepted type. Please convert your file to one of the following types: "+commaSeparatedFileTypes}function fileSizeTooLargeValidationErrorMessage(maxSizeWithUnit){return"is too large. Please decrease the size to "+maxSizeWithUnit+" or less."}function emptyFileValidationErrorMessage(){return"is empty. Please select a non-empty file."}function defaultValidationErrorMessage(){return"is not valid.  Please try a different file."}function invalidFileToValidationErrorMessage(validationError,param){switch(validationError){case"pattern":return fileTypeValidationErrorMessage(param.replace(/\./g,"").replace(/,/g,", "));case"maxSize":return fileSizeTooLargeValidationErrorMessage(param);case"minSize":return emptyFileValidationErrorMessage();default:return defaultValidationErrorMessage()}}function toFullAttachmentErrorMessage(invalidFiles){return 0===invalidFiles.length?"":invalidFiles.map(function(file){return'The file "'+file.name+'" you are trying to attach '+invalidFileToValidationErrorMessage(file.$error,file.$errorParam)}).join("\n")}function initialize(){fileUploaderArgs={url:[appConfig.apiEndpoint,config.apiRoutes.messages].join("/"),alias:"attachments",removeAfterUpload:!1,queueLimit:10,onWhenAddingFileFailed:function(item,filter){$scope.resetErrors();var validationMessage='The file "'+item.name+'" you are trying to attach ';switch(filter.name){case"imageFilter":validationMessage+=fileTypeValidationErrorMessage(config.medicalValidFileExtensions.join(", "));break;case"customerServiceAttachmentsFilter":validationMessage+=fileTypeValidationErrorMessage(config.customerServiceValidFileExtensions.join(", "));break;case"sizeFilter":validationMessage+=fileSizeTooLargeValidationErrorMessage($scope.fileUploadConfig.validate.size.max);break;case"customerServiceSizeFilter":validationMessage+=fileSizeTooLargeValidationErrorMessage($scope.fileUploadConfig.validate.size.max);break;case"emptyFilter":validationMessage+=emptyFileValidationErrorMessage();break;default:validationMessage+=defaultValidationErrorMessage()}$scope.attachmentErrorMessage=validationMessage,$scope.fileName.push(item.name)},onAfterAddingFile:function(item){$scope.fileName.push(item.file.name)},onBeforeUploadItem:function(item){item.formData.push(angular.copy($scope.newMessage)),!FileUploader.isHTML5&&xsrfToken&&item.formData.push({"XSRF-TOKEN":xsrfToken})},onSuccessItem:onSuccess,onErrorItem:function(item,response){item.isUploaded=!1,item.isError=!1,onError({data:{message:response.message}})},onCompleteAll:function(){$scope.isSending=!1},filters:[{name:"imageFilter",fn:function(item){if(!$scope.medicalHide&&$scope.customerServiceHide){var indexOfLastPeriod=item.name.lastIndexOf(".");if(-1===indexOfLastPeriod)return!1;var extension=indexOfLastPeriod>-1?item.name.substring(indexOfLastPeriod).toLowerCase():"";return _.includes(config.medicalValidFileExtensions,extension)}return!0}},{name:"customerServiceAttachmentsFilter",fn:function(item){if(!$scope.customerServiceHide&&$scope.medicalHide){var indexOfLastPeriod=item.name.lastIndexOf(".");if(-1===indexOfLastPeriod)return!1;var extension=indexOfLastPeriod>-1?item.name.substring(indexOfLastPeriod).toLowerCase():"";return _.includes(config.customerServiceValidFileExtensions,extension)}return!0}},{name:"sizeFilter",fn:function(item){return $scope.medicalHide===!1?!FileUploader.isHTML5||item.size<=5242880:!0}},{name:"customerServiceSizeFilter",fn:function(item){return $scope.customerServiceHide===!1?!FileUploader.isHTML5||item.size<=25242880:!0}},{name:"emptyFilter",fn:function(item){return!FileUploader.isHTML5||item.size>0}}]},xsrfToken&&(fileUploaderArgs.headers={"X-XSRF-TOKEN":xsrfToken}),uploader=$scope.uploader=new FileUploader(fileUploaderArgs)}function clearAttachment(){uploader.clearQueue(),angular.element("#attachment").val(""),$scope.fileName=[],$scope.files=[],$scope.resetErrors()}function clearSingleAttachment(index){$scope.fileName.splice(index,1),$scope.resetErrors()}function removeCustomerServiceAttachment(index){$scope.files=$scope.files.slice(0,index).concat($scope.files.slice(index+1)),$scope.fileUploadConfig.change($scope.files)}function resetErrors(){$scope.attachmentErrorMessage=""}function sendMessage(){if($scope.isSending=!0,0===uploader.queue.length&&0===$scope.files.length){var promise=MessagesService.sendMessage($scope.newMessage).$promise;promise.then(onSuccess),promise["catch"](onError),promise["finally"](function(){$scope.isSending=!1})}else $scope.medicalHide?Upload.upload({url:[appConfig.apiEndpoint,config.apiRoutes.messages].join("/"),data:angular.extend({},$scope.newMessage,{files:$scope.files})}).then(function(){$scope.isSending=!1,onSuccess()},function(response){onError({data:{message:response.message}})},function(){}):uploader.uploadAll()}function onSuccess(){$scope.trackEvent(),$scope.messageSuccess=!0,$scope.clearAttachment(),showMessageSentDialog()}function onError(response){var message="Failed to send message";response.data&&response.data.message&&(message=response.data.message),Notifications.error("Error: "+message+".")}function setMedicalAndCustomerServiceScopeProperties(isCustomerService){$scope.allowedExtensions=(isCustomerService?config.customerServiceValidFileExtensions:config.medicalValidFileExtensions).join(", ").replace(/\./g,""),$scope.fileUploadConfig.maxFiles=isCustomerService?10:1,$scope.fileUploadConfig.validate.size.max=isCustomerService?"25MB":"5MB",$scope.fileUploadConfig.validate.pattern=isCustomerService?config.customerServiceValidFileExtensions.join(","):config.medicalValidFileExtensions.join(",")}function showMessageSentDialog(){$scope.modal=$uibModal.open({templateUrl:"app/messages/views/templates/message-sent-modal.tpl.html",controller:$scope.messageSentController,scope:$scope})}var xsrfToken=$localStorage.get("xsrfHeader"),uploader=null,fileUploaderArgs=null;$scope.fileName=[],$scope.files=[],$scope.attachmentErrorMessage="",$scope.newMessage={type:null,recipientId:null,subjectId:null,subject:"",replyToMessageId:null,body:"",isConfidential:!1},$scope.isSending=!1,$scope.clearAttachment=clearAttachment,$scope.clearSingleAttachment=clearSingleAttachment,$scope.resetErrors=resetErrors,$scope.sendMessage=sendMessage,$scope.fileUploadConfig={validate:{size:{min:1}},change:function(files){var invalidFiles=files.filter(function(file){return file.$error});$scope.attachmentErrorMessage=toFullAttachmentErrorMessage(invalidFiles)},removeCustomerServiceAttachment:removeCustomerServiceAttachment},$scope.invalidFiles=[],$scope.$watch("medicalHide",function(newValue){setMedicalAndCustomerServiceScopeProperties(newValue)},!0),$scope.$watch("customerServiceHide",function(newValue){setMedicalAndCustomerServiceScopeProperties(!newValue)},!0),initialize(),$scope.trackEvent=function(){var trackedMessageTypes=["CareManager","HealthCoach","DiabetesProductCareTeam","GenericHealthCoachPool","EwsUnknown","EmailADoctor","CustomerService"];if(trackedMessageTypes.indexOf($scope.newMessage.type)>=0){var recipient="",method="";switch($scope.newMessage.type){case"CareManager":recipient="Care Manager",method="Health Nav Msg";break;case"HealthCoach":recipient="Health Coach",method="Health Nav Msg";break;case"DiabetesProductCareTeam":recipient="Diabetes Product Care Team",method="Health Nav Msg";break;case"GenericHealthCoachPool":recipient="Generic Health Coach Pool",method="Health Nav Msg";break;case"EwsUnknown":recipient="Unknown",method="Health Nav Msg";break;case"EmailADoctor":recipient="Primary Care Physician",method="EPIC Msg";break;case"CustomerService":recipient="Customer Service",method="Customer Service Msg"}var proxy="";proxy=$scope.isUserProxied()?$scope.currentUser.isAMinor()?"Minor Proxy":"Adult Proxy":"Self";var action="",category="Messaging",value="";$scope.newMessage.replyToMessageId?(action="Reply",value="Reply"):(action="Initiate",value="Send"),action=action+" from "+proxy+" to "+recipient+" via "+method;var label=$scope.newMessage.subject;$analytics.eventTrack(action,{category:category,label:label,value:value})}},$scope.messageSentController=function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close(),$location.path("/message-center")},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}}angular.module("messages").controller("BaseMessageCtrl",BaseMessageCtrl),BaseMessageCtrl.$inject=["$scope","MessagesService","Notifications","$location","$localStorage","$uibModal","FileUploader","Upload","messagesConfig","appConfig","$analytics"]}(),function(){"use strict";function SingleMessageCtrl($scope,$controller,$location,MessagesService,Notifications,FeatureStatus,$routeParams,orderByFilter){function initialize(){"outbox"!==$scope.folder||FeatureStatus.checkFeatureStatus("messagesEnhancement")||$location.path("/message-center"),$scope.isLoading=!0,$scope.showAttachments=!1,$scope.hide=attachmentsNotSupported.indexOf(messageRequest.messageType)>=0,$scope.newMessage.replyToMessageId=messageRequest.id,$scope.newMessage.type=messageRequest.messageType,MessagesService.getMessageById(messageRequest).then(function(data){$scope.message=data,$scope.message.body=data.body.replace(/\r\n/g,"<br>"),$scope.message.messageThread||($scope.message.messageThread=[]),data.isConfidential&&($scope.isConfidentialMsg=!0,$scope.newMessage.isConfidential=!0),$scope.message.messageThread=orderByFilter($scope.message.messageThread,"received","reverse"),$scope.newMessage.replyToMessageId=getReplyToMessageId(messageRequest.messageType),$scope.newMessage.type=messageRequest.messageType,$scope.newMessage.recipientId=data.from.id,$scope.newMessage.type=data.messageType,$scope.newMessage.subjectId=data.messageSubjectId,$scope.newMessage.subject=data.subject,setMessageExperience($scope.message.messageType,$scope.newMessage.subjectId)},function(){Notifications.error("Error getting message.")})["finally"](function(){$scope.isLoading=!1})}function setMessageExperience(messageType,messageSubjectId){var priorityHealthAttachments=FeatureStatus.checkFeatureStatus("priorityHealthMessagingAttachments"),emailADoctorExperience="EmailADoctor"===messageType,customerServiceExperience=10===parseInt(messageSubjectId)&&priorityHealthAttachments;$scope.medicalHide=!emailADoctorExperience,$scope.customerServiceHide=!customerServiceExperience,$scope.emailADoctorExperience=emailADoctorExperience,$scope.customerServiceExperience=customerServiceExperience}function getDateTime(message){return message?"outbox"===$scope.folder?message.sent:message.received:null}function getReplyToMessageId(messageType){var replyToId=messageRequest.id;if("CareManager"===messageType){var lastIndex=$scope.message.messageThread.length-1;replyToId=0>lastIndex?$scope.message.id:$scope.message.messageThread[lastIndex].id}return replyToId}function cancelReply(){$scope.newMessage.body="",$scope.clearAttachment(),$scope.isConfidentialMsg||($scope.newMessage.isConfidential=!1)}var messageRequest={folder:$routeParams.folder,id:$routeParams.messageId,messageType:$routeParams.messageType,threadId:$routeParams.threadId,subjectId:$routeParams.messageSubjectId};$scope.folder=messageRequest.folder.toLowerCase(),$scope.isConfidentialMsg=!1,$scope.cancelReply=cancelReply,$scope.getDateTime=getDateTime;var attachmentsNotSupported=["CareManager","HealthCoach","DiabetesProductCareTeam","GenericHealthCoachPool","Unknown","EwsUnknown"];$controller("BaseMessageCtrl",{$scope:$scope}),initialize()}angular.module("messages").controller("SingleMessageCtrl",SingleMessageCtrl),SingleMessageCtrl.$inject=["$scope","$controller","$location","MessagesService","Notifications","FeatureStatus","$routeParams","orderByFilter"]}(),function(){"use strict";function ComposeMessageCtrl($scope,$controller,MessageSuggestionsService,Notifications,$location,$uibModal,$routeParams,config,FeatureStatus){function initialize(){$scope.statusLoading=!0,MessageSuggestionsService.get().$promise.then(function(data){var recipients,subjects,tempList,tempSubjects;recipients=[],subjects=[];var careTeamRecipientId,careTeamSubjectId,counter=0,subjectCounter=0,needEmailADoctorSubjectPrefill=!1;void 0!==$routeParams.rId&&(careTeamRecipientId=$routeParams.rId),void 0!==$routeParams.sId&&(careTeamSubjectId=$routeParams.sId),$.each(data,function(k,d){null===d&&(d=[]),$.isArray(d.recipients)&&(tempList=d.recipients,$.each(tempList,function(index){tempList[index].messageType=d.messageType,tempList[index].messageTypeDisplay=config.messageTypes[d.messageType],tempList[index].indexNumber=counter,null!==careTeamRecipientId&&careTeamRecipientId===tempList[index].id&&($scope.careTeamRecipientId=counter,$scope.recipient=tempList[index]),counter+=1}),recipients=recipients.concat(tempList),tempSubjects=d.subjects,$.each(tempSubjects,function(index){tempSubjects[index].messageType=d.messageType,tempSubjects[index].indexNumber=subjectCounter,subjectCounter+=1,tempSubjects[index].id===careTeamSubjectId&&"EmailADoctor"===tempSubjects[index].messageType&&($scope.subject=tempSubjects[index],needEmailADoctorSubjectPrefill=!0)}),subjects=subjects.concat(tempSubjects))}),$scope.recipientData=recipients,$scope.subjects=subjects,$scope.error=!1,needEmailADoctorSubjectPrefill?$scope.prefillEmailADoctorSubject():$scope.updateRecipient()},function(){Notifications.error("Error: Failed to load message suggestions.")})["finally"](function(){$scope.loading=!1,$scope.statusLoading=!1})}function updateRecipient(){if("undefined"!=typeof $scope.composeMessage){if(!$scope.recipient)return $scope.subjectData=null,$scope.newMessage.type="",$scope.newMessage.recipientId=null,$scope.customerServiceHide=!0,void($scope.medicalHide=!0);var messageType=$scope.recipient.messageType,isHideAttachment="EmailADoctor"!==messageType;$scope.medicalHide=isHideAttachment,isHideAttachment&&$scope.clearAttachment(),doctorEmail="EmailADoctor"===messageType,$scope.subjectData=$.grep($scope.subjects,function(item){return item.messageType===messageType}),$scope.newMessage.type=$scope.recipient.messageType,$scope.newMessage.recipientId=$scope.recipient.id,$scope.subject&&$scope.recipient&&$scope.subject.messageType!==$scope.recipient.messageType&&($scope.subject=null,$scope.subjectText=null),$scope.updateSubject(),$scope.clearAttachment()}}function updateSubject(){"10"===$scope.newMessage.subjectId&&$scope.clearAttachment(),$scope.subject?($scope.newMessage.subjectId=$scope.subject.id,$scope.newMessage.subject=$scope.subject.title):$scope.subjectText?($scope.newMessage.subjectId="",$scope.newMessage.subject=$scope.subjectText):($scope.newMessage.subjectId=null,$scope.newMessage.subject=""),showAttachmentOption()}function showAttachmentOption(){var categoryType=$scope.newMessage.subjectId,priorityHealthAttachments=FeatureStatus.checkFeatureStatus("priorityHealthMessagingAttachments");10===parseInt(categoryType)&&priorityHealthAttachments?$scope.customerServiceHide=!1:$scope.customerServiceHide=!0}function discardClick(path){$scope.newMessage.body&&$scope.newMessage.body.length>0?showDeleteDialog(path):$location.path(path||"/message-center")}function showDeleteDialog(path){path?$scope.path=path:delete $scope.path,$scope.modal=$uibModal.open({templateUrl:"app/messages/views/templates/confirm-modal.tpl.html",controller:$scope.deleteController,scope:$scope})}function prefillEmailADoctorSubject(){$scope.recipient=null,$scope.subjectData=$.grep($scope.subjects,function(item){return"EmailADoctor"===item.messageType})}$controller("BaseMessageCtrl",{$scope:$scope});var doctorEmail=!1;$scope.composeMessage={},$scope.careTeamRecipientId=null,$scope.CustomerServiceHide=!0,$scope.medicalHide=!0,$scope.$watch("subjectText",updateSubject),$scope.updateRecipient=updateRecipient,$scope.updateSubject=updateSubject,$scope.discardClick=discardClick,$scope.prefillEmailADoctorSubject=prefillEmailADoctorSubject,$scope.newMessage={},void 0!==$routeParams.body&&($scope.newMessage.body=atob($routeParams.body)),initialize(),$scope.deleteController=function($scope,$uibModalInstance){$scope.data={},$scope["delete"]=function(){$uibModalInstance.close(),$scope.$parent.newMessage.body="",$location.path($scope.path||"/message-center")},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}},$scope.$on("$locationChangeStart",function(event,next){!$scope.messageSuccess&&$scope.newMessage.body&&$scope.newMessage.body.length>0&&(event.preventDefault(),discardClick(next.substr(next.lastIndexOf("/"))))}),$scope.$on("$locationChangeSuccess",function(){void 0!==$scope.composeMessage&&($scope.recipient=0)})}angular.module("messages").controller("ComposeMessageCtrl",ComposeMessageCtrl),ComposeMessageCtrl.$inject=["$scope","$controller","MessageSuggestionsService","Notifications","$location","$uibModal","$routeParams","messagesConfig","FeatureStatus"]}(),function(){"use strict";function MessagesService(config,appConfig,$resource,$rootScope,$http){function clear(){$rootScope.alerts={}}function deleteMessages(data){var request=angular.copy(httpConfig);return request.data=data,$http(request)}function sendMessage(data){return messages.sendMessage(data)}function getAlertsCount(){var promise=alerts.get().$promise;return promise.then(function(data){$rootScope.alerts=data}),promise["catch"](function(){$rootScope.alerts=null}),promise}function getMessages(folder,beforeDate,beginAtEpicMessageId){return messages.getMessages({folder:capitalizeFirstLetter(folder),beforeDate:beforeDate||"",afterDate:"",beginAtEpicMessageId:beginAtEpicMessageId||""}).$promise}function getMessageById(messageRequest){return messageRequest.folder=capitalizeFirstLetter(messageRequest.folder),messages.getSingleMessage(messageRequest).$promise}function capitalizeFirstLetter(string){return string.charAt(0).toUpperCase()+string.slice(1)}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),httpConfig={method:"DELETE",url:[apiEndpoint,config.apiRoutes.messages].join("/"),data:null,headers:{"Content-Type":"application/json;charset=utf-8"}},messages=$resource([apiEndpoint,config.apiRoutes.messages].join("/"),null,{getMessages:{method:"GET"},getSingleMessage:{method:"GET"},sendMessage:{method:"POST"}}),alerts=$resource([apiEndpoint,config.apiRoutes.alerts].join("/"));return $rootScope.$on("userLoggedOut",clear),{getMessages:getMessages,getMessageById:getMessageById,deleteMessages:deleteMessages,sendMessage:sendMessage,getAlertsCount:getAlertsCount,clear:clear}}angular.module("messages").service("MessagesService",MessagesService),MessagesService.$inject=["messagesConfig","appConfig","$resource","$rootScope","$http"]}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service(config,appConfig,$resource){var resource=$resource("messages",{},{get:{method:"Get",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.messagesuggestions),isArray:!1}});this.get=function(){return resource.get()}}var module=angular.module("messages");module.service("MessageSuggestionsService",["messageSuggestionsConfig","appConfig","$resource",service])}(),function(){"use strict";function tooltipHide($timeout){return{restrict:"A",scope:{tooltipHide:"="},link:function(scope,element){scope.$watch("tooltipHide",function(val){val&&$timeout(function(){element.triggerHandler("mouseleave")})})}}}angular.module("messages").directive("tooltipHide",tooltipHide),tooltipHide.$inject=["$timeout"]}(),angular.module("forms",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/forms/patientForms",{title:"Forms",templateUrl:"app/forms/views/forms.html",controller:"FormsCtrl"}).when("/forms/questionnaires",{title:"Questionnaires",templateUrl:"app/forms/views/questionnaires.html",feature:"dtQuestionnaires",roles:["hasAccess"]}).when("/forms/letters",{title:"Letters",templateUrl:"app/forms/views/letters.html",feature:"dtLetters",roles:["blue"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function service(){var getForms=function(){return[{title:"Release of Medical Information",url:"https://s3.amazonaws.com/MyHealth_Forms/SHForm_ReleaseMedicalInformation.pdf"},{title:"Request for Accounting Disclosures",url:"https://s3.amazonaws.com/MyHealth_Forms/SHForm_RequestForAccountingDisclosuresPHI.pdf"},{title:"Request for Restriction of Use",url:"https://s3.amazonaws.com/MyHealth_Forms/SHForm_RequestForRestrictionOfUse.pdf"},{title:"Request to Amend PHI",url:"https://s3.amazonaws.com/MyHealth_Forms/SHForm_RequestToAmendPHI.pdf"}]};return{getForms:getForms}}var module=angular.module("forms");module.service("formsService",[service])}(),function(){"use strict";function controller($scope,formsService){$scope.forms=formsService.getForms()}var module=angular.module("forms"),app=angular.module("app");app.requires.push("forms"),module.controller("FormsCtrl",["$scope","formsService",controller])}(),angular.module("notebook",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/notebook",{title:"Notebook",templateUrl:"app/notebook/views/notebook.html",controller:"NotebookCtrl"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("notebook").constant("notebookConfig",{templates:{confirmModal:"app/notebook/views/confirm-modal.tpl.html",notebookItem:"app/notebook/views/notebook-item.tpl.html"},apiRoutes:{notebook:"/notebook"}}),function(){"use strict";function controller($scope,$modal,NotebookService,notebookConfig,Notifications){function removeDuplicates(){$scope.result.items=_.uniq($scope.result.items,!1,function(p){return p.notebookEntryID})}function getNotes(getNextPage){$scope.isLoading=!0;var canGetNextPage=getNextPage&&$scope.result.hasMoreEntries;canGetNextPage&&($scope.filter.skip+=$scope.filter.take),NotebookService.getNotes($scope.filter.skip,$scope.filter.take,$scope.filter.sortBy,$scope.filter.sortDesc).then(function(data){canGetNextPage&&(data.items=$scope.result.items.concat(data.items)),$scope.result=data,removeDuplicates()},function(){Notifications.clear(),Notifications.error("Error: Failed to load notes."),canGetNextPage&&($scope.filter.skip-=$scope.filter.take)})["finally"](function(){$scope.isLoading=!1})}function initNotebook(){getNotes(!1)}$scope.config=notebookConfig,$scope.result={},$scope.newNote="",$scope.filter={skip:0,take:10,sortBy:"DateCreated",sortDesc:!0},$scope.getSortedNotes=function(sortDesc){$scope.filter.skip=0,$scope.filter.sortDesc=sortDesc,getNotes(!1)},$scope.viewMoreNotes=function(){getNotes(!0)},$scope.editNote=function(item){item.originalText=item.text,item.editing=!0,item.open=!0},$scope.cancelEditNote=function(item){item.editing=!1,"undefined"!=typeof item.originalText&&(item.text=item.originalText)},$scope.updateNote=function(item){item.editing=!1,$scope.isLoading=!0,NotebookService.updateNote(item.notebookEntryID,item.text).then(function(data){var index=$scope.result.items.indexOf(item);$scope.result.items.splice(index,1),$scope.result.items.splice(index,0,data),data.open=item.open},function(){item.text=item.originalText,Notifications.clear(),Notifications.error("Error: Failed to update the note.")})["finally"](function(){$scope.isLoading=!1})},$scope.addNote=function(){$scope.isLoading=!0,NotebookService.addNote($scope.newNote).then(function(data){$scope.newNote="",$scope.filter.sortDesc?($scope.result.items.splice(0,0,data),$scope.filter.skip+=1):$scope.result.items.push(data)},function(){Notifications.clear(),
Notifications.error("Error: Failed to add the note.")})["finally"](function(){$scope.isLoading=!1})},$scope.deleteNote=function(item){$scope.modal=$modal.open({templateUrl:notebookConfig.templates.confirmModal,controller:$scope.deleteController,scope:$scope,resolve:{item:function(){return item}}})},$scope.deleteController=function($scope,$uibModalInstance,item){$scope.data={},$scope.item=item,$scope["delete"]=function(){$scope.isLoading=!0,NotebookService.deleteNote($scope.item.notebookEntryID).then(function(){$scope.result.items.splice($scope.result.items.indexOf($scope.item),1),$scope.filter.sortDesc&&($scope.filter.skip-=1)},function(){Notifications.clear(),Notifications.error("Error: Failed to delete the note.")})["finally"](function(){$scope.isLoading=!1}),$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}},initNotebook()}var module=angular.module("notebook");module.controller("NotebookCtrl",["$scope","$uibModal","NotebookService","notebookConfig","Notifications",controller])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service(config,appConfig,$resource){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),resource=$resource("notebook",{},{getNotes:{method:"GET",url:resourceRoute(apiEndpoint,config.apiRoutes.notebook)},addNote:{method:"POST",url:resourceRoute(apiEndpoint,config.apiRoutes.notebook)},updateNote:{method:"PUT",url:resourceRoute(apiEndpoint,config.apiRoutes.notebook)},deleteNote:{method:"DELETE",url:resourceRoute(apiEndpoint,config.apiRoutes.notebook)}}),getNotes=function(skip,take,sortBy,sortDesc){var model={skip:skip,take:take,sortBy:sortBy,sortDescending:sortDesc};return resource.getNotes(model).$promise},addNote=function(text){var model={text:text};return resource.addNote(model).$promise},updateNote=function(id,text){var model={notebookEntryID:id,text:text};return resource.updateNote(model).$promise},deleteNote=function(id){var model={id:id};return resource.deleteNote(model).$promise};return{getNotes:getNotes,addNote:addNote,updateNote:updateNote,deleteNote:deleteNote}}var module=angular.module("notebook");module.service("NotebookService",["notebookConfig","appConfig","$resource",service])}(),angular.module("learning-resources",["services","filters","ngRoute"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/learning-resources/:section",{title:"Learning Resources",template:"<learning-resources-page></learning-resources-page>"})}angular.module("learning-resources").config(routeConfiguration),routeConfiguration.$inject=["$routeProvider"]}(),angular.module("learning-resources").constant("videosConfig",{apiRoutes:{videos:"/healtheducation"}}).constant("careResources",[{title:"Diabetes: Understanding Carbohydrates",description:"Like a car needs the right type of fuel (gas) to run, you need the right kind of fuel (food) to function. For energy, your body needs food with carbohydrates. But carbohydrates raise blood sugar levels higher and faster than other kinds of food. This article teaches the basics about carbs, fiber and carb counting.",size:"426 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/Diabetes-UnderstandingCarbohydrates.pdf"},{title:"Diabetes: Exams and Tests",description:"Learn some of the regular exams and tests and how often is recommended for people living with diabetes. To learn even more, contact the American Diabetes Association (800-342-2383, www.diabetes.org).",size:"357 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/DiabetesExamsandTests.pdf"},{title:"Do you have Diabetes?",description:"Feeling hungry or thirsty all of the time and being overweight are a few of the signs and risks for diabetes.  Read this article to learn more about the signs and risks for diabetes and to when to see a doctor.",size:"300 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/DoYouHaveDiabetes.pdf"},{title:"Eating the Right Number of Calories (2010 Guidelines)",description:"How many calories are needed to maintain a healthy weight? This article provides guidelines for the right number of calories needed each day to maintain weight based upon age, gender, and activity level.  ",size:"174 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/EatingtheRightNumberofCalories.pdf"},{title:"Get Active, Get Healthy",description:"Ready to move more?  Learn how regular physical activity can improve mental and physical health and help weight loss or weight maintenance with the right amount and frequency.",size:"87 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/GetActiveGetHealthy.pdf"},{title:"Getting Stronger with Resistance Training",description:"Did you know that regular resistance training can help control blood sugar, lower blood pressure as well as build and tone muscles?  Learn how to do resistance training with the right amount of frequency to reap the benefits of being stronger.",size:"344 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/GettingStrongerwithResistanceTraining.pdf"},{title:"How Hard is My Physical Activity?",description:"Learn an easy way to find out if you are working hard enough while you exercise to gain health benefits.",size:"31 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/HowHardIsMyPhysicalActivity.pdf"},{title:"Diabetes: Pre-Diabetes",description:"Prediabetes is a disease where the body’s cells have trouble using glucose (blood sugar) in the blood for energy leading to too much glucose in the blood. This can affect how the heart and blood vessels work.  Learn more about this and how changes in diet and lifestyle can prevent the onset of type 2 diabetes.",size:"375 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/Prediabetes.pdf"},{title:"Getting Support for Quitting Smoking",description:"Building a support network of friends, co-workers and family members can make a big difference when ready to quit smoking.  Learn strategies and how to incorporate them into a quit plan to increase chances for success.",size:"366 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/QuittingSmoking.pdf"},{title:"Reading Food Labels",description:"Reading food labels can be confusing but is an important step towards healthier eating.  This article breaks down the nutrition facts on food labels with definitions and helpful tips about what to look for when making food choices.",size:"235 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/ReadingFoodLabels.pdf"},{title:"Responding Better to Stress",description:"Learning to identify which stressors in life can and cannot be controlled can help us respond better to stress.  Tips for positive self-talk and building a support network are highlighted in this article to help direct decisions about actions when stress levels rise.",size:"362 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/RespondingBettertoStress.pdf"},{title:"Setting Goals for Lifestyle Changes",description:"Once you choose to make healthy lifestyle changes, it’s important to have a plan to keep you on track for success.  Learn how to set “SMART” goals and strategies for overcoming obstacles so your plan becomes a reality!",size:"415 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/SettingGoalsforLifestyleChanges.pdf"},{title:"Stress Relief: Relaxation",description:"Discover how spending only 5-10 minutes a day practicing relaxation techniques can calm the mind and body and help increase feelings of refreshment.",size:"282 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/StressReliefandRelaxation.pdf"},{title:"Tips for Managing Stress",description:"Stress is a normal part of life but it’s important to recognize when stress levels are too high. Learn possible causes of stress and techniques to lower stress for a better life.",size:"47 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/TipsforManagingStress-Spectrum.pdf"},{title:"Understanding USDA MyPlate",description:"The USDA has guidelines to help make healthy food choices. These are called MyPlate. Learn how the MyPlate food groups can make up healthy meals using the image of a place setting for appropriate portions and how the SuperTracker can help planning and tracking of meals and activities.",size:"208 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/UnderstandingUSDAMyPlate.pdf"},{title:"Weight Management: Take It Off and Keep It Off",description:"Staying motivated while losing weight can be challenging.  Find out motivational and confidence building tips and resources to help lose weight and keep it off.  ",size:"249 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/WeightManagement.pdf"},{title:"Weight Management: Healthy Eating",description:"Discover tried and true tips to help manage weight including reading food labels, the recommended amount of fat and fiber and healthy habits.",size:"249 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/WeightManagementandHealthyEating.pdf"},{title:"Why Do You Smoke?",description:"Discover what your smoking triggers are, and how to handle them to help make it easier to quit.  Thinking about why and when you smoke will build your chances for success when you are ready to quit.",size:"314 KB (.pdf)",resourceUrl:"https://s3.amazonaws.com/MyHealth_InfoDocs/WhyDoYouSmoke.pdf"}]),function(){"use strict";function directive(){return{restrict:"AE",templateUrl:"app/learning-resources/views/learning-resources-page-tpl.html",scope:!0,controller:controller}}function controller($scope,$routeParams){function isActiveTab(tab){return tab===$scope.activeSection}function isSectionAvailable(section){return"care"===section?$scope.currentUser.isMember===!0:!0}function isSectionShown(section){var isShown="all"===$scope.activeSection||section===$scope.activeSection;return isShown=isShown&&isSectionAvailable(section)}$scope.activeSection=$routeParams.section||"all",$scope.isSectionShown=isSectionShown,$scope.isActiveTab=isActiveTab,$scope.isSectionAvailable=isSectionAvailable}angular.module("learning-resources").directive("learningResourcesPage",directive),controller.$inject=["$scope","$routeParams"]}(),function(){"use strict";function directive(){return{restrict:"AE",templateUrl:"app/learning-resources/views/care-resources-tpl.html",scope:!0,controller:controller}}function controller($scope,careResources){$scope.resources=careResources}angular.module("learning-resources").directive("careResources",directive),directive.$inject=[],controller.$inject=["$scope","careResources"]}(),function(){"use strict";function directive(){return{restrict:"AE",replace:!0,templateUrl:"app/learning-resources/views/care-resource-tpl.html",scope:{resource:"="}}}angular.module("learning-resources").directive("careResource",directive),directive.$inject=[]}(),function(){"use strict";function directive(){return{restrict:"AE",templateUrl:"app/learning-resources/views/video-resources-tpl.html",scope:!0,controller:controller}}function controller($scope,$timeout,Notifications,VideosService,UserAgent){function initVideos(){$scope.getVideos()}$scope.videoLimit=5,$scope.isAndroid=UserAgent.deviceIsAndroid,$scope.loadingShort=!1,$scope.loadingLong=!1,$scope.getVideos=function(){$scope.loadingShort=!0,$scope.loadingLong=!1;var timer=$timeout(function(){$scope.updateLoadingFlags()},5e3);VideosService.getVideos().then(function(data){data&&($scope.videos=data)},function(){Notifications.clear(),Notifications.error("Error: Failed to load videos.")})["finally"](function(){$scope.loadingShort=!1,$scope.loadingLong=!1,$timeout.cancel(timer)})},$scope.updateLoadingFlags=function(){$scope.loadingShort=!1,$scope.loadingLong=!0},initVideos()}angular.module("learning-resources").directive("videoResources",directive),directive.$inject=[],controller.$inject=["$scope","$timeout","Notifications","VideosService","UserAgent"]}(),function(){"use strict";angular.module("learning-resources").directive("videoResource",function(){return{restrict:"AE",templateUrl:"app/learning-resources/views/video-resource-tpl.html",scope:{item:"="}}})}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function VideosService(config,appConfig,$resource){function getVideos(){return resource.getVideos().$promise}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),resource=$resource("videos",{},{getVideos:{method:"GET",url:resourceRoute(apiEndpoint,config.apiRoutes.videos),isArray:!0}});return{getVideos:getVideos}}angular.module("learning-resources").service("VideosService",["videosConfig","appConfig","$resource",VideosService])}(),angular.module("accountactivity",["services"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/accountActivity",{title:"Account Activity",templateUrl:"app/account-activity/views/account-activity.html",controller:"AccountActivityCtrl",roles:["blue","green","lobby"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("accountactivity").constant("accountactivityConfig",{apiRoutes:{accountactivity:"/AccountActivity"}}),function(){"use strict";function controller($scope,AccountActivity,Notifications,$filter){$scope.loading=!0,$scope.lastLogin=!1,$scope.historySrc="login",$scope.sameMonth=function(a,b){return new Date(a).getMonth()===new Date(b).getMonth()&&new Date(a).getYear()===new Date(b).getYear()};var dataLoaded=function(activities){activities=_.chain(activities).sort(function(a,b){return new Date(a.activityDate)-new Date(b.activityDate)}).reverse().value(),$scope.lastLogin=activities.shift(),$scope.activities=activities,$scope.loading=!1},loadFailed=function(){Notifications.error("Error retrieving account activity."),$scope.loading=!1},timezoneOffset=(new Date).getTimezoneOffset();return $scope.toLocalDate=function(utcDateString){var result=$filter("date")(utcDateString,"medium"),tempDate=new Date(result);return tempDate.setMinutes(tempDate.getMinutes()-timezoneOffset),tempDate},AccountActivity.getAccountLoginActivity().then(dataLoaded,loadFailed),{loadFailed:loadFailed,dataLoaded:dataLoaded}}var module=angular.module("accountactivity");module.controller("AccountActivityCtrl",["$scope","AccountActivity","Notifications","$filter",controller])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service(config,appConfig,$resource){var global=this,activities=$resource("accountactivity",{},{getAccountLoginActivity:{method:"Get",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.accountactivity),isArray:!0}});global.getAccountLoginActivity=function(){return activities.getAccountLoginActivity().$promise}}var module=angular.module("accountactivity");module.service("AccountActivity",["accountactivityConfig","appConfig","$resource",service])}(),angular.module("contracts",["plans","services","filters","ngResource","ngRoute"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/insurance/benefits",{title:"Benefits Eligibility",templateUrl:"app/contracts/views/benefits-dt.html",controller:"BenefitsEligibilityCtrl",controllerAs:"vm",rolesExpression:"blue && !green",feature:["benefitsEligibility"]}).when("/insurance/benefits",{title:"Benefits",templateUrl:"app/contracts/views/benefits.html",controller:"BenefitsCtrl",roles:["green"]}).when("/insurance/benefits/acupuncture",{title:"Benefits Acupuncture",templateUrl:"app/contracts/views/benefits-acupuncture.html",controller:"BenefitsAcupunctureCtrl",roles:["green"]}).when("/insurance/benefits/medical-massage",{title:"Benefits Medical Massage",templateUrl:"app/contracts/views/benefits-medical-massage.html",controller:"BenefitsMedicalMassageCtrl",roles:["green"]}).when("/insurance/eligibility",{title:"Eligibility",templateUrl:"app/contracts/views/eligibility-dt.html",controller:"BenefitsEligibilityCtrl",controllerAs:"vm",rolesExpression:"blue && !green",feature:["eligibility"]}).when("/insurance/benefits-eligibility",{title:"Eligibility",templateUrl:"app/contracts/views/benefits-dt.html",controller:"BenefitsEligibilityCtrl",controllerAs:"vm",rolesExpression:"blue && !green",feature:["benefitsEligibility"]}).when("/insurance/id-card",{title:"ID Card",templateUrl:"app/contracts/views/id-card.html",controller:"IdCardCtrl",roles:["green"]}).when("/insurance/id-card/order",{title:"Order ID Card",templateUrl:"app/contracts/views/order-id-card.html",controller:"OrderIdCardCtrl",roles:["green"]}).when("/insurance/accumulators",{title:"Accumulators",templateUrl:"app/contracts/views/accumulators.html",controller:"AccumulatorsCtrl",roles:["green"]}).when("/costs/accumulators",{title:"Accumulators",templateUrl:"app/contracts/views/accumulators.html",controller:"AccumulatorsCtrl",roles:["green"]}).when("/contracts/benefits",{title:"Benefits",templateUrl:"app/contracts/views/benefits.html",controller:"BenefitsCtrl",roles:["green"]}).when("/contracts/id-card",{title:"ID Card",templateUrl:"app/contracts/views/id-card.html",controller:"IdCardCtrl",roles:["green"]}).when("/contracts/accumulators",{title:"Accumulators",templateUrl:"app/contracts/views/accumulators.html",controller:"AccumulatorsCtrl",roles:["green"]}).when("/insurance/HealthEquity",{title:"Health Equity",templateUrl:"app/contracts/views/health-equity.html",controller:"HealthEquityCtrl",roles:["isLoggedInMember"],authorization:"HEALTH_EQUITY_ELIGIBLE"}).when("/insurance/HealthEquity/:sso",{title:"Health Equity",templateUrl:"app/contracts/views/health-equity.html",controller:"HealthEquityCtrl",roles:["isLoggedInMember"],authorization:"HEALTH_EQUITY_ELIGIBLE"}).when("/insurance/ExerciseRewards",{title:"Exercise Rewards",templateUrl:"app/contracts/views/exercise-rewards.html",controller:"ExerciseRewardsCtrl",roles:["isLoggedInMember"],authorization:"EXERCISE_REWARDS"}).when("/insurance/ExerciseRewards/:sso",{title:"Exercise Rewards",templateUrl:"app/contracts/views/exercise-rewards.html",controller:"ExerciseRewardsCtrl",roles:["isLoggedInMember"],authorization:"EXERCISE_REWARDS"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("contracts").constant("contractsConfig",{apiRoutes:{contracts:"contracts",cards:"cards",cardOrders:"cardOrders",member:"member",fax:"faxidcards",group:"employergroup",benefits:"benefits"},ashInformationDate:"01/01/2016 00:00:00"}),function(){"use strict";function controller($scope){$scope.title="Contracts"}var module=angular.module("contracts");module.controller("ContractsCtrl",["$scope",controller])}(),function(){"use strict";function controller($scope,$filter,Contracts,Notifications,Authorization,Benefits,OldMemberCenterService,$timeout){function enableButton(){$scope.buttonDisabled=!1}function goBackToOldMemberCenter(destination){$scope.buttonDisabled=!0,$timeout(enableButton,2e4),OldMemberCenterService.goBackToOldMemberCenter(destination)}$scope.title="Benefits",$scope.loading=!0,$scope.isGentex=Authorization.isGentex(),$scope.backToOMC=goBackToOldMemberCenter,$scope.enableButton=enableButton,$scope.buttonDisabled=!1,$scope.hasCustomizedBenefits=Benefits.hasCustomizedBenefits(),$scope.getBenefitSummaryDocumentUrl=function(contractId){return Benefits.getBenefitsDocumentUrl(contractId,"schedule")},$scope.getBenefitPlanSummaryDocumentUrl=function(contractId){return Benefits.getBenefitsDocumentUrl(contractId,"summary")},Contracts.getContracts().then(function(contracts){$scope.loading=!1,$scope.contracts=contracts,$scope.benefitContracts=$filter("filter")(contracts,function(contract){return contract.benefitsSummary.hasBenefits?(contract.activePlans=$filter("filter")(contract.productOffering,{isActive:!0},!0),angular.forEach(contract.activePlans,function(plan){plan.product.name=$filter("planBranding")(plan.product.marketingDescription),plan.product.name||(plan.product.name=$filter("planBrandingWellness")(plan.product.description))}),contract.activePlans=$filter("filter")(contract.activePlans,function(plan){return $scope.isGentex||angular.forEach(plan.systemIds,function(systemId){"CSPI_ID"===systemId.systemIdName&&"SMED0001"===systemId.systemIdValue&&(contract.pdfNotAvailable=!0)}),plan.product.name?plan:null},!0),contract.activePlans=$filter("orderBy")(contract.activePlans,"product.name"),contract):null})},function(){$scope.loading=!1,Notifications.error("<b>Error:</b> We were unable to load contracts.")}),$scope.touchCarousel={benefits:{dots:!0,loop:!1,items:1}},$scope.getProductOfferings=function(){var returnContracts;if($scope.contracts&&$scope.contracts.length>0){var productOffering=$scope.contracts[0].productOffering;returnContracts=productOffering?productOffering:null}return returnContracts}}var module=angular.module("contracts");module.controller("BenefitsCtrl",["$scope","$filter","Contracts","Notifications","Authorization","Benefits","OldMemberCenterService","$timeout",controller])}(),function(){"use strict";function IdCardController($scope,$q,Contracts,Group,Plan,Notifications,$uibModal,Breakpoints){function cardIsDuplicate(cards){if(1===cards.length)return $scope.phoneNum=cards[0].contactPhoneNumber,!0;for(var i=1;i<cards.length;i+=1)if(cards[i].contract.contractID===cards[i-1].contract.contractID)return $scope.phoneNum=cards[i].contactPhoneNumber,!0;return!1}function initialize(){var cards,imagePromises=[];Contracts.allCards().$promise.then(function(response){cards=response,$scope.duplicateCard=cardIsDuplicate(cards),angular.forEach(cards,function(card){card.group=Group.get(card.contract.enterpriseID);var promise=Plan.getPlanImgSrc(card.contract.enterpriseID);imagePromises.push(promise),promise.then(function(planImgSrc){card.planImageSrc=planImgSrc})}),$q.all(imagePromises)["finally"](function(){$scope.cards=cards,$scope.loading=!1})},function(){$scope.loading=!1,Notifications.error("<b>Error:</b> We were unable to load your ID cards.")})}function faxController($scope,$uibModalInstance){$scope.data={},$scope.send=function(){$uibModalInstance.close($scope.data.phone)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}$scope.loading=!0,$scope.modal={},$scope.defaultPlanPhoneNumber="8883896646",$scope.showFaxModal=function(){$scope.modal=$uibModal.open({templateUrl:"app/contracts/views/send-fax.tpl.html",controller:faxController}),$scope.modal.result.success($scope.sendFax)},$scope.sendFax=function(phone){Notifications.info("Attempting to send your fax ..."),Contracts.sendFax(phone).then(function(){Notifications.clear(),Notifications.success("Your fax has been sent! Please allow a few minutes for the fax to be processed.")})["catch"](function(){Notifications.clear(),Notifications.error("We were unable to send your fax. Please check the fax number and try again.")})},$scope.getContractNumber=function(card,dependent){var pieces=[card.contract.contractNumber];return dependent&&dependent.dependentSuffix&&pieces.push(dependent.dependentSuffix),pieces.join("-")},$scope.medicare=function(card){for(var i=0;i<card.contract.productOffering.length;i+=1){var productOffering=card.contract.productOffering[i];if(productOffering.product.description.toLowerCase().indexOf("medicare")>-1)return!0}return!1},$scope.medigap=function(card){for(var i=0;i<card.contract.productOffering.length;i+=1){var productOffering=card.contract.productOffering[i];if(productOffering.product.description.toLowerCase().indexOf("medigap")>-1)return!0}return!1},initialize(),$scope.touchCarousel={idCard:{dots:!0,loop:!1,margin:10,responsiveClass:!0,center:!0,responsive:{0:{items:1,stagePadding:20}}}},$scope.touchCarousel.idCard.responsive[Breakpoints.screenMidXsSm.toString()]={items:1,stagePadding:80},$scope.touchCarousel.idCard.responsive[Breakpoints.screenSm.toString()]={items:1,stagePadding:100},$scope.touchCarousel.idCard.responsive[Breakpoints.screenMidSmMd.toString()]={items:1,stagePadding:160},$scope.touchCarousel.idCard.responsive[Breakpoints.screenMd.toString()]={items:1,stagePadding:110},$scope.touchCarousel.idCard.responsive[Breakpoints.screenMidMdLg.toString()]={items:2,stagePadding:0}}angular.module("contracts").controller("IdCardCtrl",IdCardController),IdCardController.$inject=["$scope","$q","Contracts","Group","Plan","Notifications","$uibModal","Breakpoints"]}(),function(){"use strict";function AccumulatorsCtrl($scope,$filter,Contracts,Notifications,$uibModal){function formatContractsForScope(contracts){for(var i=0;i<contracts.length;i+=1){var contract=formatAccumulatorData(contracts[i]),groupedAccumulators={tier1:$filter("accumulatorTier")(contract.accumulators,"Tier 1",networks["in"]),tier2:$filter("accumulatorTier")(contract.accumulators,"Tier 2",networks["in"]),inNetwork:$filter("accumulatorTier")(contract.accumulators,null,networks["in"]),combined:$filter("accumulatorTier")(contract.accumulators,null,networks.combined),outNetwork:$filter("accumulatorTier")(contract.accumulators,null,networks.out)};contract.isTiered=groupedAccumulators.tier1.length>0||groupedAccumulators.tier2.length>0,contract.isTiered?(groupedAccumulators.tier2=groupedAccumulators.tier2.concat(groupedAccumulators.inNetwork),groupedAccumulators.inNetwork=[],contract.groupedAccumulators=groupedAccumulators):contract.allAccumulators=groupedAccumulators.inNetwork.concat(groupedAccumulators.combined,groupedAccumulators.outNetwork)}$scope.contracts=contracts,$scope.loading=!1}function getBenefitContracts(contracts){$scope.isMIChild=!1,$scope.hasHsa=_.some(contracts||[],function(contract){return contract.isHsa}),$scope.$broadcast("renderCircle"),$scope.benefitContracts=$filter("filter")(contracts,function(contract){return contract.benefitsSummary.hasBenefits?(contract.activePlans=$filter("filter")(contract.productOffering,{isActive:!0},!0),angular.forEach(contract.activePlans,function(plan){plan.product.name=$filter("planBranding")(plan.product.marketingDescription),plan.product.name&&"michild"===plan.product.name.toLowerCase()&&($scope.isMIChild=!0),plan.product.name||(plan.product.name=$filter("planBrandingWellness")(plan.product.description))}),contract.activePlans=$filter("filter")(contract.activePlans,function(plan){return plan.product.name?plan:null},!0),contract.activePlans=$filter("orderBy")(contract.activePlans,"product.name"),contract):null})}$scope.title="Deductible Balances";var networks={"in":"IN",out:"OUT",combined:"COMBINED"};$scope.loading=!0,$scope.showMessage=function(){$scope.modal=$uibModal.open({templateUrl:"app/contracts/views/over-amount.tpl.html",controller:overAmountController})};var promise=Contracts.getContracts();promise.then(formatContractsForScope),promise.then(getBenefitContracts),promise["catch"](function(){$scope.loading=!1,Notifications.error("<b>Error:</b> We were unable to load contracts.")})}function formatAccumulatorData(contract){for(var accumulatorByDesc={},x=0;x<contract.accumulators.length;x+=1){var accumulator=contract.accumulators[x];accumulator.maxAmount=parseFloat(accumulator.maxAmount),accumulator.accumulatedAmount=parseFloat(accumulator.accumulatedAmount),accumulatorByDesc[accumulator.accumulatorDescription]=accumulator}return contract}function overAmountController($scope,$uibModalInstance){$scope.data={},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}angular.module("contracts").controller("AccumulatorsCtrl",AccumulatorsCtrl),AccumulatorsCtrl.$inject=["$scope","$filter","Contracts","Notifications","$uibModal"]}(),function(){"use strict";function controller($scope,Contracts,Notifications,$busy){var views={order:"order",orderComplete:"order-complete"};$scope.currentView=views.order,$scope.$busy=$busy,$scope.defaultPlanPhoneNumber="8883896646",$scope.orders=Contracts.getCardOrders(),$scope.member=Contracts.getMemberDetails(),$scope.cards=Contracts.allCards(),$busy.watch($scope.orders.$promise),$busy.watch($scope.member.$promise),$busy.watch($scope.cards.$promise),$scope.placeOrder=function(){$scope.orders=Contracts.orderCards(),$busy.watch($scope.orders.$promise),$scope.orders.$promise.then(function(orders){$scope.currentView=views.orderComplete,orders&&orders.length&&($scope.latestOrder=orders[0])},function(){Notifications.clear(),Notifications.error("We were unable to order your ID cards successfully. Please try again or call Customer Service for further assistance.")})},$scope.cards.$promise.then(function(cards){var uniqCards=_.uniq(cards||[],!1,function(card){return card.contract.contractNumber});$scope.contactNumber=$scope.defaultPlanPhoneNumber,uniqCards&&uniqCards.length&&($scope.contactNumber=uniqCards[0].contactPhoneNumber)}),$scope.orders.$promise.then(function(orders){orders&&orders.length&&($scope.latestOrder=orders[0])},function(){}),$scope.member.$promise.then(function(addresses){$scope.address=addresses[0]},function(){Notifications.clear(),Notifications.info("Your member information could not be loaded so your address is not displayed below.")})}var module=angular.module("contracts");module.controller("OrderIdCardCtrl",["$scope","Contracts","Notifications","$busy",controller])}(),function(){"use strict";function HealthEquityController($scope,Authorization,$routeParams){$scope.title="HealthEquity",$scope.getUrl=function(enrolled){return enrolled?"http://www.HealthEquity.com":"http://healthequity.com/ed/mypriority/"},$scope.isEnrolled=Authorization.isHealthEquityEnrolled(),$scope.autoLaunchSso="auto"===$routeParams.sso}var module=angular.module("insurance");module.controller("HealthEquityCtrl",["$scope","Authorization","$routeParams",HealthEquityController])}(),function(){"use strict";function ExerciseRewardsController($scope,$routeParams){$scope.title="ExerciseRewards",$scope.isEnrolled=!0,$scope.autoLaunchSso="auto"===$routeParams.sso}var module=angular.module("insurance");module.controller("ExerciseRewardsCtrl",["$scope","$routeParams",ExerciseRewardsController])}(),function(){"use strict";function service($http,$resource,config,appConfig,UserService){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,config.apiRoutes.contracts].join("/"),contractsResource=$resource(route,{},{get:{isArray:!0}}),cardOrderResource=$resource([apiEndpoint,config.apiRoutes.cardOrders].join("/"),{},{order:{method:"POST",isArray:!0}}),memberResource=$resource([apiEndpoint,config.apiRoutes.member].join("/")),global=this,_contracts={};global.allCards=function(){return $resource([apiEndpoint,config.apiRoutes.cards].join("/"),{},{get:{isArray:!0}}).get()},global.getCard=function(contractId){return $resource([apiEndpoint,config.apiRoutes.cards].join("/"),{id:contractId},{get:{isArray:!0}}).get()},global.getCardOrders=function(){return cardOrderResource.query()},global.getMemberDetails=function(){return memberResource.get()},global.orderCards=function(){return cardOrderResource.order()},global.sendFax=function(faxNumber){var url=[apiEndpoint,config.apiRoutes.fax,"?faxNumber="+faxNumber].join("/");return $http.get(url)},global.getContracts=function(){var memberId=UserService.currentUser.get().phMemberId;if(memberId&&_contracts[memberId])return _contracts[memberId];var promise=contractsResource.get().$promise;return _contracts[memberId]=promise,promise},global.getActiveContractRelationships=function(){return $http.get("api/v2/contracts/get-relationship")}}angular.module("contracts").service("Contracts",service),service.$inject=["$http","$resource","contractsConfig","appConfig","Users"]}(),function(){"use strict";function service($resource,Notifications,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,config.apiRoutes.group].join("/"),groupResource=$resource(route);this.get=function(contractId){var group=groupResource.get({id:contractId});return group.$promise["catch"](function(){Notifications.error("<b>Error:</b> We were unable to load employer group information.")}),group}}var module=angular.module("contracts");
module.service("Group",["$resource","Notifications","contractsConfig","appConfig",service])}(),function(){"use strict";function filter(){return function(input){return input?plans[input.toLowerCase()]||input:null}}var module=angular.module("contracts"),plans={priorityppo:"<b>Priority</b>PPO",priorityhmo:"<b>Priority</b>HMO","prioritypos a":"<b>Priority</b>Pos A","prioritypos b":"<b>Priority</b>Pos B",priorityepo:"<b>Priority</b>EPO",prioritydental:"<b>Priority</b>Dental","priority health choice mdc":"Priority Health Choice MDC","priority health choice mic":"Priority Health Choice MIC",priorityindemnity:"<b>Priority</b>Indemnity",priorityindividual:"<b>Priority</b>Individual",prioritymedicare:"<b>Priority</b>Medicare","mypriority hsa":"<b>MyPriority</b> HSA",priorityhsa:"<b>Priority</b>HSA",wellness:"Wellness"};module.filter("planBranding",[filter])}(),function(){"use strict";function filter(){return function(input){return input&&input.toLowerCase().indexOf("wellness")>-1?"Wellness":null}}var module=angular.module("contracts");module.filter("planBrandingWellness",[filter])}(),function(){"use strict";function dependentNameFilter(){return function(dependent){if(dependent){var pieces=_.compact([dependent.name.firstName,dependent.name.middleName,dependent.name.lastName]);return pieces.join(" ")}return""}}function contractsToCardsFilter(){return function(contracts,maxPerCard){var cards=[],maxDependents=maxPerCard||2;return angular.forEach(contracts,function(contract){for(var numClones=Math.ceil(contract.dependents.length/maxDependents)||1,i=0;numClones>i;i+=1)cards.push({contract:contract,dependents:contract.dependents.slice(i*maxDependents,i*maxDependents+maxDependents)})}),cards}}var module=angular.module("contracts");module.filter("dependentName",[dependentNameFilter]),module.filter("contractsToCardsFilter",[contractsToCardsFilter])}(),function(){"use strict";function filter($filter){return function(benefit,isGentex){if(benefit){var inText="In-network ",outText="Out-of-network ";isGentex&&(inText="Preferred ",outText="Alternate ");var prefix="I"===benefit.value.charAt(3)?inText:"O"===benefit.value.charAt(3)?outText:"1"===benefit.value.charAt(3)?"Tier 1    ":"2"===benefit.value.charAt(3)?"Tier 2  ":"CA"===benefit.value.substring(2,4)||"AL"===benefit.value.substring(2,4)?"Alternate ":"PR"===benefit.value.substring(2,4)||"CP"===benefit.value.substring(2,4)?"Preferred ":"";if("Copay"===benefit.amountType)return prefix+$filter("currencyNoCents")(benefit.amount)+" "+benefit.amountType;if("Coinsurance"===benefit.amountType)return prefix+$filter("number")(benefit.externalAmount)+"% "+benefit.amountType}return null}}var module=angular.module("contracts");module.filter("benefitAmount",["$filter",filter])}(),function(){"use strict";function directive(){return{template:"<div></div>",restrict:"E",link:function(scope,element){element.text("this is the idCard directive")}}}var module=angular.module("contracts");module.directive("idCard",[directive])}(),function(){"use strict";function directive(){return{restrict:"A",link:function(scope,element){element.click(function(ev){ev.preventDefault(),ev.stopPropagation(),element.parent().parent().toggleClass("flipped")})}}}var module=angular.module("contracts");module.directive("idCardToggle",[directive])}(),function(){"use strict";function contractSwitcher(){var directive={restrict:"E",templateUrl:"app/contracts/directives/contract-switcher/contract-switcher.tpl.html",replace:!0,controller:contractSwitcherController,controllerAs:"switcher",scope:{externalAppTitle:"@",externalAppImageUrlSmall:"@",externalAppImageUrlMedium:"@",externalAppImageUrlLarge:"@",allowMemberSubscriber:"=",externalAppUrl:"@",isEnrolled:"@",enrolledContracts:"@",contractSelected:"&",ssoHtmlForm:"@",externalSso:"@",autoLaunchSso:"@"}};return directive}function contractSwitcherController($scope,$log,$sce,Authorization,SSO,UserAgent,FeatureStatus,AuthService,Environment,appConfig,$timeout,$q){var vm=this;vm.externalAppTitle=$scope.externalAppTitle,vm.externalAppImageUrlSmall=$scope.externalAppImageUrlSmall,vm.externalAppImageUrlMedium=$scope.externalAppImageUrlMedium,vm.externalAppImageUrlLarge=$scope.externalAppImageUrlLarge,vm.externalAppUrl=$scope.externalAppUrl,vm.isEnrolled=$scope.isEnrolled,vm.contracts=[],vm.allowMemberSubscriber=$scope.allowMemberSubscriber,vm.autoLaunchSso=$scope.autoLaunchSso=$scope.autoLaunchSso===!0||"true"===$scope.autoLaunchSso,$scope.$watch("externalAppUrl",function(newValue){vm.externalAppUrl=newValue}.bind(this)),vm.isEnrolled=Authorization.isHealthEquityEnrolled();var activate=function(){var environment=Environment.get(),ssoUrlCall=null;"healthequity"===$scope.externalSso.toLowerCase()&&FeatureStatus.checkFeatureStatus("singleSignOnHealthEquity")?ssoUrlCall=SSO.getHealthEquityUrl:"exerciserewards"===$scope.externalSso.toLowerCase()&&FeatureStatus.checkFeatureStatus("singleSignOnExerciseRewards")&&(ssoUrlCall=SSO.getExerciseRewardsUrl),null!==ssoUrlCall?($scope.loading=!0,ssoUrlCall().then(function(data){if(data&&data.success){if(!UserAgent.isMobileApp){vm.ssoHtmlForm=$sce.trustAsHtml(data.assertion);var deferred=$q.defer();return $timeout(function(){deferred.resolve()}),deferred.promise}if(FeatureStatus.checkFeatureStatus("singleSignOnMobileAppToMobileWeb"))return AuthService.generateTempToken(environment.appId).$promise}}).then(function(data){if(UserAgent.isMobileApp&&data&&data.tempToken)vm.externalAppUrl=appConfig.uiEndpoint+"#/login?tempToken="+data.tempToken+"&redirect="+$scope.externalSso.toLowerCase();else if(vm.autoLaunchSso){var ssoForm=$("#SsoAssertionForm");ssoForm.removeAttr("target"),$timeout(function(){ssoForm.submit()})}})["catch"](function(err){$log.debug(err)})["finally"](function(){$scope.loading=!1})):$scope.loading=!1};vm.submitAssertion=function(){var ssoForm=$("#SsoAssertionForm");ssoForm.submit(),$scope.loading=!0,$timeout(function(){activate()},1e3)},activate()}contractSwitcherController.$inject=["$scope","$log","$sce","Authorization","SSO","UserAgent","FeatureStatus","AuthService","Environment","appConfig","$timeout","$q"],angular.module("insurance").directive("contractSwitcher",contractSwitcher)}(),function(){"use strict";function accumulatorView(){return{restrict:"AE",replace:!0,scope:{accumulators:"=",isTiered:"=",showMessage:"&"},templateUrl:"app/contracts/views/accumulators.tmpl.html",controller:AccumulatorController}}function AccumulatorController($scope){function getTitle(accumulators,isTiered){return!isTiered||accumulators.length<1?"":isTiered?getTieredTitle(accumulators[0]):void 0}function getTieredTitle(accumulator){switch(accumulator.networkStatus.toLowerCase()){case"in":return accumulator.tierValue?accumulator.tierValue.toUpperCase():"IN-NETWORK";case"out":return"OUT-OF-NETWORK";default:return""}}$scope.title=getTitle($scope.accumulators,$scope.isTiered),$scope.showTitle=function(){return $scope.isTiered&&"combined"!==$scope.accumulators[0].networkStatus.toLowerCase()}}angular.module("contracts").directive("accumulatorsView",accumulatorView),AccumulatorController.$inject=["$scope"]}(),function(){"use strict";function filter(){return function(accum){return accum&&accum.isFamily?colors.family:colors.individual}}var module=angular.module("contracts"),colors={individual:"#83C341",family:"#7D67CE"};module.filter("accumulatorColor",["$filter",filter])}(),function(){"use strict";function filter(){return function(accum){if(accum){var d=accum.accumulatorDescription.indexOf(" "),result=accum.accumulatorDescription.substring(d+1,accum.accumulatorDescription.length),res=result.charAt(0).toUpperCase()+result.substring(1,result.length);return res}}}var module=angular.module("contracts");module.filter("accumulatorDesc",["$filter",filter])}(),function(){"use strict";function filter(){return function(accum){return"("===accum.charAt(0)?accum.replace("(","").replace(")",""):void 0}}var module=angular.module("contracts");module.filter("negativeAmount",["$filter",filter])}(),function(){"use strict";function accumulatorTier(){return function(accums,tierValue,network){var findTierValue=tierValue?tierValue.toLowerCase():null,findNetwork=network?network.toLowerCase():"in",matchingAccumulators=_.filter(accums,function(accumulator){var tierValueToCheck=accumulator.tierValue?accumulator.tierValue.toLowerCase():null,networkToCheck=accumulator.networkStatus.toLowerCase();return tierValueToCheck===findTierValue&&networkToCheck===findNetwork});return matchingAccumulators}}angular.module("contracts").filter("accumulatorTier",accumulatorTier)}(),function(){"use strict";function _controller($scope,Benefits,config){$scope.title="Medical Massage",$scope.ashInformationDate=config.ashInformationDate,$scope.getASHDocumentUrl=function(){return Benefits.getContractDocumentByKeywordUrl("ash")}}var module=angular.module("contracts");module.controller("BenefitsMedicalMassageCtrl",["$scope","Benefits","contractsConfig",_controller])}(),function(){"use strict";function benefitsAcupunctureController($scope,Benefits,config){$scope.title="Acupuncture",$scope.ashInformationDate=config.ashInformationDate,$scope.getASHDocumentUrl=function(){return Benefits.getContractDocumentByKeywordUrl("ash")}}angular.module("contracts").controller("BenefitsAcupunctureCtrl",benefitsAcupunctureController),benefitsAcupunctureController.$inject=["$scope","Benefits","contractsConfig"]}(),function(){"use strict";function controller($scope,FeatureStatus){var vm=this;vm.benefitsEnabled=FeatureStatus.checkFeatureStatus("benefits"),vm.eligibilityEnabled=FeatureStatus.checkFeatureStatus("eligibility")}var module=angular.module("contracts");module.controller("BenefitsEligibilityCtrl",["$scope","FeatureStatus",controller])}(),function(){"use strict";var module=angular.module("contracts"),directive=function(FeatureStatus){return{restrict:"A",link:function(scope,elem){var benefitsEligibilityEnabled=FeatureStatus.checkFeatureStatus("benefitsEligibility");if(benefitsEligibilityEnabled){var iframe=elem[0].contentWindow;scope.$on("dtLocationChanged",function(){iframe.$("#innertabs a",iframe.document).remove();var href=iframe.$("#insurance .content a",iframe.document).attr("href");iframe.$("#insurance .content .contactcard",iframe.document).css("cursor","pointer").css("background-color","#DBE4EE").css("background-image","none"),iframe.$("#insurance .content",iframe.document).click(function(){iframe.location.href=href})})}}}};module.directive("datatileBenefitsEligibility",["FeatureStatus",directive])}(),function(){"use strict";var module=angular.module("contracts"),directive=function(FeatureStatus){return{restrict:"A",link:function(scope,elem){var eligibilityEnabled=FeatureStatus.checkFeatureStatus("eligibility");if(eligibilityEnabled){var iframe=elem[0].contentWindow;scope.$on("dtLocationChanged",function(){iframe.$("#innertabs a",iframe.document).remove()})}}}};module.directive("datatileEligibility",["FeatureStatus",directive])}(),angular.module("releaseOfInfo",["services","filters","ngResource","ngRoute"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/release-of-info",{title:"Release of Info",templateUrl:"app/release-of-info/views/release-of-info.html",controller:"ReleaseOfInfoCtrl",controllerAs:"vm",rolesExpression:"blue && isLoggedInPatient",feature:["releaseOfInfo"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function controller($scope,FeatureStatus){var vm=this;vm.releaseOfInfoEnabled=FeatureStatus.checkFeatureStatus("releaseOfInfo")}var module=angular.module("contracts");module.controller("ReleaseOfInfoCtrl",["$scope","FeatureStatus",controller])}(),angular.module("plans",["ngSanitize","services","filters","ngResource","ui.bootstrap"],function($uibTooltipProvider){"use strict";$uibTooltipProvider.options({placement:"top",trigger:"click"})}),function(){"use strict";function benefitsAlignmentFeatureCheck($q,$location,FeatureStatus){var deferred=$q.defer();return FeatureStatus.checkFeatureStatus("benefitsAlignment")?deferred.resolve():$location.path("/insurance/benefits"),deferred.promise}function routeConfiguration($routeProvider){$routeProvider.when("/insurance/plan-benefits",{title:"Plan Benefits",templateUrl:"app/plans/views/plan-benefits.html",controller:"PlansCtrl",roles:["green"],resolve:{benefitsAlignmentFeatureCheck:benefitsAlignmentFeatureCheck}}).when("/insurance/plan-benefits/:type",{title:"Plan Benefits",templateUrl:"app/plans/views/plan-benefits.html",controller:"PlansCtrl",roles:["green"]})}var app=angular.module("app");benefitsAlignmentFeatureCheck.$inject=["$q","$location","FeatureStatus"],app.config(["$routeProvider",routeConfiguration])}(),angular.module("plans").constant("plansConfig",{apiRoutes:{plans:"plans",plansmeta:"plansmeta"}}),function(){"use strict";function controller($scope,$q,$routeParams,$location,Benefits,BenefitCategories,Notifications,usSpinnerService,Contracts,FeatureStatus){function initialize(){usSpinnerService.spin("spinner-fixed"),$q.all([BenefitCategories.getCategories(),Benefits.getPlans(),Contracts.getContracts()]).then(function(data){var categoryData=data[0],plansData=data[1].data;$scope.hasDeductible=_.some(data[2],function(contract){return contract.benefitsSummary.hasDeductible}),shouldShowEnhancedBenefits(plansData)?updateScopeWithEnhancedBenefitsData(categoryData,plansData.plans):redirectToOldBenefitsPage()})["catch"](function(){Notifications.error("<b>Error:</b> We were unable to load plans.")})["finally"](function(){usSpinnerService.stop("spinner-fixed")})}function shouldShowEnhancedBenefits(plansData){return FeatureStatus.checkFeatureStatus("enhancedBenefitsForLargeGroup")?plansData.plans.length>0:plansData.isTiered}function updateScopeWithEnhancedBenefitsData(categoryData,plans){$scope.plans=Benefits.mapPlansIntoCategories(categoryData,plans),$scope.benefitCategories=categoryData,$scope.benefitScheduleUrl=generateBenefitUrl($scope.plans[0].contractId,"schedule"),$scope.benefitSummaryUrl=generateBenefitUrl($scope.plans[0].contractId,"summary")}function redirectToOldBenefitsPage(){$location.path("/insurance/benefits")}function generateBenefitUrl(contractId,type){return Benefits.getBenefitsDocumentUrl(contractId,type)}function isPlanCoveredForCategory(plan,category){return angular.isDefined(plan[category])&&_.size(plan[category])>0}$scope.title="Benefits",$scope.mobileRouteCategory=$routeParams.type,$scope.hasCustomizedBenefits=Benefits.hasCustomizedBenefits(),$scope.isActiveTab=function(category){return $scope.mobileRouteCategory?$scope.mobileRouteCategory===category.type:category.active},$scope.doesCategoryHaveBenefits=function(category){for(var i=0;i<$scope.plans.length;i+=1){var plan=$scope.plans[i];if(isPlanCoveredForCategory(plan,category.type))return!0}return!1},initialize()}angular.module("plans").controller("PlansCtrl",controller),controller.$inject=["$scope","$q","$routeParams","$location","Benefits","BenefitCategories","Notifications","usSpinnerService","Contracts","FeatureStatus"]}(),function(){"use strict";function factory($http,$q,$filter,config,appConfig,Authorization,FeatureStatus){function planToCategoryData(plan,categories){var coverageDetails=$filter("benefitCoverage")(plan),planTemplate={name:plan.description,contractId:plan.contractId,isTiered:isPlanTiered(plan),networkConfig:plan.networkConfig,salesPlanId:plan.salesPlanId};plan.benefitCategories.forEach(function(category){var key=category.category.toLowerCase(),labelsTemplate=$filter("labels")(categories,key);labelsTemplate&&(isNotHidableCategory(key)||areBenefitsForCategoryCovered(coverageDetails,key))&&(planTemplate[key]=benefitsToTierCollections(category.benefits,coverageDetails,labelsTemplate,category.category))});var supplementalLabels=$filter("labels")(categories,supplementalKey);return planTemplate[supplementalKey]=addSupplemental(coverageDetails,supplementalLabels,globalNetworks),planTemplate.isTiered&&removeOutNetworkPropertyForTieredPlans(planTemplate),planTemplate}function removeOutNetworkPropertyForTieredPlans(plan){for(var key in plan)_.isObject(plan[key])&&delete plan[key].outNetwork}function isNotHidableCategory(categoryKey){return-1===hidableBenefitCategories.indexOf(categoryKey)}function areBenefitsForCategoryCovered(coverageDetails,categoryKey){for(var network in coverageDetails)if(coverageDetails.hasOwnProperty(network)){var networkCoverage=coverageDetails[network];if(isNetworkForCategoryCovered(networkCoverage,categoryKey))return!0}return!1}function getAlternateKeyNames(labels){var altKeyMap={};for(var key in labels)labels[key].otherKeys&&labels[key].otherKeys.forEach(function(otherKey){altKeyMap[otherKey]||(altKeyMap[otherKey]=[]),altKeyMap[otherKey].push(key)});return altKeyMap}function getDistinctNonCombinedNetworks(benefits){var statuses=_.map(benefits,"networkStatus");return _.chain(statuses).uniq().map(function(status){return status.toLowerCase()+networkSuffix}).without("combinedNetwork").value()}function tierCollectionWithNetworksSortedByPriority(tierCollection,networks){return networks.forEach(function(network){tierCollection[network]=_.sortBy(tierCollection[network],"priority")}),tierCollection}function updateGlobalNetworksToContain(networks){globalNetworks=_.union(globalNetworks,networks)}function benefitsToTierCollections(benefits,coverage,labels,category){var altKeyMap=getAlternateKeyNames(labels),networks=getDistinctNonCombinedNetworks(benefits);updateGlobalNetworksToContain(networks);var tierCollection={};return benefits.forEach(function(benefit){var networkKey=benefit.networkStatus.toLowerCase()+networkSuffix,benefitKey=benefit.name.replace(whitespaceRegex,""),keys=altKeyMap[benefitKey]||[benefitKey];keys.forEach(function(key){addTierBenefitsToCollection(tierCollection,benefit,key,networkKey,labels,coverage,category)})}),tierCollectionWithNetworksSortedByPriority(tierCollection,networks)}function addTierBenefitsToCollection(tierCollection,benefit,benefitKey,networkKey,labels,coverage,category){var groupedBenefitValues=_.groupBy(benefit.benefitValues,function(value){return null===value.tierName?"null":value.tierName.replace(whitespaceRegex,"").toLowerCase()});angular.forEach(groupedBenefitValues,function(benefitValues,tierName){function addTierValue(networkKey,tierKey){initializeNetworkWithCoverage(tierCollection,networkKey,tierKey,labels,coverage),tierCollection[networkKey][benefitKey]&&(tierCollection[networkKey][benefitKey][tierKey]=$filter("benefitValue")(benefitValues,benefitKey)),benefitKey===emergencyRoomKey&&tierCollection[networkKey][emergencyRoomKey]&&(tierCollection[networkKey][benefitKey][tier2Key]="Covered at the Tier 1 value"),benefitKey===preventativeKey&&tierCollection[networkKey][preventativeKey]&&(tierCollection[networkKey][benefitKey][tier2Key]=$filter("benefitValue")(benefitValues,benefitKey))}var tierKey=tierName;"null"===tierKey&&(tierKey=groupedBenefitValues.tier1?"tier2":"tier1"),"combinedNetwork"===networkKey&&"rx"!==category.toLowerCase()?(addTierValue("inNetwork",tierKey),"tier2"!==tierKey&&groupedBenefitValues.tier2||addTierValue("outNetwork","tier1")):addTierValue(networkKey,tierKey)})}function initializeNetworkWithCoverage(tierCollection,networkKey,tierKey,labels,coverage){if(!tierCollection[networkKey]){var template=angular.copy(labels);for(var categoryKey in template)categoryKey.charAt(0)===coverageKeyPrefix&&coverage[networkKey]&&coverage[networkKey][categoryKey]&&angular.isDefined(coverage[networkKey][categoryKey][tierKey])&&(template[categoryKey][tierKey]=coverage[networkKey][categoryKey][tierKey],angular.isDefined(template[categoryKey][tier2Key])&&(template[categoryKey][tier2Key]=coverage[networkKey][categoryKey][tierKey]));tierCollection[networkKey]=template}}function addSupplemental(coverage,labels,globalNetworks){var tierCollection={};return globalNetworks.forEach(function(networkKey){var unsortedData={};initializeNetworkWithCoverage(unsortedData,networkKey,"tier1",labels,coverage),tierCollection[networkKey]=_.sortBy(unsortedData[networkKey],"priority")}),tierCollection}function isNetworkForCategoryCovered(networkCoverage,categoryKey){var isCovered=!1,benefitKey=coverageKeyPrefix+categoryKey;return networkCoverage[benefitKey]&&(isCovered="yes"===networkCoverage[benefitKey].tier1.toLowerCase()),isCovered}function checkBenefitValuesForTiered(benefitValues){return _.some(benefitValues,function(benefitValue){return null!==benefitValue.tierName})}function benefitsAreTiered(benefits){return _.some(benefits,function(benefit){return checkBenefitValuesForTiered(benefit.benefitValues)})}function isPlanTiered(plan){return _.some(plan.benefitCategories,function(category){var key=category.category.toLowerCase();return"medical"===key&&benefitsAreTiered(category.benefits)})}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),headerConfig={headers:{"x-api-version":2}},benefitsResource=[apiEndpoint,config.apiRoutes.plans].join("/"),whitespaceRegex=new RegExp(/\s/g),supplementalKey="supplemental",emergencyRoomKey="EmergencyRoom",preventativeKey="Preventative",tier2Key="tier2",coverageKeyPrefix="_",networkSuffix="Network",hidableBenefitCategories=["rx"],globalNetworks=[],service={};return service.getPlans=function(){return $http.get(benefitsResource,headerConfig)},service.mapPlansIntoCategories=function(categories,plans){return _.map(plans,function(plan){return planToCategoryData(plan,categories)})},service.hasCustomizedBenefits=function(){return FeatureStatus.checkFeatureStatus("authorizations")?Authorization.isGentex()||Authorization.isGvsu():!1},service.getBenefitsDocumentUrl=function(contractId,documentType){return apiEndpoint+"/ContractDocument?contractId="+contractId+"&documentType="+documentType},service.getContractDocumentByKeywordUrl=function(keyword){return apiEndpoint+"/ContractDocument?keyword="+keyword},service}angular.module("plans").factory("Benefits",factory),factory.$inject=["$http","$q","$filter","plansConfig","appConfig","Authorization","FeatureStatus"]}(),function(){"use strict";function factory($resource){var categoriesWithLabels=$resource("app/plans/data/benefit-categories-with-labels.json"),service={};return service.getCategories=function(){return categoriesWithLabels.query().$promise},service}angular.module("plans").factory("BenefitCategories",factory),factory.$inject=["$resource"]}(),function(){"use strict";function PlanService($http,$q,$filter,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),hmoProviderNetwork="hmo",service={};return service.getPlanImgSrc=function(id){var url=[apiEndpoint,config.apiRoutes.plansmeta,id].join("/"),deferred=$q.defer(),promise=$http.get(url);return promise.then(function(response){var plan=_.find(response.data,function(plan){return plan.providerNetwork.toLowerCase()===hmoProviderNetwork});plan?deferred.resolve($filter("planImage")(plan)):deferred.reject(null)}),promise["catch"](function(){deferred.reject(null)}),deferred.promise},service}angular.module("plans").factory("Plan",PlanService),PlanService.$inject=["$http","$q","$filter","plansConfig","appConfig"]}(),function(){"use strict";function benefitValueFilter($filter){function formatBenefitValue(benefitValue,isPreventative){var result="--";return"copay"===benefitValue.name.toLowerCase()?result=formatCopayBenefit(benefitValue,isPreventative):"coinsurance"===benefitValue.name.toLowerCase()&&(result=formatCoinsuranceBenefit(benefitValue,isPreventative)),result}function formatCopayBenefit(benefitValue,isPreventative){if(shouldReturnFree(isPreventative,benefitValue.value))return freeValue;var name=benefitValue.name.toLowerCase(),displayName=name.charAt(0).toUpperCase()+name.substring(1,name.length);return $filter("currencyNoCents")(benefitValue.value)+" "+displayName}function formatCoinsuranceBenefit(benefitValue,isPreventative){if(shouldReturnFree(isPreventative,benefitValue.value))return freeValue;var name=benefitValue.name.toLowerCase(),displayName=name.charAt(0).toUpperCase()+name.substring(1,name.length);return $filter("number")(benefitValue.value)+"% "+displayName}function formatLimitBenefit(limit,benefitValues,isPreventative){var benefits=[],nonLimitBenefitValues=_.sortBy(_.reject(benefitValues,isBenefitOfTypeLimit),function(benefit){return benefit.precedenceOrder});return benefits.push(formatBenefitValue(nonLimitBenefitValues.shift(),isPreventative)+" "+formatLimit(limit,!0)),benefits.push(formatBenefitValue(nonLimitBenefitValues.shift(),isPreventative)+" "+formatLimit(limit,!1)),benefits}function formatLimit(benefitValue,isFirstVisits){return isFirstVisits?"(1st "+benefitValue.value+" visits)":"(after "+benefitValue.value+" visits)"}function shouldReturnFree(isPreventative,value){var number=parseInt(value);return isPreventative&&0===number}function isBenefitOfTypeLimit(benefit){return"limit"===benefit.name.toLowerCase()}var freeValue="Free";return function(benefitValues,benefitKey){var isPreventative="preventative"===benefitKey.toLowerCase(),result="--",limit=_.find(benefitValues,isBenefitOfTypeLimit),benefitValue=_.minBy(benefitValues,function(benefit){return benefit.precedenceOrder});return limit?result=formatLimitBenefit(limit,benefitValues,isPreventative):benefitValues&&benefitValues.length>0&&(result=formatBenefitValue(benefitValue,isPreventative)),result}}angular.module("plans").filter("benefitValue",benefitValueFilter),benefitValueFilter.$inject=["$filter"]}(),function(){"use strict";function filter($filter){function initializeCollection(networkKey,collection){collection[networkKey]||(collection[networkKey]=angular.copy(template))}function setTierValue(collection,networkKey,coverageKey,tierKey,value){initializeCollection(networkKey,collection),collection[networkKey][coverageKey][tierKey]=value}function addCoverageDetailsByTier(networkKey,coverageKey,benefit,collection){if(benefit&&benefit.benefitValues){var groupedByTier=_.groupBy(benefit.benefitValues,function(value){return null===value.tierName?"null":value.tierName.replace(whitespaceRegex,"").toLowerCase()});angular.forEach(groupedByTier,function(benefitValues,tierName){var tierKey=tierName;"null"===tierKey&&(tierKey=groupedByTier.tier1?"tier2":"tier1");var value=$filter("yesNo")(benefitValues.length>0,!0);"combinedNetwork"===networkKey?(setTierValue(collection,"inNetwork",coverageKey,tierKey,value),"tier2"!==tierKey&&groupedByTier.tier2||setTierValue(collection,"outNetwork",coverageKey,tierKey,value)):setTierValue(collection,networkKey,coverageKey,tierKey,value)})}}function addMedicalCoverageDetails(benefits,collection,categoryKey,categoryName){var inNetwork=_.find(benefits,{networkStatus:"IN",name:categoryName}),outNetwork=_.find(benefits,{networkStatus:"OUT",name:categoryName}),combinedNetwork=_.find(benefits,{networkStatus:"COMBINED",name:categoryName});addCoverageDetailsByTier("inNetwork",coverageKeyPrefix+categoryKey,inNetwork,collection),addCoverageDetailsByTier("outNetwork",coverageKeyPrefix+categoryKey,outNetwork,collection),addCoverageDetailsByTier("combinedNetwork",coverageKeyPrefix+categoryKey,combinedNetwork,collection)}function addVisionCoverageDetails(collection){var categoryKey=coverageKeyPrefix+"vision",networkKey="inNetwork";initializeCollection(networkKey,collection),collection[networkKey][categoryKey].tier1="Yes"}function addCoverageDetails(categoryKey,benefits,collection){var inNetworkBenefits=_.find(benefits,{networkStatus:"IN"}),outNetworkBenefits=_.find(benefits,{networkStatus:"OUT"}),combinedNetworkBenefits=_.find(benefits,{networkStatus:"COMBINED"});addCoverageDetailsByTier("inNetwork",coverageKeyPrefix+categoryKey,inNetworkBenefits,collection),addCoverageDetailsByTier("outNetwork",coverageKeyPrefix+categoryKey,outNetworkBenefits,collection),addCoverageDetailsByTier("combinedNetwork",coverageKeyPrefix+categoryKey,combinedNetworkBenefits,collection)}function addPlanTypeCoverage(plan,collection){var networkKey="inNetwork",hsaKey=coverageKeyPrefix+"priorityHSA",hraKey=coverageKeyPrefix+"priorityHRA",hasHsa=plan.marketingName===hsaMarketingName||!!_.find(plan.benefitCategories,{category:"HSA"}),hasHra=plan.marketingName===hraMarketingName||!!_.find(plan.benefitCategories,{category:"HRA"});collection.inNetwork&&(collection[networkKey][hsaKey].tier1=plan.marketingName||hasHsa?$filter("yesNo")(hasHsa,!0):"--",collection[networkKey][hraKey].tier1=plan.marketingName||hasHra?$filter("yesNo")(hasHra,!0):"--")}var coverageKeyPrefix="_",hsaMarketingName="PRIORITY_HSA",hraMarketingName="PRIORITY_HRA",template={_preventative:{tier1:"No"},_vision:{tier1:"No"},_rx:{tier1:"No"},_contraceptive:{tier1:"--"},_acupuncture:{tier1:"No"},_medicalMassage:{tier1:"No"},_priorityHSA:{tier1:"--"},_priorityHRA:{tier1:"--"}},whitespaceRegex=new RegExp(/\s/g);return function(plan){for(var coverageCollection={},i=0;i<plan.benefitCategories.length;i+=1){var categoryData=plan.benefitCategories[i],categoryKey=categoryData.category.toLowerCase();switch(categoryKey){case"medical":addMedicalCoverageDetails(categoryData.benefits,coverageCollection,"preventative","Preventative"),addMedicalCoverageDetails(categoryData.benefits,coverageCollection,"acupuncture","Acupuncture"),addMedicalCoverageDetails(categoryData.benefits,coverageCollection,"medicalMassage","Medical Massage");break;case"vision":addVisionCoverageDetails(coverageCollection);break;default:addCoverageDetails(categoryKey,categoryData.benefits,coverageCollection)}}return addPlanTypeCoverage(plan,coverageCollection),coverageCollection}}var module=angular.module("plans");module.filter("benefitCoverage",["$filter",filter])}(),function(){"use strict";function filter(){return function(categoriesWithLabels,categoryType){var foundCategory=_.find(categoriesWithLabels,function(category){return category.type===categoryType});return foundCategory?foundCategory.labels:null}}var module=angular.module("plans");module.filter("labels",[filter])}(),function(){"use strict";function filter(){var idPrefix="benefit-",whitespaceRegex=new RegExp(/\s/g);return function(benefitLabel){var id="";return benefitLabel&&(id=idPrefix+benefitLabel.replace(whitespaceRegex,"").toLowerCase()),id}}var module=angular.module("plans");module.filter("benefitId",[filter])}(),function(){"use strict";function PlanImageFilter(){function isWestMichiganPlan(networkConfig){return networkConfig?-1!==westMiPrtnrsConfigs.indexOf(networkConfig.toLowerCase()):null}function isPlanProviderHMO(providerNetwork){return providerNetwork.toLowerCase()===hmoProviderNetwork}function getWestMIPartnerImageSrc(plan){var planDesign=plan.planDesign.toLowerCase();return planDesign===hsaPlanDesign?"app/contracts/assets/images/wmip-hmo-hsa.png":planDesign===extrasPlanDesign?"app/contracts/assets/images/wmip-extras-hmo.png":"app/contracts/assets/images/wmip-hmo.png"}function isSpectrumPartnersPlan(networkConfig){return networkConfig?networkConfig.toLowerCase()===spectrumPrtnrsConfig:null}function getSpectrumPartnersImageSrc(plan){var planDesign=plan.planDesign.toLowerCase();return planDesign===hsaPlanDesign?"app/contracts/assets/images/shp-hmo-hsa.png":planDesign===holisticPlanDesign?"app/contracts/assets/images/shp-hmo-holistic.png":"app/contracts/assets/images/shp-hmo.png"}var hmoProviderNetwork="hmo",hsaPlanDesign="hsa",extrasPlanDesign="extras",holisticPlanDesign="holistic",spectrumPrtnrsConfig="spectrum_prtnrs",westMiPrtnrsConfigs=["west_mi_prtnrs_gc_phcs_wrap","west_mi_prtnrs_phcs_wrap"];return function(plan){return isWestMichiganPlan(plan.networkConfig)&&isPlanProviderHMO(plan.providerNetwork)?getWestMIPartnerImageSrc(plan):isSpectrumPartnersPlan(plan.networkConfig)&&isPlanProviderHMO(plan.providerNetwork)?getSpectrumPartnersImageSrc(plan):null}}angular.module("plans").filter("planImage",PlanImageFilter)}(),function(){"use strict";function BenefitController($scope,$sce,Authorization){function getNetworkTierHeader(category,networkConfig,isTiered,tier){if(1===tier&&"medical"===category&&isTiered){if("SPECTRUM_PRTNRS"===networkConfig)return"Spectrum Partners";if("WEST_MI_PRTNRS_PHCS_WRAP"===networkConfig||"WEST_MI_PRTNRS_GC_PHCS_WRAP"===networkConfig)return"West MI Partners";
}if(2===tier&&"medical"===category&&isTiered){if("SPECTRUM_PRTNRS"===networkConfig)return"All Others In-Network";if("WEST_MI_PRTNRS_PHCS_WRAP"===networkConfig||"WEST_MI_PRTNRS_GC_PHCS_WRAP"===networkConfig)return"All Others In-Network"}}function getNetworkTitle(network,isGentex,category,networkConfig,isTiered){if("medical"===category&&!isTiered&&!isGentex&&"inNetwork"===network){if("SPECTRUM_PRTNRS"===networkConfig)return $sce.trustAsHtml("In-Network Benefits </br>Spectrum Health Partners");if("WEST_MI_PRTNRS_PHCS_WRAP"===networkConfig||"WEST_MI_PRTNRS_GC_PHCS_WRAP"===networkConfig)return $sce.trustAsHtml("In-Network Benefits </br>West MI Partners")}return"rx"===category?"Participating Retail Pharmacies":"supplemental"===category?"":isGentex&&"medical"===category?getKeyAccountNetworkTitle(network):getGenericNetworkTitle(network)}function getKeyAccountNetworkTitle(network){return"inNetwork"===network?"PREFERRED":"ALTERNATIVE"}function getGenericNetworkTitle(network){return"inNetwork"===network?"IN-NETWORK BENEFITS":"OUT-OF-NETWORK"}function isBenefitCovered(benefit){var isCovered=!0;return benefit.tier1&&"--"!==benefit.tier1.toLowerCase()&&"no"!==benefit.tier1.toLowerCase()||(isCovered=!1),isCovered}$scope.showTiered=$scope.isTiered&&"medical"===$scope.category&&"inNetwork"===$scope.network,$scope.isGentex=Authorization.isGentex(),$scope.networkTitle=getNetworkTitle($scope.network,$scope.isGentex,$scope.category,$scope.networkConfig,$scope.isTiered),$scope.tier1Header=getNetworkTierHeader($scope.category,$scope.networkConfig,$scope.isTiered,1),$scope.tier2Header=getNetworkTierHeader($scope.category,$scope.networkConfig,$scope.isTiered,2),$scope.combinedPlanIds=[200426,200430,200438,200442,200450,200451,200452,200453,200454,200455,200468,200472,200485,200486,200505,200522,200524,200526,200556,200572,200576,200581,200585,200590,200591,200592,200593,200594,200595,200602,200606,209629,209630,209631,209632,209641,209642,209643,209644,209645,209646,209658,209659,209660,209663,209664,209665,209666,209675,209676,209677,209678,209679,209691,209692,209693,209696,209697,209698,209699,209708,209709,209710,209711,209712,209725,209726,209729,209730,209731,209732,209733,209734,209741,209743,209745,209753,209754,209755,209764,209765,209766,209767,209793,209794,209795,209796,210054,210055,210085,210086,210088],$scope.isLimitBenefit=function(benefit){return angular.isArray(benefit.tier1)?-1!==benefit.tier1[0].indexOf("visits")&&-1!==_.indexOf($scope.combinedPlanIds,parseInt($scope.salesPlanId)):!1},$scope.showLink=function(benefit){return angular.isDefined(benefit.link)&&"yes"===benefit.tier1.toLowerCase()},$scope.displayBenefit=function(benefit){var display=!0;return benefit.hideWhenNotCovered===!0&&(display=isBenefitCovered(benefit)),display},$scope.getTierValue=function(tierValue){return tierValue&&"string"!=typeof tierValue?$sce.trustAsHtml(tierValue[0]+"</br>"+tierValue[1]):tierValue}}function directive(){return{restrict:"AE",replace:!0,scope:{benefits:"=",network:"=",category:"=",isTiered:"=",salesPlanId:"=",networkConfig:"="},templateUrl:function(element,attrs){return"mobile"===attrs.templateType?"app/plans/views/benefits-mobile.html":"app/plans/views/benefits-table.html"},controller:BenefitController}}var module=angular.module("plans");BenefitController.$inject=["$scope","$sce","Authorization"],module.directive("benefitsList",[directive])}(),angular.module("claims",["services","filters","ngResource"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/claims",{title:"Claims",templateUrl:"app/claims/views/claims.html",controller:"ClaimsCtrl",roles:["green"]}).when("/insurance/claims",{title:"Claims",templateUrl:"app/claims/views/claims.html",controller:"ClaimsCtrl",roles:["green"]}).when("/costs/claims",{title:"Claims",templateUrl:"app/claims/views/claims.html",controller:"ClaimsCtrl",roles:["green"]}).when("/insurance/claims/:claimId/:claimType?",{title:"Claim Details",templateUrl:"app/claims/views/claim-details.html",controller:"ClaimDetailsCtrl",roles:["green"]}).when("/insurance/claim-details/:claimId/:claimType",{title:"Claim Details",templateUrl:"app/claims/views/claim-details.html",controller:"ClaimDetailsCtrl",roles:["green"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("claims").constant("claimsConfig",{apiRoutes:{claims:"claims"}}),function(){"use strict";function claimsController($scope,Contracts,Notifications,Claims,$document,Moment,dentalService){var today=new Date,minDate=new Moment("2012-08-01").toDate(),beginDate=(new Moment).subtract(6,"month").toDate();$scope.title="Claims",$scope.typeaheadClaims=[],$scope.allClaims=[],$scope.claims=[],$scope.firstLoad=!0,$scope.loading=!1,$scope.dateRange={startDate:beginDate,endDate:today},$scope.datePickerConfig={mode:"month",minMode:"month",maxMode:"year",maxDate:$scope.dateRange.endDate||today,minDate:minDate,showWeeks:!1},$scope.datePickerEndDateConfig={mode:"month",minMode:"month",maxMode:"year",maxDate:today,minDate:$scope.dateRange.startDate,showWeeks:!1},$scope.$watch(function(){return $scope.dateRange},function(newVal,oldVal){newVal!==oldVal&&($scope.datePickerConfig.maxDate=newVal.endDate,$scope.datePickerEndDateConfig.minDate=newVal.startDate)},!0),$scope.cancelClick=function($event){$event&&($event.preventDefault(),$event.stopPropagation())},$scope.validate=function(){(!$scope.dateRange.startDate||$scope.dateRange.startDate<minDate)&&($scope.dateRange.startDate=minDate),(!$scope.dateRange.endDate||$scope.dateRange.endDate>today)&&($scope.dateRange.endDate=today),$scope.dateRange.endDate<$scope.dateRange.startDate&&($scope.dateRange.endDate=new Moment($scope.dateRange.startDate).add(1,"month").toDate())},$scope.apply=function($event){$scope.cancelClick($event),$scope.getClaims(),$scope.close()},$scope.open=function($event){$scope.cancelClick($event),$scope.opened||($scope.opened=!0)},$scope.close=function($event){$scope.cancelClick($event),$scope.opened=!1},$scope.touchCarousel={claimTypes:{loop:!1,margin:10,responsiveClass:!0,nav:!1,dots:!1,responsive:{0:{items:3},600:{items:3},1e3:{items:5}}}},$scope.claimTypes=Claims.getClaimTypes(),$scope.claimFilters={claimType:{title:"All",active:!0,types:[]}},$scope.changeClaimType=function(claimType){_.map($scope.claimTypes,function(x){x.active=!1}),claimType.active=!0,$scope.claimFilters.claimType=claimType,$scope.filterClaims()},$scope.showDeltaDental=function(){var correctHeaders=_.includes(["All","Dental"],$scope.claimFilters.claimType.title),isDelta=dentalService.checkForDeltaDental($scope.getProductOfferings());return correctHeaders&&isDelta},$scope.filterClaims=function(){$scope.claimFilters.claimType.types.length>0?$scope.claims=_.filter($scope.allClaims,function(x){return _.includes($scope.claimFilters.claimType.types,x.claimType)}):$scope.claims=$scope.allClaims,$scope.typeaheadClaims=[],$scope.claims.forEach(function(claim){claim.providerFullName&&$scope.typeaheadClaims.push(claim.providerFullName),claim.placeOfService&&$scope.typeaheadClaims.push(claim.placeOfService),claim.claimId&&$scope.typeaheadClaims.push(claim.claimId),claim.rxClaim&&(claim.rxClaim.drugName&&$scope.typeaheadClaims.push(claim.rxClaim.drugName),claim.rxClaim.pharmacy&&$scope.typeaheadClaims.push(claim.rxClaim.pharmacy))}),$scope.typeaheadClaims=_.uniq($scope.typeaheadClaims).sort()},$scope.toggleInfo=function(claim){"PENDING"!==claim.claimStatus&&(claim.expanded=!claim.expanded)},Contracts.getContracts().then(function(contracts){$scope.contracts=contracts},function(){Notifications.error("<b>Error:</b> We were unable to load contracts.")}),$scope.getClaims=function(start,end,append){start="undefined"!=typeof start?start:$scope.dateRange.startDate,end="undefined"!=typeof end?end:$scope.dateRange.endDate,append="undefined"!=typeof append?append:!1,$scope.isLoading=!0,$scope.loading=!0,Claims.getClaims(new Moment(start).format(),new Moment(end).format()).$promise.then(function(claims){$scope.firstLoad=!1,append?$scope.allClaims=_.chain(_.union($scope.allClaims,claims)).uniq(!1,function(claim){return claim.claimId}).value():$scope.allClaims=claims,$scope.allClaims=_.chain($scope.allClaims).sortBy(function(claim){return claim.claimId}).sortBy(function(claim){return claim.serviceDate}).value().reverse(),$scope.filterClaims(),$scope.isLoading=!1,$scope.loading=!1},function(){$scope.isLoading=!1,$scope.loading=!1,$scope.firstLoad=!1,Notifications.error("<b>Error:</b> We were unable to load claims.")})},$scope.getMoreClaims=function(){var end=$scope.dateRange.startDate,start=new Moment($scope.dateRange.startDate).subtract(6,"months").toDate();minDate>start&&(start=minDate),$scope.getClaims(start,end,!0),$scope.dateRange.startDate=start},$scope.getClaims(),$scope.isPreviousDateSameMonthYear=function(itemDate,claims,index){function dateWithoutTimezone(dte){var strippedDate=dte.replace(/T.*$/,""),date=new Date(strippedDate);return date.setDate(date.getDate()+1),date}if(index>0){var currentDate=dateWithoutTimezone(itemDate),prevDate=dateWithoutTimezone(claims[index-1].serviceDate);return currentDate.getMonth()===prevDate.getMonth()&&currentDate.getYear()===prevDate.getYear()}return!1},$scope.displayShowMore=function(){return $scope.dateRange.startDate>minDate},$scope.getProductOfferings=function(){var returnContracts;if($scope.contracts&&$scope.contracts.length>0){var productOffering=$scope.contracts[0].productOffering;returnContracts=productOffering?productOffering:null}return returnContracts}}angular.module("claims").controller("ClaimsCtrl",claimsController),claimsController.$inject=["$scope","Contracts","Notifications","Claims","$document","Moment","dentalService"]}(),function(){"use strict";function ClaimDetailCtrl($scope,Notifications,Claims,$routeParams,usSpinnerService,UserAgent,Profile,Users){function initialize(){$scope.isLoading=!0;var userPromise=Profile.get();userPromise.then(function(user){currentUser=user,$scope.isGoPaperless=currentUser.isGoPaperless,getClaimDetails()},function(){currentUser=Users.currentUser.get(),$scope.isGoPaperless=currentUser.isGoPaperless,getClaimDetails()}),userPromise["catch"](function(){currentUser=Users.currentUser.get(),$scope.isGoPaperless=currentUser.isGoPaperless,getClaimDetails()})}function getClaimDetails(){var promise=Claims.getClaimDetails($scope.claimId,$scope.claimType).$promise;promise.then(function(claimDetails){if($scope.waiting4EOB=!0,$scope.loading=!1,$scope.isLoading=!1,$scope.claim=claimDetails,$scope.showGoPaperlessView){$scope.loadingPDF=!0;var eobPromise=Claims.getEobUrl($scope.claimId).$promise;eobPromise.then(function(response){$scope.waiting4EOB=!0,$scope.eobUrl=response},function(){$scope.waiting4EOB=!1,$scope.eobUrl=""}),eobPromise["catch"](function(){$scope.isLoading=!1,$scope.waiting4EOB=!1,$scope.eobUrl=""}),eobPromise["finally"](function(){$scope.loadingPDF=!1})}}),promise["catch"](function(){usSpinnerService.stop("spinner-main"),$scope.loading=!1,Notifications.error("<b>Error:</b> We were unable to load claim.")})}function setGoPaperlessValue(goPaperlessValue){if(currentUser.isMember){var gopaperless=$scope.isGoPaperless,promise=Profile.post({isGoPaperless:goPaperlessValue});usSpinnerService.spin("spinner-main"),promise.then(function(){usSpinnerService.stop("spinner-main"),$scope.isGoPaperless=goPaperlessValue,currentUser.isGoPaperless=goPaperlessValue,Users.currentUser.set(currentUser)}),promise["catch"](function(){usSpinnerService.stop("spinner-main"),$scope.isGoPaperless=gopaperless,currentUser.isGoPaperless=gopaperless})}}var currentUser={};$scope.claimId=$routeParams.claimId,$scope.claimType=$routeParams.claimType,$scope.loading=!0,$scope.waiting4EOB=!1,$scope.deviceIsAndroid=UserAgent.deviceIsAndroid,$scope.showGoPaperlessView="RX"!==$scope.claimType&&"MEDRX"!==$scope.claimType,$scope.setGoPaperlessValue=setGoPaperlessValue,initialize()}angular.module("claims").controller("ClaimDetailsCtrl",ClaimDetailCtrl),ClaimDetailCtrl.$inject=["$scope","Notifications","Claims","$routeParams","usSpinnerService","UserAgent","Profile","Users"]}(),function(){"use strict";function service($http,$q,$resource,config,appConfig,$localStorage){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,config.apiRoutes.claims].join("/"),resourceClaimTypes=$resource("app/claims/data/claim-types.json"),claimsResource=$resource(route),global=this;global.getClaims=function(startDate,endDate){var claimsData=claimsResource.query({startDate:startDate,endDate:endDate});return claimsData},global.getClaimDetails=function(claimId,claimType){return $resource([apiEndpoint,config.apiRoutes.claims,":claimType",":claimId"].join("/"),{claimType:claimType,claimId:claimId}).get()},global.getClaimTypes=function(){return resourceClaimTypes.query()},global.getEobUrl=function(claimId){var serviceUrl=[route,"eob",claimId].join("/");$localStorage.has("xsrfHeader")&&(serviceUrl=serviceUrl+"?xsrf="+$localStorage.get("xsrfHeader"));var deferred=$q.defer();return $http({url:serviceUrl,method:"GET",cache:!0}).success(function(){deferred.resolve(serviceUrl)}).error(function(){deferred.reject("")}),{$promise:deferred.promise}}}var module=angular.module("claims");module.service("Claims",["$http","$q","$resource","claimsConfig","appConfig","$localStorage",service])}(),angular.module("pcp",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/insurance/pcp",{title:"Primary Care Provider",templateUrl:"app/pcp/views/pcp.html",controller:"PcpCtrl",roles:["blue","green"]}).when("/pcp",{title:"Primary Care Provider",templateUrl:"app/pcp/views/pcp.html",controller:"PcpCtrl",roles:["blue","green"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("pcp").constant("pcpConfig",{}),function(){"use strict";function controller($scope,marketingConfig,PrimaryCare,Notifications,$url){$scope.getAddressLines=function(address){if(!address)return"";var lines=[address.addressLine1];return address.addressLine2&&lines.push(address.addressLine2),lines.push([address.city+",",address.state,address.zipCode].join(" ")),lines};var notFoundMessage="Our records show that you haven't named a primary care doctor or other primary medical care provider.";$scope.marketingKeys=marketingConfig.marketingContentKeys,$scope.getMapUrl=function(loc){return $url.mapAddressUrl(loc)},$scope.isLoading=!0,PrimaryCare.getPcp().$promise.then(function(pcp){$scope.isLoading=!1,$scope.pcp=pcp},function(error){$scope.isLoading=!1,404===error.status?Notifications.warn(notFoundMessage):Notifications.error("<b>Error:</b> We were unable to load your PCP information.")})}var module=angular.module("pcp");module.controller("PcpCtrl",["$scope","marketingConfig","PrimaryCare","Notifications","$url",controller])}(),function(){"use strict";function service($resource,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,"providers"].join("/"),pcpResource=$resource(route),pcpResourceStatic=$resource("../data/pcp.json");this.getPcp=function(){return pcpResource.get()},this.getPcpStatic=function(){return pcpResourceStatic.get()}}var module=angular.module("pcp");module.service("PrimaryCare",["$resource","pcpConfig","appConfig",service])}(),function(){"use strict";function pcpNameFilter(){return function(pcp){if(pcp){var pieces=_.compact([pcp.firstName,pcp.middleName,pcp.lastName]),name=pieces.join(" ");return(pcp.firstName||pcp.lastName)&&pcp.title&&pcp.title.length&&(name+=", "+pcp.title),name}return""}}var module=angular.module("pcp");module.filter("pcpName",[pcpNameFilter])}(),angular.module("marketing",["services","filters"]),angular.module("marketing").constant("marketingConfig",{marketingContentKeys:{home:"pcp-marketing-home",missing:"pcp-marketing-missing"}}),function(){"use strict";function service($resource,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,"marketingcontent/:id"].join("/"),marketingResource=$resource(route);this.getMarketingContent=function(contentKey){return marketingResource.get({id:contentKey})}}var module=angular.module("marketing");module.service("MarketingContent",["$resource","marketingConfig","appConfig",service])}(),function(){"use strict";function directive(MarketingContent){return{restrict:"AE",replace:!1,link:function(scope,el,attr){function setContent(html){isHtml?el.html(html):attr.$set(target,html)}var content=el.html(),id=attr.marketingContent,loadingText=attr.loadingText,defaultProp="content",prop=attr.key||defaultProp,target=attr.target||targets.html,isHtml=!target||target===targets.html;!isHtml&&attr[target]&&(content=attr[target]),setContent(loadingText||""),MarketingContent.getMarketingContent(id).$promise.then(function(content){content[prop]&&(content=content[prop]),setContent(content)},function(){setContent(content)})}}}var module=angular.module("signup"),targets={html:"html",popover:"popover",tooltip:"tooltip"};module.directive("marketingContent",["MarketingContent",directive])}(),angular.module("pages",["services","filters"]),angular.module("pages").constant("pagesConfig",{}),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/pages/:pageKey",{title:"confidential",templateUrl:"app/pages/views/pages.html",controller:"PagesCtrl"})}var app=angular.module("pages");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function controller($scope,$routeParams){$scope.url="app/pages/views/"+$routeParams.pageKey+".html"}var module=angular.module("pages");module.controller("PagesCtrl",["$scope","$routeParams",controller])}(),angular.module("find-a-doctor",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/find-a-doctor",{title:"Find A Doctor",templateUrl:"app/find-a-doctor/views/find-a-doctor.html",controller:"FindADoctorCtrl",controllerAs:"fad"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function controller($scope,OldMemberCenterService,$timeout){function enableButton(){$scope.buttonDisabled=!1}function goBackToOldMemberCenter(destination){$scope.buttonDisabled=!0,$timeout(enableButton,2e4),OldMemberCenterService.goBackToOldMemberCenter(destination)}this.shLink="https://findadoctor.spectrumhealth.org/#/",$scope.buttonDisabled=!1,$scope.backToOMC=goBackToOldMemberCenter}var module=angular.module("find-a-doctor");module.controller("FindADoctorCtrl",["$scope","OldMemberCenterService","$timeout",controller])}(),angular.module("physicians",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/physicians",{title:"Physician",templateUrl:"app/physicians/views/physicians.html",controller:"PhysiciansCtrl"}).when("/physicians/search/",{title:"Physician",templateUrl:"app/physicians/views/physicians-list.html",controller:"PhysiciansSearchCtrl"}).when("/physicians/:physicianId",{title:"Physician",templateUrl:"app/physicians/views/physician-detail.html",controller:"PhysiciansCtrl"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("physicians").constant("physiciansConfig",{apiRoutes:{physicians:"/physicians"}}),function(){"use strict";function controller($scope,$routeParams,Physicians,Notifications,usSpinnerService,Specialties,$location){$scope.title="Physician",$scope.searchLastName="",$scope.loading=!0,$scope.searchFirstName="",$scope.searchLastName="",$scope.searchZipCode="",$scope.searchGender="",$scope.searchSpecialistsZipCode="",$scope.searchPrimaryCareZipCode="",$scope.specialtyPlaceholder="(Specialties) Loading...",$scope.specialties=[],$scope.specialArray=[];var specialty="",isValid=!1;$scope.genderList=["Either","Male","Female"];var getPhysicianFromRSL=function(Physicians){Physicians.getPhysician({id:$routeParams.physicianId}).$promise.then(function(physician){$scope.loading=!1,$scope.physician=physician,usSpinnerService.stop("spinner-main")},function(){$scope.loading=!1,usSpinnerService.stop("spinner-main"),Notifications.error("Error: Failed to load physicians information.")})},getSpecialtiesFromRSL=function(Specialties){Specialties.getSpecialties().$promise.then(function(specialties){$scope.specialArray=specialties;for(var i=0,l=$scope.specialArray.length;l>i;i+=1)"0"!==$scope.specialArray[i].title&&$scope.specialties.push($scope.specialArray[i]);$scope.specialtyPlaceholder="Specialties"},function(){Notifications.error("Error getting list of specialties."),$scope.specialtyPlaceholder="Error"})},zipSearchAvailable=!0;$scope.search=function(){$scope.byNameSelected?(zipSearchAvailable=!1,$scope.searchGender="",$scope.searchPrimaryCareZipCode="",$scope.searchSpecialty="",$scope.searchSpecialistsZipCode="",isValid=!1,$scope.invalidMessage="Enter a first name or last name.",$scope.searchLastName.length>0?isValid=!0:$scope.searchFirstName.length>0&&(isValid=!0)):$scope.primaryCareSelected?($scope.searchLastName="",$scope.searchFirstName="",$scope.searchSpecialty="",$scope.searchSpecialistsZipCode="",$scope.searchZipCode=$scope.searchPrimaryCareZipCode,isValid=!1,$scope.invalidMessage="Select a gender or enter a zip code.",$scope.searchGender.length>0&&(isValid=!0)):$scope.specialistsSelected&&($scope.searchGender="",$scope.searchPrimaryCareZipCode="",$scope.searchLastName="",$scope.searchFirstName="",$scope.searchZipCode=$scope.searchSpecialistsZipCode,isValid=!1,$scope.invalidMessage="Select a specialty or enter a zip code.",$scope.searchSpecialty&&$scope.searchSpecialty.title&&(isValid=!0)),zipSearchAvailable&&$scope.searchZipCode.length>0&&(5===$scope.searchZipCode.length?isValid=!0:(isValid=!1,$scope.invalidMessage="Zip code must be 5 digits.")),$scope.searchSpecialty&&(specialty=$scope.searchSpecialty.title),$scope.validFlag=isValid,isValid&&$location.path("/physicians/search/").search({lastName:$scope.searchLastName,firstName:$scope.searchFirstName,specialty:specialty,gender:$scope.searchGender,zipcode:$scope.searchZipCode})},$scope.clickByName=function(){$scope.byNameSelected=!0,$scope.primaryCareSelected=!1,$scope.specialistsSelected=!1,$scope.invalidMessage=""},$scope.clickPrimaryCare=function(){$scope.byNameSelected=!1,$scope.primaryCareSelected=!0,$scope.specialistsSelected=!1,$scope.invalidMessage=""},$scope.clickSpecialists=function(){$scope.byNameSelected=!1,$scope.primaryCareSelected=!1,$scope.specialistsSelected=!0,$scope.invalidMessage=""},$routeParams.physicianId?getPhysicianFromRSL(Physicians):getSpecialtiesFromRSL(Specialties)}var module=angular.module("physicians"),app=angular.module("app");app.requires.push("physicians"),module.controller("PhysiciansCtrl",["$scope","$routeParams","Physicians","Notifications","usSpinnerService","Specialties","$location",controller])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service($q,config,appConfig,$resource){var resource=$resource("physicians",{},{getPhysician:{method:"Get",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.physicians)}}),global=this;global.getPhysician=function(data){return resource.getPhysician(data)}}var module=angular.module("physicians");module.service("Physicians",["$q","physiciansConfig","appConfig","$resource",service])}(),function(){"use strict";function directive(){return{restrict:"A",require:"ngModel",scope:{numbersOnlyWithMaxLength:"@"},link:function(scope,element,attrs,modelCtrl){var transformedInput,maxInputLength=scope.numbersOnlyWithMaxLength;modelCtrl.$parsers.push(function(inputValue){return void 0===inputValue?emptyString:(transformedInput=inputValue.replace(/[^0-9]/g,emptyString),void 0!==maxInputLength&&null!==maxInputLength&&(transformedInput=transformedInput.substring(0,maxInputLength)),transformedInput!==inputValue&&(modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput)})}}}var module=angular.module("physicians"),emptyString="";module.directive("numbersOnlyWithMaxLength",[directive])}(),angular.module("timeline",["services","filters","combinedTimelineEvents"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/timeline",{title:"Timeline",templateUrl:"app/timeline/views/timeline.html",controller:"TimelineCtrl",rolesExpression:"!WellnessOnlyMember"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function TimelineCtrl($scope,TodoService,Timeline,Authorization,Login,Users,Profile,ProfileDetails,Notifications,FeatureStatus,AuthService,OldMemberCenterService,UserAgent,$window,Environment,$timeout,CombinedTimelineEvents,$sessionStorage){function initialize(useDeferred){$scope.loadFeed(),Profile.retrieveOrGet(useDeferred).then(function(user){currentUser=user,$scope.isGoPaperless=currentUser.isGoPaperless})["catch"](function(){currentUser=Users.currentUser.get(),$scope.isGoPaperless=currentUser.isGoPaperless}),$scope.toDoEnabled&&$scope.$watch(function(){return TodoService.toDoDataTile},function(newVal){newVal&&($scope.toDoDataTile=TodoService.toDoDataTile)})}function refreshUserSpecificContent(current,old){Login.getLoggedInStatus()&&current&&old&&current.ePersonId!==old.ePersonId&&(resetFeed(),sessionStorage.setItem("bannedHasBeenHidden",!1),initialize(!1))}function loadFeed(){showErrorMessage=!0,$scope.loading=!0,$scope.isLoading=!0;var promise=Timeline.getCachedFeed();promise.then(function(data){assignFeedToScope(data),showErrorMessage=!1,$scope.loading=!1,$scope.isLoading=!1}),promise["finally"](function(){getLatestTimelineEvents()})}function getLatestTimelineEvents(){var timelinePromise=Timeline.getFeed();timelinePromise.then(function(data){$scope.lastUpdated&&data.lastUpdated.getTime()>$scope.lastUpdated.getTime()&&showRefreshComplete(),assignFeedToScope(data)}),timelinePromise["catch"](function(){showErrorMessage&&($scope.hasError=!0,Notifications.clear().error("<b>Error</b> &mdash; Failed to load Timeline information."))}),timelinePromise["finally"](function(){$scope.loading=!1,$scope.isLoading=!1})}function showRefreshComplete(){$scope.timelineRefreshed=!0,$timeout(function(){$scope.timelineRefreshed=!1},5e3)}function assignFeedToScope(data){$scope.lastUpdated=data.lastUpdated,$scope.feed=data.feed,$scope.futureFeed=data.futureFeed,$scope.upcomingFeed=data.upcomingFeed,$scope.currentFeed=data.currentFeed,$scope.hasError&&Notifications.clear(),$scope.hasError=!1}function getTemplate(event){var name="claim",path="common/views/{name}.tpl.html",tmpl="";switch(event.eventType){case"RxClaim":name="rx-claim";break;case"Encounter":name=event.isActiveInpatientAdmission?"admission":"visit";break;default:name=event.eventType.toLowerCase()}return tmpl=path.replace("{name}",name)}function resetFeed(){$scope.feed=[],$scope.futureFeed=[],$scope.upcomingFeed=null,$scope.currentFeed=null}function shouldGoPaperlessBeHidden(){return!(currentUser.isMember&&null===currentUser.isGoPaperless)}function bannerHiddenByUser(){return!!sessionStorage.getItem("bannedHasBeenHidden")}function hideBanner(){sessionStorage.setItem("bannedHasBeenHidden",!0)}function toggleMoreDisplay(){$scope.isMoreDisplayed=!$scope.isMoreDisplayed}function setGoPaperlessValue(goPaperlessValue){if(currentUser.isGoPaperless=goPaperlessValue,currentUser.isMember){var promise=Profile.post({isGoPaperless:currentUser.isGoPaperless});promise.then(function(){Users.currentUser.set(currentUser)})}$scope.hideBanner()}function striveBannerViewed(){ProfileDetails.saveUserPreferences({striveBannerViewed:!0})}function goBackToOldMemberCenter(destination){if((void 0===destination||null===destination||""===destination)&&(destination=OldMemberCenterService.homeDestination),UserAgent.isMobileApp)AuthService.generateTempToken(appId).$promise.then(function(data){url=OldMemberCenterService.buildSsoLink(data.tempToken,destination,appId),$window.open(url,"_system")});else{url="redirect.html";var w=$window.open(url,"_system");AuthService.generateTempToken(appId).$promise.then(function(data){url=OldMemberCenterService.buildSsoLink(data.tempToken,destination,appId),w.location=url})}}var showErrorMessage=!0,pageSize=5;$scope.numToShow=pageSize,$scope.feed=[],$scope.isMoreDisplayed=!1,$scope.hasToDo=Authorization.hasTodo(),$scope.appointmentListFeatureEnabled=FeatureStatus.checkFeatureStatus("dtAppointmentList"),$scope.questionnairesFeatureEnabled=FeatureStatus.checkFeatureStatus("dtQuestionnaires")&&$scope.appointmentListFeatureEnabled,$scope.confirmFeatureEnabled=FeatureStatus.checkFeatureStatus("dtConfirmAppointment")&&$scope.appointmentListFeatureEnabled,$scope.cancelFeatureEnabled=FeatureStatus.checkFeatureStatus("schedulingCancel"),$scope.eCheckInEnabled=FeatureStatus.checkFeatureStatus("eCheckIn"),$scope.greenToDoEnabled=FeatureStatus.checkFeatureStatus("toDo_green"),$scope.blueToDoEnabled=FeatureStatus.checkFeatureStatus("toDo_blue"),$scope.legacyGreenToDoEnabled=FeatureStatus.checkFeatureStatus("toDo_greenLegacy");var loggedInUser,currentUser=Users.currentUser.get();$sessionStorage.has("loggedInUser")&&(loggedInUser=JSON.parse($sessionStorage.get("loggedInUser"))),$scope.showGreenToDoBanner=($scope.greenToDoEnabled&&currentUser.isMember&&!currentUser.isPatient||$scope.greenToDoEnabled&&$scope.legacyGreenToDoEnabled&&currentUser.isMember&&currentUser.isPatient)&&$scope.hasToDo&&!$scope.isStandardSharedAccess,$scope.showBlueToDoBanner=(currentUser.isPatient&&$scope.blueToDoEnabled||$scope.greenToDoEnabled&&!$scope.legacyGreenToDoEnabled&&currentUser.isMember&&currentUser.isPatient)&&!$scope.isStandardSharedAccess,$scope.loadFeed=loadFeed,$scope.getTemplate=getTemplate,$scope.showStriveBanner=loggedInUser&&loggedInUser.userPreferences&&!loggedInUser.userPreferences.striveBannerViewed&&Authorization.isStrive()&&!Users.isUserProxied(),$scope.showStriveBanner===!0&&striveBannerViewed(),$scope.showMore=function(){$scope.numToShow+=pageSize},$scope.showSharedAccessLink=function(){return CombinedTimelineEvents.isAvailable},$scope.showSeeMoreLink=function(){return $scope.futureFeed?!($scope.futureFeed.length<2||$scope.loading||$scope.hasError):!1},$scope.showUpcomingEventsSubTitleSeparator=function(){return $scope.showSharedAccessLink()&&$scope.showSeeMoreLink()},$scope.showUpcomingEventsSubTitle=function(){return $scope.showSharedAccessLink()||$scope.showSeeMoreLink()},$scope.$watch("currentUser",refreshUserSpecificContent),$scope.shouldGoPaperlessBeHidden=shouldGoPaperlessBeHidden,$scope.bannerHiddenByUser=bannerHiddenByUser,$scope.hideBanner=hideBanner,$scope.toggleMoreDisplay=toggleMoreDisplay,$scope.setGoPaperlessValue=setGoPaperlessValue,initialize(!0);var appId=Environment.get().appId,url="";$scope.backToOMC=goBackToOldMemberCenter}angular.module("timeline").controller("TimelineCtrl",TimelineCtrl),TimelineCtrl.$inject=["$scope","TodoService","Timeline","Authorization","Login","Users","Profile","ProfileDetails","Notifications","FeatureStatus","AuthService","OldMemberCenterService","UserAgent","$window","Environment","$timeout","CombinedTimelineEvents","$sessionStorage"]}(),function(){"use strict";function TimelineService(appConfig,$http,$q,Moment,PartnerBrandingService){function getCachedFeed(){var deferred=$q.defer(),promise=$http.get(route+cachedQueryParam,config);return promise.then(function(response){response.data.events&&response.data.events.length>0?parseFeed(response).then(function(feed){deferred.resolve(feed),resolveAndResetTimelinePromise()}):deferred.reject([])}),promise["catch"](function(){deferred.reject([])}),deferred.promise}function getFeed(){var promise=$http.get(route,config).then(parseFeed);return promise["finally"](resolveAndResetTimelinePromise),promise}function waitForTimeline(){return timelineDeferred.promise}function resolveAndResetTimelinePromise(){timelineDeferred.resolve(!0),timelineDeferred=$q.defer()}function parseFeed(response){var upcomingFeed,deferred=$q.defer(),feedData=response.data.events||[],today=Date.now(),feed=[],futureFeed=[],currentFeed=[],appointmentsAndVisits=filterAppointmentsAndVisits(feedData);
return PartnerBrandingService.getPartnerIcons(appointmentsAndVisits)["finally"](function(){if(feedData.forEach(function(item){item.url=getUrl(item),item.start&&(item.date=item.start),item.timestamp=Date.parse(item.date),"Encounter"===item.eventType&&item.isActiveInpatientAdmission?currentFeed.push(item):"Appointment"===item.eventType&&item.timestamp>today?futureFeed.push(item):"Appointment"!==item.eventType&&item.timestamp<=today?feed.push(item):"Radiology"===item.eventType&&feed.push(item)}),upcomingFeed=futureFeed.slice(-1),upcomingFeed&&upcomingFeed.length){var upcomingItem=upcomingFeed[0];feed=feed.filter(function(item){return item.id!==upcomingItem.id})}var dataFeed={lastUpdated:new Date(response.data.lastUpdated),feed:feed,futureFeed:futureFeed,upcomingFeed:upcomingFeed,currentFeed:currentFeed};deferred.resolve(dataFeed)}),deferred.promise}function filterAppointmentsAndVisits(feedData){return _.filter(feedData,function(item){return"appointment"===item.eventType.toLowerCase()||"encounter"===item.eventType.toLowerCase()})}function getUrl(event){function getRadiologyDates(result){var fromDate=new Moment(result.date).startOf("month"),toDate=fromDate.clone().add(1,"months").endOf("month");return{fromDate:fromDate.format("YYYY-MM-DD"),toDate:toDate.format("YYYY-MM-DD")}}function getLabDateForUrl(result){return"EPIC"===result.system?result.resultDate:result.collectedDate}var area="medical",type=event.eventType.toLowerCase()+"s",id=event.id,date=getLabDateForUrl(event),dateRange=getRadiologyDates(event),tmpl="#/{area}/{type}/{id}";switch(event.eventType){case"RxClaim":case"Claim":area="insurance",type="claims",tmpl+="/"+event.claimType;break;case"Lab":tmpl="#/{area}/tests/{type}/"+event.system+"/{id}/{date}";break;case"Radiology":type="radiology",tmpl="#/{area}/tests/{type}/"+event.system+"/{id}/{fromDate}/{toDate}";break;case"Encounter":tmpl=event.isActiveInpatientAdmission?"#/current-admission":"#/{area}/visits/{id}/"+event.system}return tmpl.replace("{area}",area).replace("{type}",type).replace("{id}",id).replace("{date}",date).replace("{fromDate}",dateRange.fromDate).replace("{toDate}",dateRange.toDate)}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,"timeline"].join("/"),config={headers:{"x-api-version":2}},cachedQueryParam="?useCachedService=true",timelineDeferred=$q.defer(),services={getFeed:getFeed,getCachedFeed:getCachedFeed,waitForTimeline:waitForTimeline};return services}angular.module("timeline").factory("Timeline",TimelineService),TimelineService.$inject=["appConfig","$http","$q","Moment","PartnerBrandingService"]}(),angular.module("todo",["services"]),function(){"use strict";function toDoRoleAndFeatureCheck($q,$location,FeatureStatus,Users,Authorization){var deferred=$q.defer(),currentUser=Users.currentUser.get();return currentUser.isPatient&&FeatureStatus.checkFeatureStatus("toDo_blue")||currentUser.isMember&&FeatureStatus.checkFeatureStatus("toDo_green")&&Authorization.hasTodo()?deferred.resolve():$location.path("/timeline"),deferred.promise}function routeConfiguration($routeProvider){$routeProvider.when("/todos",{title:"To Do",templateUrl:"app/todo/views/todos.html",controller:"ToDoController",resolve:{toDoRoleAndFeatureCheck:toDoRoleAndFeatureCheck}})}var app=angular.module("app");toDoRoleAndFeatureCheck.$inject=["$q","$location","FeatureStatus","Users","Authorization"],app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function _controller($scope,TodoService,Notifications,Users,usSpinnerService,$location,FeatureStatus){function goBackToOldMemberCenter(actionName){var memberCenterUrl="";if(actionName=actionName.toLowerCase(),Users.isUserProxied())return void $location.path(memberCenterUrl);switch(actionName){case"health assessment":memberCenterUrl="/member-center/healthAssessment";break;case"premium due":memberCenterUrl="/member-center/payMyPremium";break;case"health by choice qualification form":memberCenterUrl="/member-center/healthByChoice";break;case"alternate health by choice goals":memberCenterUrl="/member-center/healthByChoice"}$location.path(memberCenterUrl)}function getTodoList(){$scope.currentUser.isMember&&$scope.greenToDoEnabled&&($scope.isLoading=!0,TodoService.getActions().then(function(response){$scope.actions=response,$scope.isErrored=!1,$scope.isLoading=!1})["catch"](function(){$scope.isErrored=!0,$scope.isLoading=!1,Notifications.error("There was an error retrieving ToDo list.")}))}$scope.currentUser=Users.currentUser.get(),$scope.backToOMC=goBackToOldMemberCenter,$scope.getTodoList=getTodoList,$scope.isErrored=!0,$scope.blueToDoEnabled=FeatureStatus.checkFeatureStatus("toDo_blue"),$scope.greenToDoEnabled=FeatureStatus.checkFeatureStatus("toDo_green")}var module=angular.module("todo");module.controller("ToDoController",["$scope","TodoService","Notifications","Users","usSpinnerService","$location","FeatureStatus",_controller])}(),function(){"use strict";function TodoService(appConfig,$resource,cacher){function getActions(){var cacheKey="toDoList:memberList";return cacher.cache(cacheKey,function(){return resource.get().$promise.then(function(response){return _.filter(response,function(item){var name=item.name.toLowerCase(),names=["health assessment","premium due","health by choice qualification form","alternate health by choice goals"];return-1!==names.indexOf(name)})})})}var resource=$resource([appConfig.apiEndpoint,"toDo"].join("/"),null,{get:{isArray:!0}}),service=this;this.toDoCount=null,this.toDoDataTile=!1,service.getActions=getActions}angular.module("todo").service("TodoService",TodoService),TodoService.$inject=["appConfig","$resource","cacher"]}(),function(){"use strict";function TodoGreenDirective(TodoService,Authorization,$rootScope,FeatureStatus,Users){return{restrict:"E",scope:{},templateUrl:"app/todo/views/to-do-green.html",replace:!0,link:function(scope){var toDoEnabled=FeatureStatus.checkMultipleFeatureStatuses("toDo_green");scope.currentUser=Users.currentUser.get();var isTeal=scope.currentUser.isMember&&scope.currentUser.isPatient;(scope.currentUser.isMember&&!toDoEnabled||!isTeal&&scope.currentUser.isMember&&toDoEnabled)&&(scope.toDoCount=0,scope.isVisible=!1,Authorization.hasTodo()&&TodoService.getActions().then(function(data){scope.toDoCount=data.length,scope.isVisible=!0,TodoService.toDoCount=scope.toDoCount}))}}}angular.module("todo").directive("todoGreen",TodoGreenDirective),TodoGreenDirective.$inject=["TodoService","Authorization","$rootScope","FeatureStatus","Users"]}(),function(){"use strict";function TodoEpicDirective($compile,Authorization,TodoService,Notifications,FeatureStatus,$rootScope,Users,$window){return{restrict:"E",scope:{},replace:!0,link:function(scope,element){var toDoEnabled=FeatureStatus.checkFeatureStatus("toDo_blue");scope.currentUser=Users.currentUser.get(),scope.setupBlueTodos=function(){if(scope.currentUser.isPatient&&toDoEnabled){scope.isLoading=!0;var epicDataTile='<spinner-inline trigger="{{ isLoading }}" data-ng-show="isLoading"></spinner-inline><epic-data-tile class="todo-dt" data-dt-id="home" data-dt-desc="Todos"></epic-data-tile>',compiledEpicDataTile=$compile(epicDataTile)(scope);element=element.html(compiledEpicDataTile);var iframe=compiledEpicDataTile.find("iframe"),iframeWindow=iframe[0].contentWindow;iframe.on("load",function(){if("/datatile-error.html"===iframeWindow.location.pathname)return scope.isLoading=!1,void scope.$apply();iframeWindow.$.ajaxPrefilter(function(options){options.url.indexOf("widgetName=alerts")>-1&&(options.dataFilter=scope.alertsFilter)});var dataTileElement=iframeWindow.document.getElementById("datatile");dataTileElement&&angular.element(dataTileElement).addClass("todo")})}},scope.alertsFilter=function(data){var numberOfTodosToShow=4,htmlObj=$("<div/>").append($.parseHTML(data)),alerts=htmlObj.find("#alerts .loginalert"),fastPass=htmlObj.find("#alertspanel-autowaitlist");fastPass.css("display","none");var alertsList=[],expiredAlerts=htmlObj.find("#alertspanel-expiredautowaitlist");if(expiredAlerts.css("display","none"),alerts.length>0){TodoService.toDoDataTile=!0;for(var j=0;j<alerts.length;j+=1)alertsList.push(scope.replaceHref(alerts[j]).outerHTML);scope.isLoading=!1,scope.$apply();var alertsArray=alertsList.slice(0,numberOfTodosToShow);return htmlObj.find("#alerts").html($(alertsArray.join(""))),htmlObj.html()}return scope.isLoading=!1,scope.$apply(),element.html('<p class="text-center">You have no Medical To Do\'s</p>'),data},scope.replaceHref=function(alert){var anchor=$(alert).find("a");return null!==anchor&&anchor.length>0&&anchor.context.textContent&&(-1!==anchor.context.textContent.indexOf("message")?(anchor.removeAttr("target"),anchor.removeAttr("href"),anchor.attr("onclick",'window.parent.postMessage("redirect.message-center", "*")')):-1!==anchor.context.textContent.indexOf("health reminders")?(anchor.removeAttr("target"),anchor.removeAttr("href"),anchor.attr("onclick",'window.parent.postMessage("redirect.preventive-care", "*")')):-1!==anchor.context.textContent.indexOf("question")?(anchor.removeAttr("target"),anchor.removeAttr("href"),anchor.attr("onclick",'window.parent.postMessage("redirect.questionnaires", "*")')):-1!==anchor.context.textContent.indexOf("View instructions")&&(anchor.removeAttr("target"),anchor.removeAttr("href"),anchor.attr("onclick",'window.parent.postMessage("redirect.appointments", "*")'))),alert},$window.addEventListener("message",function(event){"redirect.message-center"===event.data?$window.location.hash="#/message-center":"redirect.preventive-care"===event.data?$window.location.hash="#/medical/health-info/preventive-care":"redirect.questionnaires"===event.data?$window.location.hash="#/forms/questionnaires":"redirect.appointments"===event.data&&($window.location.hash="#/medical/appointments")}),scope.setupBlueTodos()}}}angular.module("todo").directive("todoEpic",TodoEpicDirective),TodoEpicDirective.$inject=["$compile","Authorization","TodoService","Notifications","FeatureStatus","$rootScope","Users","$window"]}(),angular.module("wellness",["services","filters"]),angular.module("wellness").constant("wellnessConfig",{webmd:{browserUrl:"http://www.webmd.com/rewards",browserImagePath:"assets/images/wellness-landing-page.jpg"},cafewell:{browserUrl:"http://www.cafewell.com",browserImagePath:"assets/images/cafewell_home.jpg"}}),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/wellness",{title:"Wellness",templateUrl:"app/wellness/views/wellness.html",controller:"WellnessCtrl",roles:["green"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function _controller($scope,OldMemberCenterService,$timeout,SSO,PopupService,WellnessScenarioService){function enableSSOComponents(){$scope.buttonDisabled=!1,$scope.isLoadingWellnessContractTypes=!1}function goToCafeWell(contractId){var cafeWellPromise=SSO.getCafeWellUrl(contractId);PopupService.prepPopup("redirect.html","_system"),cafeWellPromise.then(function(data){$scope.cafeWellSSOUrl=data.ssoUrl,PopupService.openPopup($scope.cafeWellSSOUrl,"_system")},function(){PopupService.closePopup()})}function goBackToOldMemberCenter(){$scope.buttonDisabled=!0,$timeout(enableSSOComponents,2e4),OldMemberCenterService.goBackToOldMemberCenter("WebMDRewardsSSO")}$scope.buttonDisabled=!0;var cafeWellExperience=WellnessScenarioService.getCafeWellFeatureStatuses();$scope.oldSingleLaunchOutPage=!cafeWellExperience.singleSignOnCafeWellPhase2,$scope.isLoadingWellnessContractTypes=!0,WellnessScenarioService.getContractWellnessProperties().then(function(contractWellnessProperties){$scope.contracts=contractWellnessProperties,$scope.sampleWellness=WellnessScenarioService.shouldUserShowSampleWellness(contractWellnessProperties),enableSSOComponents()})["finally"](function(){$scope.isLoadingWellnessContractTypes=!1}),$scope.launchWellnessSSO=function(contract,forceCafeWell){$scope.contracts&&0!==$scope.contracts.length&&(forceCafeWell||contract.shouldGoToCafeWell?goToCafeWell(contract.contractId):goBackToOldMemberCenter())}}angular.module("wellness").controller("WellnessCtrl",_controller),_controller.$inject=["$scope","OldMemberCenterService","$timeout","SSO","PopupService","WellnessScenarioService"]}(),function(){"use strict";function WellnessScenarioService(wellnessConfig,Contracts,FeatureStatus,Users,$q){function getCafeWellFeatureStatuses(){return{singleSignOnCafeWell:!!phaseOne,singleSignOnCafeWellPhase2:!!phaseTwo}}function getContractWellnessProperties(){return getModifiedContractsWithWellnessProperties()}function getModifiedContractsWithWellnessProperties(){var defaultWebMdContract=[{shouldGoToCafeWell:!1,browserUrl:WEBMD_BROWSER_URL,browserImageSource:WEBMD_BROWSER_IMAGE_PATH}];return phaseTwo?Contracts.getContracts().then(filterSortAndModifyContracts):phaseOne?$q.resolve(getContractExperienceByFeatureAuthorizations()):$q.resolve(defaultWebMdContract)}function getContractExperienceByFeatureAuthorizations(){var user=Users.currentUser.get(),indicators={isWellness:_.includes(user.authorizations,"WELLNESS"),isMedicare:_.includes(user.authorizations,"MEDICARE"),isMedigap:_.includes(user.authorizations,"MEDIGAP"),isCommercialWithoutWellness:_.every(user.authorizations,function(auth){return["MEDICARE","MEDICAID","MEDIGAP","WELLNESS"].indexOf(auth)<0})};if(!(indicators.isWellness||indicators.isMedicare||indicators.isMedigap||indicators.isCommercialWithoutWellness))return[];var shouldGoToCafeWell=shouldUserShouldGoToCafeWell(indicators),browserUrl=shouldGoToCafeWell?CAFEWELL_BROWSER_URL:WEBMD_BROWSER_URL,browserImageSource=shouldGoToCafeWell?CAFEWELL_BROWSER_IMAGE_PATH:WEBMD_BROWSER_IMAGE_PATH,contracts=[{shouldGoToCafeWell:shouldGoToCafeWell,browserUrl:browserUrl,browserImageSource:browserImageSource}];return contracts}function shouldUserShouldGoToCafeWell(indicators){var isWellnessRenewed=!!indicators.isWellnessRenewed,isWellness=!!indicators.isWellness,isMedicare=!!indicators.isMedicare,isMedigap=!!indicators.isMedigap,isMedicaid=!!indicators.isMedicaid,isHBC=!!indicators.ishbc,isCommercialWithoutWellness=!(isWellness||isMedicaid||isMedicare||isMedigap);indicators.isCommercialWithoutWellness=indicators.isCommercialWithoutWellness||isCommercialWithoutWellness;var shouldGoToCafeWell=isWellnessRenewed||!isWellness&&(isMedicare||isMedigap||isHBC||isCommercialWithoutWellness);return shouldGoToCafeWell}function filterSortAndModifyContracts(contracts){return contracts=_.chain(contracts).filter(function(contract){return contract.indicators&&contract.contractID}).filter(removeMedicaidOnlyContracts).map(createViewModelWithWellnessProperties).value(),orderContractsByBusinessLogic(contracts)}function removeMedicaidOnlyContracts(contract){var nonMedicaidIndicators=_.omit(contract.indicators,"isMedicaid"),medicaidOnly=contract.indicators.isMedicaid&&_.every(nonMedicaidIndicators,function(indicator){return!indicator});return!medicaidOnly}function createViewModelWithWellnessProperties(contract){var shouldGoToCafeWell=shouldUserShouldGoToCafeWell(contract.indicators),modifiedContract={indicators:contract.indicators,contractName:contract.employerGroupName,contractId:contract.contractID,shouldGoToCafeWell:shouldGoToCafeWell,browserUrl:shouldGoToCafeWell?CAFEWELL_BROWSER_URL:WEBMD_BROWSER_URL,browserImageSource:shouldGoToCafeWell?CAFEWELL_BROWSER_IMAGE_PATH:WEBMD_BROWSER_IMAGE_PATH};return modifiedContract}function shouldUserShowSampleWellness(contracts){var userShowsSampleWellness=_.every(contracts,function(contract){return contract.indicators.isWellness&&!contract.indicators.isWellnessRenewed});return userShowsSampleWellness}function removeAllSortedContractsOfType(contracts,contractType){var targetContracts=[];return _.each(contracts.slice().reverse(),function(contract,index,contractsCopy){contract.indicators[contractType]&&(targetContracts=targetContracts.concat(contracts.splice(contractsCopy.length-1-index,1)))}),targetContracts.sort(function(a,b){return a.contractName>b.contractName}),targetContracts}function orderContractsByBusinessLogic(contracts){var wellnessRenewedContracts=removeAllSortedContractsOfType(contracts,"isWellnessRenewed"),wellnessContracts=mergeMultipleWellnessContracts(removeAllSortedContractsOfType(contracts,"isWellness")),medicareContracts=removeAllSortedContractsOfType(contracts,"isMedicare"),medigapContracts=removeAllSortedContractsOfType(contracts,"isMedigap"),commercialContracts=removeAllSortedContractsOfType(contracts,"isCommercialWithoutWellness");return[].concat(wellnessRenewedContracts,wellnessContracts,medicareContracts,medigapContracts,commercialContracts,contracts)}function mergeMultipleWellnessContracts(wellnessContracts){if(wellnessContracts.length<=1)return wellnessContracts;var firstContractAlphabetically=_.first(wellnessContracts.sort(function(a,b){return a.contractName>b.contractName}));return wellnessContracts=[{shouldGoToCafeWell:!1,indicators:firstContractAlphabetically.indicators,contractId:firstContractAlphabetically.contractId,contractName:"WebMD",browserUrl:WEBMD_BROWSER_URL,browserImageSource:WEBMD_BROWSER_IMAGE_PATH,merged:!0}]}var phaseOne=FeatureStatus.checkFeatureStatus("singleSignOnCafeWell"),phaseTwo=FeatureStatus.checkFeatureStatus("singleSignOnCafeWellPhase2"),WEBMD_BROWSER_URL=wellnessConfig.webmd.browserUrl,CAFEWELL_BROWSER_URL=wellnessConfig.cafewell.browserUrl,WEBMD_BROWSER_IMAGE_PATH=wellnessConfig.webmd.browserImagePath,CAFEWELL_BROWSER_IMAGE_PATH=wellnessConfig.cafewell.browserImagePath;this.getContractWellnessProperties=getContractWellnessProperties,this.shouldUserShowSampleWellness=shouldUserShowSampleWellness,this.getCafeWellFeatureStatuses=getCafeWellFeatureStatuses}angular.module("wellness").service("WellnessScenarioService",WellnessScenarioService),WellnessScenarioService.$inject=["wellnessConfig","Contracts","FeatureStatus","Users","$q"]}(),angular.module("plan-documents",["services","filters","ngResource"]),angular.module("plan-documents").constant("PlanDocumentsConfig",{apiRoutes:{documents:"/PlanDocuments"}}),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/insurance/plan-documents",{title:"Plan Documents",templateUrl:"app/plan-documents/views/plan-documents.html",controller:"PlanDocumentsCtrl",roles:["green"],feature:"insurancePlanDocuments"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service($q,$http,$resource,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),resource=$resource("plan-documents",{},{getAllPlanDocuments:{method:"GET",url:resourceRoute(apiEndpoint,config.apiRoutes.documents),isArray:!0}}),getAllPlanDocuments=function(){return resource.getAllPlanDocuments().$promise};return{getAllPlanDocuments:getAllPlanDocuments}}var module=angular.module("plan-documents");module.service("PlanDocumentsSvc",["$q","$http","$resource","PlanDocumentsConfig","appConfig",service])}(),function(){"use strict";function controller($scope,$filter,AuthService,UserAgent,Notifications,PlanDocumentsSvc,OldMemberCenterService,Environment){$scope.isLoading=!0,$scope.defaultPlanPhoneNumber="8009420954",$scope.loading=!0,$scope.loadingError=!1,$scope.isMobileApp=UserAgent.isMobileApp,$scope.getAllPlanDocuments=function(){PlanDocumentsSvc.getAllPlanDocuments().then(function(data){$scope.Plans=data,$scope.noDocCount=$filter("noDocumentCount")(data)},function(){Notifications.error("We appear to be experiencing a problem with our services and are working on correcting the issue. Please try again later."),$scope.loadingError=!0})["finally"](function(){$scope.isLoading=!1})},$scope.getSingleDocument=function(id){window.open("/api/v2/plandocuments?documentId="+id)},$scope.ssoLogin=function(){$scope.isLoading=!0;var appId=Environment.get().appId,destination="CoverageDocuments";AuthService.generateTempToken(appId).$promise.then(function(data){var url=OldMemberCenterService.buildSsoLink(data.tempToken,destination,appId);window.open(url,"_blank")},function(){Notifications.error("We were unable to process your request at this time.  We our working on correcting the issue.  Please try again later.")})["finally"](function(){$scope.isLoading=!1})},$scope.getAllPlanDocuments()}var module=angular.module("plan-documents");module.controller("PlanDocumentsCtrl",["$scope","$filter","AuthService","UserAgent","Notifications","PlanDocumentsSvc","OldMemberCenterService","Environment",controller])}(),function(){"use strict";function filter(){return function(plans){if(plans){if(0===plans.length)return;var present=plans.filter(function(plan){return plan.documents&&plan.documents.length>0?plan:void 0}),empty=plans.filter(function(plan){return plan.documents&&0===plan.documents.length?plan:void 0});return present.concat(empty)}}}function noDocumentCountFilter(){return function(plans){if(plans&&plans.length>0){var planList=plans.filter(function(plan){return plan.documents&&0===plan.documents.length?plan:void 0});return planList.length}return-1}}var module=angular.module("plan-documents");module.filter("documentOrder",filter),module.filter("noDocumentCount",noDocumentCountFilter)}(),function(){"use strict";function directive($compile){return{restrict:"A",scope:!0,link:function(scope,element,attrs){scope.collapsed=!1,maxLength=scope.$eval(attrs.showMaxLength)||100,scope.toggle=function(){if(scope.collapsed=!scope.collapsed,text=attrs.showDataText,text&&text.length>maxLength){var moreIndicatorSpan=$compile('<span ng-if="collapsed">...</span>')(scope),toggleButton=$compile('<span class="collapse-text-toggle">(<a href="javascript:void(0);" ng-click="toggle()">{{collapsed ? "Show More" : "Show Less"}}</a>)</span>')(scope);if(scope.collapsed){var lessPart=String(text).substring(0,maxLength);lessPart=lessPart.replace(regex," ").replace(/\s+/g," ")," "!==lessPart.charAt(lessPart.length)&&(lessPart=lessPart.substr(0,lessPart.lastIndexOf(" ")));var lessSpan=$compile("<span>"+lessPart+"</span>")(scope);element.empty(),element.append(lessSpan)}else element.empty(),element.append(text);element.append(moreIndicatorSpan),element.append(toggleButton)}else element.empty(),element.append(text)},scope.toggle()}}}var text,module=angular.module("plan-documents"),regex=/(<([^>]+)>)/gi,maxLength=100;module.directive("showMoreLess",["$compile",directive])}(),angular.module("lobby",["filters"]),angular.module("lobby").config(["$routeProvider",function($routeProvider){"use strict";$routeProvider.when("/lobby",{redirectTo:function(){return"/welcome"}}).when("/welcome",{title:"Welcome",templateUrl:"app/lobby/views/welcome.html",controller:"LobbyController"})}]),function(){"use strict";function LobbyController($scope,Users,ContactUs,Notifications,usSpinnerService,EnrollmentStatus,Profile,$location,$rootScope){$scope.contactUsLink="#/about/contactus",$scope.isHidden=!0,$scope.getDataDisabled=!1,$scope.contactUsPhoneNumber=ContactUs.phoneNumber,$scope.lobbyWizard={"default":"default",rsa:"rsa",longform:"longform"},$scope.invitationid="",$scope.lobbyWizardStep=$scope.lobbyWizard["default"],$rootScope.$on("goToLongForm",function(){$scope.lobbyWizardStep=$scope.lobbyWizard.longform}),usSpinnerService.spin("spinner-main"),Profile.get().then(function(user){user.menuRoles.indexOf("lobby")>-1?usSpinnerService.stop("spinner-main"):(usSpinnerService.stop("spinner-main"),$location.path("/timeline"))},function(){usSpinnerService.stop("spinner-main")}),$scope.showEnrollmentForms=function(){$scope.getDataDisabled=!0,usSpinnerService.spin("spinner-main"),EnrollmentStatus.getEnrollmentStatus().then(function(response){var userModel=Users.currentUser.get();userModel.firstname=response.data.firstname,userModel.lastname=response.data.lastname,userModel.dob=response.data.dateOfBirth,userModel.addingMissingPiece=response.data.addingMissingPiece,userModel.hasPendingEnrollmentLongForm=response.data.hasPendingEnrollmentLongForm,userModel.enrollmentLongFormLastDate=response.data.enrollmentLongFormLastDate,Users.currentUser.set(userModel),$scope.getDataDisabled=!1,$scope.lobbyWizardStep=response.data.canAttemptRSAAgainThisSession?$scope.lobbyWizard.rsa:$scope.lobbyWizard.longform,usSpinnerService.stop("spinner-main")},function(){$scope.getDataDisabled=!1,usSpinnerService.stop("spinner-main"),Notifications.error("Error: Unable to get enrollment information.")})},$scope.launchMyHealthClassic=function(){window.open("https://myhealth.spectrumhealth.org/#/splash?sitepreference=desktop","_system")}}var module=angular.module("lobby");module.controller("LobbyController",["$scope","Users","ContactUs","Notifications","usSpinnerService","EnrollmentStatus","Profile","$location","$rootScope",LobbyController])}(),function(){"use strict";function service($http,appConfig){var route=[appConfig.apiEndpoint,"enrollmentStatus"].join("/"),getEnrollmentStatus=function(){return $http.get(route).then(function(response){return response})};return{getEnrollmentStatus:getEnrollmentStatus}}var module=angular.module("lobby");module.service("Lobby",["$http","appConfig",service])}(),angular.module("specialties",["services","filters"]),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service(config,appConfig,$resource){var resource=$resource("specialties",{},{getSpecialties:{method:"Get",url:resourceRoute(appConfig.apiEndpoint,config.apiRoutes.specialties),isArray:!0}}),global=this;global.getSpecialties=function(data){return resource.getSpecialties(data)}}var module=angular.module("specialties");module.service("Specialties",["specialtiesConfig","appConfig","$resource",service])}(),angular.module("specialties").constant("specialtiesConfig",{apiRoutes:{specialties:"/specialties"}}),angular.module("sharedAccess",["services","filters"]),function(){"use strict";function SharedAccessController($rootScope,$scope,combinedSharedAccess,Notifications,Users,$log,$busy){function iconForTheirAccess(){return"green"===$scope.currentUser.uiExperience?"mh_sharedaccess2-ph.svg":"mh_sharedaccess2.svg"}function iconForMyAccess(){return"green"===$scope.currentUser.uiExperience?"mh_sharedaccess1-ph.svg":"mh_sharedaccess1.svg"}function removeAccess(request,user){var promise=combinedSharedAccess.removeAccess(request,user).then(function(){Notifications.success("The access was successfully removed."),$rootScope.$broadcast("relationshipsChanged",{user:user,action:"remove"})})["catch"](function(){Notifications.error("Failed to remove or revoke access.")})["finally"](function(cb){return request.subView="",cb});$busy.watch(promise)}function isSharedAccessAvailable(){return $scope.sharedAccessAvailable=Users.currentUser.get().ePersonId===Users.loggedInUser.get().ePersonId,$scope.sharedAccessAvailable}function activate(){getRelationships()}function getRelationships(){combinedSharedAccess.getRelationships().then(function(data){$scope.grantors=_.union(data.legacy.grantors,data.relationships.grantors),$scope.grantees=_.union(data.legacy.grantees,data.relationships.grantees)})["catch"](function(err){Notifications.error("Unable to retrieve relationships."),$log.debug(err)})["finally"](function(){$scope.relationshipsLoaded=!0})}$scope.grantees=[],$scope.grantors=[],$scope.insuranceGrantors=[],$scope.healthGrantors=[],$scope.removeAccess=removeAccess,$scope.isSharedAccessAvailable=isSharedAccessAvailable,$scope.iconForTheirAccess=iconForTheirAccess,$scope.iconForMyAccess=iconForMyAccess,$scope.isAdolescent=$scope.currentUser.isAdolescent(),$scope.relationshipsLoaded=!1,activate(),$rootScope.$on("relationshipsChanged",function(event,args){if("approve"===args.action.toLowerCase())args.isGrant?$scope.grantors.push(args.user):$scope.grantees.push(args.user);else if("remove"===args.action.toLowerCase()){var grantorIndex,granteeIndex;if(args.user.isRelationshipService)grantorIndex=$scope.grantors.indexOf(args.user),granteeIndex=$scope.grantees.indexOf(args.user);else{var grantorUser=_.find($scope.grantors,function(obj){return obj.proxyId===args.user.proxyId}),granteeUser=_.find($scope.grantees,function(obj){return obj.proxyId===args.user.proxyId});grantorIndex=$scope.grantors.indexOf(grantorUser),granteeIndex=$scope.grantees.indexOf(granteeUser)}grantorIndex>-1&&$scope.grantors.splice(grantorIndex,1),granteeIndex>-1&&$scope.grantees.splice(granteeIndex,1)}})}angular.module("sharedAccess").controller("SharedAccessController",SharedAccessController),SharedAccessController.$inject=["$rootScope","$scope","combinedSharedAccess","Notifications","Users","$log","$busy"]}(),function(){"use strict";function shareAccessNotifications(){var directive={restrict:"E",templateUrl:"app/shared-access/directives/share-access-notifications/share-access-notifications.tpl.html",replace:!0,controller:ShareAccessNotificationsController,controllerAs:"vm",link:linkFn};return directive}function linkFn(scope,element,attrs){var waitForTimeline="true"===attrs.waitForTimeline&&"/welcome"!==scope.homeUrl;scope.vm.activate(waitForTimeline)}function ShareAccessNotificationsController($rootScope,$log,$location,Users,Notifications,combinedSharedAccess,$busy,Timeline){function acceptRequest(request){request.pending=!0,request.expires="automatic"===request.expirationType;var promise=combinedSharedAccess.approve(request).then(function(user){request.isRelationshipService?vm.removeRequest(request):(request.subView="accepted",populateRequests()),request.isRelationshipService?$rootScope.$broadcast("relationshipsChanged",{user:request,action:"approve"}):$rootScope.$broadcast("relationshipsChanged",{user:user,action:"approve"})})["catch"](function(){Notifications.error("Looks like something went wrong while saving your Shared Access settings, please try again. If you continue experiencing problems, please contact MyHealth customer service at 877.308.5083.")})["finally"](function(cb){return request.pending=!1,cb});$busy.watch(promise)}function acceptGrant(request){request.pending=!0;var promise=combinedSharedAccess.approve(request).then(function(results){return results.passcodeIncorrect?(request.data.invalidPin=!0,void(request.failedAttempts+=1)):request.isRelationshipService&&results.isPasscodeError||results.passcodeDenied?(Notifications.warn("Oops, it looks like too many failed attempts have been made to enter this passcode.  You may try setting up access yourself using the &quot;Share Access&quot; feature, or contact "+request.fromFirstName+" "+request.fromLastName+" to re-submit this request and provide you with a new passcode."),request.data.invalidPin=!0,request.failedAttempts+=1,void vm.cancelGrant(request)):void((results.passcodeSuccess||request.isRelationshipService&&!request.invalidPin)&&(vm.removeRequest(request),populateRequests(),request.isRelationshipService?$rootScope.$broadcast("relationshipsChanged",{user:request,action:"approve",isGrant:!0}):$rootScope.$broadcast("relationshipsChanged",{user:results.result,action:"approve",isGrant:!0})))})["catch"](function(err){$log.error(err),request.data.invalidPin=!0,request.isRelationshipService||Notifications.error("Looks like something went wrong while saving your Shared Access settings, please try again. If you continue experiencing problems, please contact MyHealth customer service at 877.308.5083.")})["finally"](function(cb){return request.pending=!1,cb});$busy.watch(promise)}function checkPasscode(request,passcode){request.data.hasError=!1,request.data.invalidPin=!1,request.subView="",request.data.failedAttempts=0,request.accessCode=passcode,vm.acceptGrant(request)}function cancelGrant(request){cancel(request)}function cancelRequest(request){cancel(request)}function removeRequest(request){var removePosition=vm.pending.indexOf(request);removePosition>-1&&vm.pending.splice(removePosition,1)}function template(request,user){if(Users.currentUser.get().ePersonId===Users.loggedInUser.get().ePersonId){var templatePath="app/shared-access/templates/{name}.tpl.html",templateName="";return templateName=combinedSharedAccess.isGrant(request)?combinedSharedAccess.isFromUser(request,user)?"pending-grant":"accept":combinedSharedAccess.isFromUser(request,user)?"pending-request":"approve",
request.isRelationshipService&&(templateName+="-relationship"),templatePath=templatePath.replace("{name}",templateName)}}function closeManage(request){vm.removeRequest(request),"/share-access"===$location.path()?request.subView="":$location.path("/share-access")}function approveRequestPending(request){request.path=$location.$$path,combinedSharedAccess.saveData(request),$location.path("/hipaa-auth")}function activate(shouldWaitForTimeline){shouldWaitForTimeline?populateRequestsAfterTimeline():populateRequests()}function populateRequestsAfterTimeline(){var promise=Timeline.waitForTimeline();promise.then(function(){populateRequests()})}function populateRequests(){combinedSharedAccess.getPending().then(function(results){_.forEach(results,function(item){item.failedAttempts=0,item.hasError=!1,item.invalidPin=!1}),vm.pending=results})["catch"](function(err){$log.error(err)})}function cancel(request){request.pending=!0;var promise=combinedSharedAccess.cancel(request).then(function(){vm.removeRequest(request)})["catch"](function(){combinedSharedAccess.isGrant(request)?Notifications.error("Failed to cancel access grant."):Notifications.error("Failed to cancel access request.")})["finally"](function(cb){return request.pending=!1,cb});$busy.watch(promise)}var vm=this;vm.pending=[],vm.activate=activate,vm.acceptRequest=acceptRequest,vm.acceptGrant=acceptGrant,vm.checkPasscode=checkPasscode,vm.cancelGrant=cancelGrant,vm.cancelRequest=cancelRequest,vm.removeRequest=removeRequest,vm.template=template,vm.closeManage=closeManage,vm.approveRequestPending=approveRequestPending}angular.module("sharedAccess").directive("shareAccessNotifications",shareAccessNotifications),ShareAccessNotificationsController.$inject=["$rootScope","$log","$location","Users","Notifications","combinedSharedAccess","$busy","Timeline"]}(),function(){"use strict";function directive($location,ProfileDetails,Profile,Users,SharedAccess){return{templateUrl:"app/shared-access/directives/share-access-adolescent-notification/share-access-adolescent-notification.tpl.html",restrict:"E",scope:{},controller:function($scope){function updateUserPreferences(){$scope.hideNotificationPermanentlyPreference&&ProfileDetails.saveUserPreferences({hideAdolescentShareAccessNotification:!0});var currentUser=Users.currentUser.get(),userPreferences=currentUser.userPreferences||{};userPreferences.hideAdolescentShareAccessNotification=!0,currentUser.userPreferences=userPreferences,Users.currentUser.set(currentUser)}$scope.hideNotificationPermanentlyPreference=!1,$scope.show=!1,$scope.currentUser=Users.currentUser.get(),!$scope.currentUser.isAdolescent()||Users.isUserProxied()||$scope.currentUser.userPreferences&&$scope.currentUser.userPreferences.hideAdolescentShareAccessNotification||SharedAccess.getRelationships().then(function(data){data.grantees&&data.grantees.length>0&&($scope.show=!0)}),$scope.hideNotification=function(){$scope.show=!1,updateUserPreferences()},$scope.goToShareAccess=function(){updateUserPreferences(),$location.path("/share-access")}}}}var module=angular.module("sharedAccess");module.directive("shareAccessAdolescentNotification",["$location","ProfileDetails","Profile","Users","SharedAccess",directive])}(),function(){"use strict";function shareAccessChangeUser(){var directive={restrict:"E",templateUrl:templateUrl,replace:!0,controller:shareAccessChangeUserController,controllerAs:"vm"};return directive}function templateUrl(elem,attr){return attr.listOnly&&"true"===attr.listOnly.toLowerCase()?"app/shared-access/directives/share-access-change-user/shared-access-list.html":"app/shared-access/directives/share-access-change-user/share-access-change-user.tpl.html"}function shareAccessChangeUserController($scope,$log,Profile,$location,Users,Notifications,combinedSharedAccess,$busy,usSpinnerService,filterFilter,Timeline,FeatureStatus,$localStorage,$route,ProfilePhotoService){function isSharedAccessAvailable(){return vm.sharedAccessAvailable=Users.currentUser.get().ePersonId===Users.loggedInUser.get().ePersonId,vm.sharedAccessAvailable}function hasGrantors(){return vm.healthGrantors.length>0||vm.insuranceGrantors.length>0}function hasInsuranceGrantors(){return vm.insuranceGrantors.length>0}function hasMedicalGrantors(){return vm.healthGrantors.length>0}function accessGrantor(proxyId,proxyType){var currentUserId=Users.currentUser.get().ePersonId,loggedInUserId=Users.loggedInUser.get().ePersonId;if(proxyId===currentUserId)return!1;vm.sharedAccessVisible=!1,usSpinnerService.spin("spinner-main");var response=combinedSharedAccess.accessGrantor(proxyId,proxyType).then(function(data){var responseProfile,responsePermissions;"member"===(proxyType||"").toLowerCase()?(responseProfile=data,responsePermissions=[]):(responseProfile=data.profile,responsePermissions=data.permissions);var landingLocation="/timeline";Users.currentUser.set(Profile.mapProfile(responseProfile,loggedInUserId,vm.FeatureStatus)),$scope.$emit("switchedUser"),!$scope.currentUser.isPerson||$scope.currentUser.isPatient||$scope.currentUser.isMember?FeatureStatus.checkFeatureStatus("inpatientExperience")&&$scope.currentUser.isAdmitted&&(landingLocation="/current-admission"):landingLocation="/welcome",responsePermissions&&responsePermissions.length>0?$localStorage.set("sharedAccessPermissions",JSON.stringify(responsePermissions)):($localStorage.remove("sharedAccessPermissions"),$scope.isStandardSharedAccess=!1),$location.path(landingLocation)})["catch"](function(){Notifications.error("Failed to switch users.")})["finally"](function(cb){return ProfilePhotoService.setProfilePhoto(),usSpinnerService.stop("spinner-main"),$route.reload(),cb});$busy.watch(response)}function activate(){if("/timeline"!==$location.path())getGrantors();else{var promise=Timeline.waitForTimeline();promise.then(function(){getGrantors()})}}function getGrantors(){vm.finished=!1,combinedSharedAccess.getGrantors().then(function(data){vm.insuranceGrantors=filterFilter(data,{isInsurance:!0}),vm.healthGrantors=filterFilter(data,{patientProxy:!0}),vm.insuranceGrantors||(vm.insuranceGrantors=[]),vm.healthGrantors||(vm.healthGrantors=[])})["catch"](function(err){$log.error("error loading grantors",err),vm.noUsersMessage="Could not load users"})["finally"](function(){vm.finished=!0,0===vm.healthGrantors.length&&0===vm.insuranceGrantors.length&&(vm.noUsersMessage="You are not sharing with anyone yet.")})}var vm=this;vm.sharedAccessVisible=!1,vm.healthGrantors=[],vm.insuranceGrantors=[],vm.noUsersMessage="Loading users...",vm.FeatureStatus=FeatureStatus,vm.isSharedAccessAvailable=isSharedAccessAvailable,vm.hasGrantors=hasGrantors,vm.hasInsuranceGrantors=hasInsuranceGrantors,vm.hasMedicalGrantors=hasMedicalGrantors,vm.accessGrantor=accessGrantor,activate(),$scope.$on("relationshipsChanged",function(event,args){if("approve"===args.action.toLowerCase())args.isGrant&&(args.user.isInsurance===!0?vm.insuranceGrantors.push(args.user):vm.healthGrantors.push(args.user));else if("remove"===args.action.toLowerCase()){var index;if(args.user.isInsurance){var insuranceGrantor=_.find(vm.insuranceGrantors,function(obj){return obj.relationshipId===args.user.relationshipId});index=vm.insuranceGrantors.indexOf(insuranceGrantor),index>-1&&vm.insuranceGrantors.splice(index,1)}else{var healthGrantor=_.find(vm.healthGrantors,function(obj){return obj.proxyId===args.user.proxyId});index=vm.healthGrantors.indexOf(healthGrantor),index>-1&&vm.healthGrantors.splice(index,1)}0===vm.healthGrantors.length&&0===vm.insuranceGrantors.length&&(vm.noUsersMessage="You are not sharing with anyone yet.")}})}angular.module("sharedAccess").directive("shareAccessChangeUser",shareAccessChangeUser),shareAccessChangeUserController.$inject=["$scope","$log","Profile","$location","Users","Notifications","combinedSharedAccess","$busy","usSpinnerService","filterFilter","Timeline","FeatureStatus","$localStorage","$route","ProfilePhotoService"]}(),function(){"use strict";function CreateAccessController($rootScope,$scope,$route,SharedAccess,SharedAccessRelationships,Notifications,$busy,$log){var requestTypeName=($route.current.params.requestType||"request").toLowerCase();$scope.requestType=requestTypes[requestTypeName]||requestTypes.request,$scope.isGrantAccess=$scope.requestType===requestTypes.grant,$scope.isRequestAccess=!$scope.isGrantAccess,$scope.model={},$scope.accessType={params:[]},$scope.steps=[{title:"Access Type",visuallyHideStep:!1,templateUrl:"app/shared-access/views/wizard-steps/request-type.html"},{title:$scope.requestType.title,visuallyHideStep:!1,templateUrl:"app/shared-access/views/wizard-steps/confirm-age.html",showPrevButton:!0,showCancelButton:!0},{title:"HIPPA Authorization",visuallyHideStep:!0,templateUrl:"app/shared-access/views/wizard-steps/insurance/hipaa-auth.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"User's Information",visuallyHideStep:!1,templateUrl:"app/shared-access/views/wizard-steps/patient-info.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"Review",visuallyHideStep:!1,templateUrl:"app/shared-access/views/wizard-steps/review.html",showPrevButton:!0,showCancelButton:!0}],$scope.insuranceSteps=[{title:"Access Type",templateUrl:"app/shared-access/views/wizard-steps/request-type.html"},{title:$scope.requestType.title,templateUrl:"app/shared-access/views/wizard-steps/insurance/users-list.html",showPrevButton:!0,showCancelButton:!0,text:"grant access"===$scope.requestType.title.toLowerCase()?"You can grant access only to people on your Priority Health Contract who are 18 or older. Call Customer Service at the number on your membership card if you have questions.":"Call Customer Service at the number on your membership card if you have questions."},{title:"HIPPA Authorization",visuallyHideStep:!0,templateUrl:"app/shared-access/views/wizard-steps/insurance/hipaa-auth.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"User's Information",templateUrl:"app/shared-access/views/wizard-steps/insurance/member-info.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"Review",templateUrl:"app/shared-access/views/wizard-steps/insurance/review.html",showPrevButton:!0,showCancelButton:!0}],$scope.invitationSteps=[{title:"Access Type",templateUrl:"app/shared-access/views/wizard-steps/request-type.html"},{title:$scope.requestType.title,templateUrl:"app/shared-access/views/wizard-steps/insurance/users-list.html",showPrevButton:!0,showCancelButton:!0},{title:"User's Information",templateUrl:"app/shared-access/views/wizard-steps/insurance/member-info.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"Review",templateUrl:"app/shared-access/views/wizard-steps/insurance/review.html",showPrevButton:!0,showCancelButton:!0}],$scope.setInvitation=function(user){!user.ePersonId&&user.age>18?($scope.accessType.params=["invitation"],$scope.wizardConfig.submitText="Send Invite"):($scope.accessType.params=[],$scope.wizardConfig.submitText=$scope.requestType.title)},$scope.stepChanged=function(directiveScope){return $scope.model.isMinor&&4===directiveScope.$wizard.selectedIndex?directiveScope.$submit():(!$scope.isRequestAccess&&"insurance"===$scope.accessType.type||"HIPPA Authorization"!==directiveScope.$wizard.steps[directiveScope.$wizard.selectedIndex].title||(directiveScope.$wizard.previousIndex<=directiveScope.$wizard.selectedIndex?directiveScope.$wizard.next():directiveScope.$wizard.prev()),"priority"===directiveScope.$wizard.stepSetName&&1===directiveScope.$wizard.selectedIndex?($scope.model.accesstype="Priority Health",$scope.dependents||$scope.getDependentsList(),directiveScope.$wizard.update($scope.insuranceSteps),directiveScope.$wizard.next(),directiveScope.$wizard.activeStep.tipText&&!$scope.dependents.length&&(directiveScope.$wizard.activeStep.tipText="")):"spectrum"===directiveScope.$wizard.stepSetName&&($scope.model.accesstype="Spectrum Health",directiveScope.$wizard.update($scope.steps),directiveScope.$wizard.next()),void($scope.accessType.params.indexOf("invitation")>-1?2===directiveScope.$wizard.selectedIndex&&(directiveScope.$wizard.update($scope.invitationSteps),directiveScope.$wizard.selectedIndex=1,directiveScope.$wizard.next(),directiveScope.$config.submitText="Send Invite",directiveScope.$config.successUrl="app/shared-access/views/wizard-steps/invitation-confirmation.html"):2===directiveScope.$wizard.selectedIndex&&(directiveScope.$wizard.update($scope.insuranceSteps),directiveScope.$wizard.selectedIndex=1,directiveScope.$wizard.next(),directiveScope.$config.submitText=$scope.wizardConfig.submitText,directiveScope.$config.successUrl=$scope.wizardConfig.successUrl)))},$scope.busy=!1,$scope.getDependentsList=function(){$scope.busy=!0,$scope.dependents=[];var response=SharedAccess.getDependents($scope.requestType.name);response.then(function(data){$scope.isRequestAccess?(angular.forEach(data,function(contract){angular.forEach(contract.memberDetails,function(member){member.isMinor=member.age<18,member.isSubscriberOrSpouse=contract.isSubscriber||contract.isSpouse,$scope.isDualCoveredMinor=$scope.isDualCoveredMinor?$scope.isDualCoveredMinor:(contract.isSubscriber||contract.isSpouse)&&member.isDualCoveredMinor?!0:!1,$scope.isNotSubscriberOrSpouseWithMinor=$scope.isNotSubscriberOrSpouseWithMinor?$scope.isNotSubscriberOrSpouseWithMinor:contract.isSubscriber||contract.isSpouse||!member.isMinor?!1:!0,$scope.dependents.push(member)})}),$scope.busy=!1):$scope.isGrantAccess&&(angular.forEach(data,function(contract){angular.forEach(contract.memberDetails,function(member){member.isMinor=member.age<18,member.isMinor||$scope.dependents.push(member)})}),$scope.busy=!1)})["catch"](function(){Notifications.error("Oops… we were unable to retrieve members on your contract.  Please try again later."),$scope.busy=!1,$scope.Errored=!0}),$busy.watch(response)},$scope.wizardConfig={backUrl:"#/share-access",successUrl:"app/shared-access/views/wizard-steps/"+$scope.requestType.name+"-confirmation.html",submitText:$scope.requestType.title,prevText:"Back"},$scope.model={},$scope.selectUser=function(user){$scope.model.firstName=user.memberFirstName,$scope.model.lastName=user.memberLastName,$scope.model.fullName=user.memberFullName,$scope.model.ePersonId=user.ePersonId,$scope.model.imageUrl=user.imageUrl,$scope.model.isMinor=user.isMinor,$scope.model.age=user.age,$scope.model.isDualCoveredMinor=user.isDualCoveredMinor,$scope.setInvitation(user),$scope.model.isMinor&&($scope.insuranceSteps[3].showNextButton=!1,this.wizardForm.$setDirty()),this.wizard.next(user.memberFullName)},$scope.getSelectUserText=function(user){return user.ePersonId||user.isMinor||user.hasAccount?"Select":"Invite"},$scope.resetModel=function(){$scope.model={}},$scope.submitAccessRequest=function(){var request={ePersonId:$scope.model.ePersonId,toFirstName:$scope.model.firstName,toLastName:$scope.model.lastName,toUser:$scope.model.email,requestType:$scope.requestType.value,accessCode:$scope.model.accessCode,expires:"automatic"===$scope.model.expirationType,age:$scope.model.age,isMinor:$scope.model.isMinor};if("insurance"!==$scope.accessType.type){var result=SharedAccess.newRequest(request);return $busy.watch(result),result.then(function(){Notifications.success($scope.requestType.successMessage)},function(resp){resp&&resp.data&&"existing"===resp.data.replace(/['"]+/g,"").toLowerCase()?Notifications.error($scope.requestType.existsErrorMessage):resp&&resp.data&&"pending"===resp.data.replace(/['"]+/g,"").toLowerCase()?Notifications.error($scope.requestType.pendingErrorMessage):resp&&resp.data&&"duplicaterequest"===resp.data.replace(/['"]+/g,"").toLowerCase()?Notifications.error($scope.requestType.duplicateRequestErrorMessage):Notifications.error($scope.requestType.errorMessage)}),result}if(request.expires="automatic"===$scope.model.expirationType,request.email=$scope.model.email,$scope.accessType.params.indexOf("invitation")>-1){var invitationRequest=SharedAccessRelationships.sendInvitation(request.toFirstName,request.toUser);return $busy.watch(invitationRequest),invitationRequest.then(function(){Notifications.success("Your invitation has been sent.")})["catch"](function(err){$log.debug("error relationship request",err),Notifications.error("Failed to send your invitation.")}),invitationRequest}var isGrant=!!request.requestType,isRequest=!isGrant,relationshipRequest=SharedAccessRelationships.createRelationship(request.ePersonId,!1,!0,isRequest,isGrant,request.accessCode,request.expires,request.email,request.toFirstName,request.toLastName,request.age,request.isMinor).then(function(data){if(Notifications.success($scope.requestType.successMessage),request.isMinor){var user={name:request.toFirstName+" "+request.toLastName,ePersonId:request.ePersonId,isInsurance:!0,relationshipId:data.relationshipId};$rootScope.$broadcast("relationshipsChanged",{user:user,action:"approve",isGrant:!0})}})["catch"](function(err){$log.debug("error relationship request",err),err&&err.data&&err.data.message&&"existing"===err.data.message.replace(/['"]+/g,"").toLowerCase()?Notifications.error($scope.requestType.existsErrorMessage):err&&err.data&&err.data.message&&"pending"===err.data.message.replace(/['"]+/g,"").toLowerCase()?Notifications.error($scope.requestType.pendingErrorMessage):Notifications.error($scope.requestType.errorMessage)});$busy.watch(relationshipRequest)}}angular.module("sharedAccess").controller("CreateAccessController",CreateAccessController);var requestTypes={request:{title:"Request Access",value:0,name:"request",existsErrorMessage:"Oops, it looks like you already have access to this MyHealth account. You may view this person’s account from the “Change User” menu next to your profile photo.  If you continue experiencing trouble accessing this person’s account, please contact customer support for more help. Please try resubmitting your request with another MyHealth user.",pendingErrorMessage:"Oops, it looks like you have already submitted a request to access this person’s MyHealth account. You may cancel and resubmit this request on your Share Access page or you will be notified when this person has responded to your original offer.",successMessage:"Your request to receive access has been sent.",errorMessage:"Failed to send your request to get access.",duplicateRequestErrorMessage:"Oops, it looks like this person already has a pending offer to share their account with you. You may cancel this request and visit your Share Access page to view this offer."},grant:{title:"Grant Access",value:1,name:"grant",existsErrorMessage:"Oops, it looks like you have already granted access of your MyHealth account to this person. If you continue experiencing trouble accessing this person’s account, please contact customer support for more help.",pendingErrorMessage:"Oops, it looks like you have already offered this person access to your MyHealth account. You may cancel and resubmit this offer on your Share Access page or you will be notified when this person has responded to your original offer.",successMessage:"Your request to grant access has been sent.",errorMessage:"Failed to send your request to grant access.",duplicateRequestErrorMessage:"Oops, it looks like this person already has a pending request to access your MyHealth account. You may cancel this offer to share and visit your Share Access page to view this request."}};CreateAccessController.$inject=["$rootScope","$scope","$route","SharedAccess","SharedAccessRelationships","Notifications","$busy","$log"]}(),function(){"use strict";function AcceptHipaaController($rootScope,$scope,Notifications,combinedSharedAccess,$busy,$location){function approveRequest(){$scope.request=combinedSharedAccess.getData(),$scope.request.expires="automatic"===$scope.model.expirationType;var promise=combinedSharedAccess.approve($scope.request).then(function(user){$scope.request&&$scope.request.isRelationshipService&&("/share-access"===$scope.request.path?$location.path("/share-access"):$location.path("/timeline")),$scope.request.isRelationshipService?$rootScope.$broadcast("relationshipsChanged",{user:$scope.request,action:"approve"}):$rootScope.$broadcast("relationshipsChanged",{user:user,action:"approve"})})["catch"](function(){Notifications.error("Looks like something went wrong while saving your Shared Access settings, please try again. If you continue experiencing problems, please contact MyHealth customer service at 877.308.5083.")});$busy.watch(promise)}$scope.model={},$scope.approveRequest=approveRequest,$scope.back=function(){$location.path("/share-access")}}var module=angular.module("sharedAccess");module.controller("AcceptHipaaController",["$rootScope","$scope","Notifications","combinedSharedAccess","$busy","$location",AcceptHipaaController])}(),function(){"use strict";function CombinedSharedAccessService($q,$log,$resource,$url,cacher,SharedAccess,SharedAccessRelationships){function removeAccess(request,user){var promise;return promise=user.isRelationshipService?SharedAccessRelationships.rejectRelationship(user,isGrant(request)):SharedAccess.removeAccess(user.proxyId),promise.then(function(results){return cacher.clear(),results})}function cancel(request){var promise;if(request.isRelationshipService)promise=SharedAccessRelationships.cancelRelationship(request,isGrant(request));else{var isFailedAttempt=!1;request.failedAttempts>2&&(isFailedAttempt=!0),promise=SharedAccess.cancelRequest(request.proxyRequestId,isFailedAttempt)}return promise.then(function(results){return cacher.clear(),results.results})}function approve(request){var promise;return promise=request&&request.isRelationshipService?SharedAccessRelationships.approveRelationship(request,isGrant(request)):isGrant(request)?SharedAccess.approveGrant(request):SharedAccess.approveRequest(request),promise.then(function(results){return cacher.clear("getPending"),results})}function getPending(){return $q.all([SharedAccessRelationships.getRelationships(),SharedAccess.getPending()]).then(function(pendingData){var pendingRelationshipsList=[];return pendingData[0]&&(pendingRelationshipsList=pendingData[0].pendingList),$.when(_.union(pendingData[1]||[],pendingRelationshipsList))})["catch"](function(err){return $log.debug(err),$q.reject(err)})}function getRelationships(){return $q.all([SharedAccess.getRelationships(),SharedAccessRelationships.getRelationships()]).then(function(relationships){var data={legacy:relationships[0],relationships:relationships[1]};return data})["catch"](function(err){return $q.reject(err)})}function getGrantors(){return getRelationships().then(function(data){var grantors=_.union(data.legacy.grantors,data.relationships.grantors);return grantors})["catch"](function(err){return $q.reject(err)})}function getGrantees(){return getRelationships().then(function(data){var grantees=_.union(data.legacy.grantees,data.relationships.grantees);return grantees})["catch"](function(err){return $q.reject(err)})}function isGrant(request){return request&&("GRANT"===request.description||"GRANT"===(request.requestType||"").toUpperCase())}function isFromUser(request,user){if(request.isRelationshipService)return isGrant(request)?user.ePersonId!==request.granteeEPersonId:user.ePersonId===request.granteeEPersonId;var emailsNotEmpty=user.email&&request.fromUser,emailMatch=emailsNotEmpty&&user.email.toLowerCase()===request.fromUser.toLowerCase(),ePersonIdMatch=user.ePersonId===request.fromEPersonId;return emailMatch||ePersonIdMatch}function saveData(request){this.stash=request}function getData(){return this.stash}function accessGrantor(proxyId,proxyType){return"member"===(proxyType||"").toLowerCase()?greenProxy.proxy({relationshipId:proxyId}).$promise:proxyResource.proxy({id:proxyId}).$promise}var routes={members:$url.apiRoute("SharedAccess"),relationships:$url.apiRoute("Relationship")},proxyResource=$resource(routes.members,{},{proxy:{url:$url.apiRoute("SharedAccess")}}),greenProxy=$resource(routes.relationships,{},{proxy:{url:$url.apiRoute("Relationship")}});this.stash="";var service={cancel:cancel,approve:approve,getPending:getPending,getGrantors:getGrantors,getGrantees:getGrantees,getRelationships:getRelationships,isGrant:isGrant,isFromUser:isFromUser,saveData:saveData,getData:getData,accessGrantor:accessGrantor,removeAccess:removeAccess};return service}angular.module("sharedAccess").factory("combinedSharedAccess",CombinedSharedAccessService),CombinedSharedAccessService.$inject=["$q","$log","$resource","$url","cacher","SharedAccess","SharedAccessRelationships"]}(),function(){"use strict";var module=angular.module("sharedAccess"),service=function($resource,appConfig,$rootScope,$q,$cacheFactory,FeatureStatus,filterFilter,$url,$log,cacher){var routes={members:$url.apiRoute("SharedAccess"),relations:[appConfig.apiEndpoint,"SharedAccess",":id"].join("/"),pending:[appConfig.apiEndpoint,"SharedAccessSetup"].join("/"),request:[appConfig.apiEndpoint,"SharedAccessSetup",":id"].join("/"),dependents:[appConfig.apiEndpoint,"FamilyView"].join("/")},resources={relations:$resource(routes.relations),pending:$resource(routes.pending,null,{update:{method:"PUT"},get:{isArray:!0}}),request:$resource(routes.request),member:$resource(routes.members),dependents:$resource(routes.dependents,null,{get:{isArray:!0}}),deleteAccess:$resource(routes.relations)};this.getDependents=function(requestType){return resources.dependents.get({requestType:requestType}).$promise},this.getRelationships=function(){return cacher.cache("SharedAccess-Relationships",function(){return resources.relations.get().$promise.then(function(results){var data={grantees:[],grantors:[]};return FeatureStatus.checkFeatureStatus("familyView")?(data.grantors=results.sharedAccessGrantors,data.grantees=results.sharedAccessGrantees):(data.grantors=filterFilter(results.sharedAccessGrantors,{patientProxy:!0}),data.grantees=filterFilter(results.sharedAccessGrantees,{patientProxy:!0})),data.grantees.forEach(function(currentItem){for(var x=0;x<currentItem.permissions.length;x+=1)"STANDARD_ADOLESCENT_MEDICAL_SHARED_ACCESS"===currentItem.permissions[x].permissionlabel?currentItem.accessLevel="Standard Access":"ENHANCED_ADOLESCENT_MEDICAL_SHARED_ACCESS"===currentItem.permissions[x].permissionlabel&&(currentItem.accessLevel="Enhanced Access")}),data})["catch"](function(err){$log.debug(err)})})},this.getPending=function(){return cacher.cache("SharedAccess-Pending",resources.pending.get().$promise)},this.approveGrant=function(proxyRequest){return resources.pending.update(proxyRequest).$promise.then(function(results){return cacher.clear(["SharedAccess-Relationships","SharedAccess-Pending"]),results})},this.cancelRequest=function(id,passcodeFailed){return resources.request.remove({id:id,passcodeFailed:passcodeFailed}).$promise.then(function(results){return cacher.clear(["SharedAccess-Relationships","SharedAccess-Pending"]),results})},this.approveRequest=function(proxyRequest){return resources.pending.update(proxyRequest).$promise.then(function(results){return cacher.clear(["SharedAccess-Relationships","SharedAccess-Pending"]),results})},this.newRequest=function(request){return resources.request.save(request).$promise.then(function(results){return cacher.clear(["SharedAccess-Relationships","SharedAccess-Pending"]),results})},this.removeAccess=function(id){return resources.deleteAccess.remove({id:id}).$promise.then(function(results){return cacher.clear(["SharedAccess-Relationships","SharedAccess-Pending"]),results})}};module.service("SharedAccess",["$resource","appConfig","$rootScope","$q","$cacheFactory","FeatureStatus","filterFilter","$url","$log","cacher",service])}(),function(){"use strict";var module=angular.module("sharedAccess"),service=function($resource,$q,$log,appConfig,$url,cacher){function transformRelationship(relationships,Resource){return _.map(relationships,function(relationship){return relationship.isMedical=angular.isDefined(_.find(relationship.permissions,{permissionlabel:"MEDICAL"})),relationship.isInsurance=angular.isDefined(_.find(relationship.permissions,{permissionlabel:"INSURANCE"})),relationship.isRelationshipService=!0,new Resource(relationship)})}function transformResponse(data){var transformed=angular.fromJson(data)||{};return transformed&&transformed.grantees&&(transformed.grantees&&transformed.grantees.length&&(transformed.grantees=transformRelationship(transformed.grantees,resources.relationships)),transformed.grantors&&transformed.grantors.length&&(transformed.grantors=transformRelationship(transformed.grantors,resources.relationships)),transformed.pendingList&&transformed.pendingList.length&&(transformed.pendingList=transformRelationship(transformed.pendingList,resources.relationships))),transformed}this.fetching=!1;var routes={relationships:[appConfig.apiEndpoint,"Relationship"].join("/")},resources={relationships:$resource(routes.relationships,{id:"@relationshipId",status:"@relationshipstatus",passcode:"@accessCode",relationshipType:"@relationshipType",expires:"@expires"},{get:{transformResponse:transformResponse},update:{method:"PUT"}}),invitation:$resource(routes.relationships,{},{send:{url:$url.apiRoute("Relationship")}})},relationshipsCacheKey="GetRelationships",relationshipStatuses={active:"ACTIVE",cancelled:"CANCELLED",denied:"DENIED",expired:"EXPIRED",pending:"PENDING",removed:"REMOVED"};this.getRelationships=function(){return cacher.cache(relationshipsCacheKey,function(){return resources.relationships.get().$promise.then(function(data){return data})["catch"](function(err){return $log.debug("Got Relationship Grantors",err),$q.reject(err)})})},this.cancelRelationship=function(relationship,isGrant){return relationship.relationshipstatus=relationshipStatuses.denied,relationship.relationshipType=isGrant?"GRANT":"REQUEST",cacher.clear(relationshipsCacheKey),relationship.$update()},this.rejectRelationship=function(relationship,isGrant){return relationship.relationshipstatus=relationshipStatuses.removed,relationship.relationshipType=isGrant?"GRANT":"REQUEST",cacher.clear(relationshipsCacheKey),relationship.$update()},this.approveRelationship=function(relationship,isGrant){return relationship.relationshipstatus=relationshipStatuses.active,relationship.relationshipType=isGrant?"GRANT":"REQUEST",cacher.clear(relationshipsCacheKey),relationship.$update({})},this.createRelationship=function(toEpersonId,isMedical,isInsurance,isRequest,isGrant,Passcode,expires,email,firstName,lastName,age,isMinor){var relationship=new resources.relationships({ePersonId:toEpersonId,isMedical:isMedical,isInsurance:isInsurance,isGrant:isGrant,isRequest:isRequest,Passcode:Passcode,expires:!0,email:email});return isMinor&&(relationship.firstName=firstName,relationship.lastName=lastName,relationship.age=age,relationship.isMinor=isMinor),void 0===expires?relationship.expires=!0:relationship.expires=expires,relationship.$save(function(data){return cacher.clear(relationshipsCacheKey),$log.debug("saving a relationship",data),data},function(err){return $log.debug("saving a relationship",err),$q.reject(err)})},this.sendInvitation=function(name,email){return cacher.clear(relationshipsCacheKey),resources.invitation.send({name:name,emailAddress:email}).$promise}};module.service("SharedAccessRelationships",["$resource","$q","$log","appConfig","$url","cacher",service])}(),function(){"use strict";function filter(){return function(users,currentEPId){if(!currentEPId)return users;var filteredUsers=[];return users?(users.forEach(function(item){(item.ePersonId?item.ePersonId!==currentEPId:item.grantorEPersonId!==currentEPId)&&filteredUsers.push(item)}),filteredUsers):!1}}var module=angular.module("sharedAccess");module.filter("duplicateUser",filter)}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/share-access",{title:"Shared Access",templateUrl:"app/shared-access/views/shared-access.html",controller:"SharedAccessController",feature:"sharedAccess",roles:["blue","green","lobby"]}),$routeProvider.when("/share-access/:requestType",{title:"Shared Access",templateUrl:"app/shared-access/views/create-access.html",controller:"CreateAccessController",
feature:"sharedAccess"}),$routeProvider.when("/hipaa-auth",{title:"Shared Access",templateUrl:"app/shared-access/views/wizard-steps/insurance/request-hipaa-auth.html",controller:"AcceptHipaaController",feature:"sharedAccess"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("vdt",["services"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/export-medical-record",{title:"Export Clinical Records",templateUrl:"app/vdt/views/vdt.html",controller:"VdtCtrl",roles:["blue"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("vdt").constant("vdtConfig",{apiRoutes:{vdt:"/ClinicalDocument"},messages:{shareMsg:"Sending files...",shareSuccessMsg:"Thank you; we are transmitting your files. Please contact your provider to confirm that they have received them.",shareFailureMsg:"An issue has occurred when transmitting your files; please click the “Download/Share Again” button to retry.",downloadMsg:{mobileApp:"Your download is in progress...",web:"Your download should begin shortly.  If you are experiencing issues retrieving your files, please visit your app store and search “storage” or “unzip” for a third party storage application."},downloadFailureMsg:"An issue has occurred when downloading your files; please click the “Download/Share Again” button to retry.",downloadSuccessMsg:{android:"Your download is complete. Your files are located in the MyHealth Downloads folder created in your device storage.  If you are experiencing issues retrieving your files, please visit your app store and search “file manager” for a file manager application.",iOS:"Your download is complete.  Please connect to iTunes and look in the MyHealth application storage to retrieve your files."}}}),function(){"use strict";function controller($scope,$routeParams,VDT,Notifications,usSpinnerService,appConfig,UserAgent,$http,$window,Visits){$scope.recordType="",$scope.wizardStep=1,$scope.shareForm={},$scope.selectedVisit={id:$routeParams.id,system:$routeParams.system,name:""},Visits.getDetail($scope.selectedVisit.id,$scope.selectedVisit.system).then(function(data){$scope.visit=data,$scope.visit&&($scope.visit.location&&($scope.visit.office=$scope.visit.location),$scope.visit.name&&($scope.selectedVisit.name=$scope.visit.name))},function(){Notifications.error("Error: Failed to load Appointment information.")}),$scope.setMessages=function(){$scope.shareMsg="Sending files...",$scope.shareSuccessMsg="Thank you; we are transmitting your files. Please contact your provider to confirm that they have received them.",$scope.shareFailureMsg="An issue has occurred when transmitting your files; please click the “Download/Share Again” button to retry.",UserAgent.deviceIsAndroid||UserAgent.deviceIsIOS?($scope.downloadMsg="Your download is in progress...",$scope.downloadFailureMsg="An issue has occurred when downloading your files; please click the “Download/Share Again” button to retry.",UserAgent.deviceIsAndroid?$scope.downloadSuccessMsg="Your download is complete. Your files are located in the MyHealth Downloads folder created in your device storage.  If you are experiencing issues retrieving your files, please visit your app store and search “file manager” for a file manager application.":UserAgent.deviceIsIOS&&($scope.downloadSuccessMsg="Your download is complete.  Please connect to iTunes and look in the MyHealth application storage to retrieve your files.")):$scope.downloadMsg="Your download should begin shortly.  If you are experiencing issues retrieving your files, please visit your app store and search “storage” or “unzip” for a third party storage application."},$scope.selectRecordType=function(){"EPIC"===$scope.selectedVisit.system?$scope.recordType="singleVisit":"CERNER"===$scope.selectedVisit.system&&($scope.recordType="visitSummary")},$scope.getVisits=function(){usSpinnerService.spin("spinner-main"),$scope.loading=!0,VDT.getVisits().$promise.then(function(data){$scope.visits=data,usSpinnerService.stop("spinner-main"),$scope.loading=!1},function(){$scope.visits=[],Notifications.error("Error: Failed to load appointments."),usSpinnerService.stop("spinner-main"),$scope.loading=!1})},$scope.$watch(function(){return $scope.wizardStep},function(){window.scrollTo(0,0)}),$scope.buttonAvailability=function(buttonId){switch(buttonId){case"agree":return 1===$scope.wizardStep?!0:!1;case"previous":return $scope.wizardStep>1?!0:!1;case"cancel":return!0;default:return!1}},$scope.prevStep=function(){$scope.setMessages(),$scope.wizardStep>4?$scope.wizardStep=4:$scope.wizardStep-=1},$scope.nextStep=function(){$scope.wizardStep+=1},window.dataTileOnload=function(){$window.scrollTo(0,0);var tile=document.querySelector(".data-tile");if(tile){if(null===tile.contentWindow.document.getElementById("ccdform"))return;$scope.epicForm=tile.contentWindow.document.getElementById("ccdform"),$scope.epicFormData=angular.element($scope.epicForm).serialize(),(UserAgent.deviceIsAndroid||UserAgent.deviceIsIOS)&&($scope.epicForm.submit=$scope.epicDownload)}},$scope.epicDownload=function(){$scope.downloading=!0,$http({method:$scope.epicForm.method,url:$scope.epicForm.action,data:angular.element($scope.epicForm).serialize(),responseType:"arraybuffer"}).success(function(data){var filePath,fileName="ClinicalDocuments_"+Math.random().toString(36).substring(7)+".zip";UserAgent.deviceIsAndroid?filePath=window.cordova.file.externalRootDirectory:UserAgent.deviceIsIOS&&(filePath=window.cordova.file.documentsDirectory),window.resolveLocalFileSystemURL(filePath,function(dirEntry){function saveFile(directory){directory.getFile(fileName,{create:!0},function(fileEntry){fileEntry.createWriter(function(writer){var blob=new Blob([data],{type:"application/zip"});writer.onwriteend=function(){$scope.downloadMsg=$scope.downloadSuccessMsg,$scope.downloading=!1,$scope.$apply()},writer.write(blob)},function(){$scope.downloadMsg=$scope.downloadFailureMsg,$scope.downloading=!1,$scope.$apply()})},function(){$scope.downloadMsg=$scope.downloadFailureMsg,$scope.downloading=!1,$scope.$apply()})}UserAgent.deviceIsAndroid?dirEntry.getDirectory("MyHealth Downloads",{create:!0},function(directory){saveFile(directory)},function(){$scope.downloadMsg=$scope.downloadFailureMsg,$scope.downloading=!1,$scope.$apply()}):UserAgent.deviceIsIOS&&saveFile(dirEntry)},function(){$scope.downloadMsg=$scope.downloadFailureMsg,$scope.downloading=!1,$scope.$apply()})}).error(function(){$scope.downloadMsg=$scope.downloadFailureMsg,$scope.downloading=!1,$scope.$apply()})},$scope.cernerDownload=function(){$scope.wizardStep=3;var url;url=[appConfig.apiEndpoint,"clinicalDocument",$scope.selectedVisit.id].join("/"),UserAgent.deviceIsAndroid||UserAgent.deviceIsIOS?($scope.downloading=!0,url=encodeURI(url),window.requestFileSystem(window.LocalFileSystem.PERSISTENT,0,function(fileSystem){var filePath=fileSystem.root.toURL(),fileName=["ClinicalDocuments",$scope.selectedVisit.name.replace(" ","_"),Math.random().toString(36).substring(7)].join("_")+".zip";UserAgent.deviceIsAndroid?filePath=[filePath,"MyHealth Downloads",fileName].join("/"):UserAgent.deviceIsIOS&&(filePath+=fileName);var fileTransfer=new window.FileTransfer;fileTransfer.download(url,filePath,function(){$scope.downloadMsg=$scope.downloadSuccessMsg,$scope.downloading=!1,$scope.$apply()},function(){$scope.downloadMsg=$scope.downloadFailureMsg,$scope.downloading=!1,$scope.$apply()})},function(){$scope.downloadMsg=$scope.downloadFailureMsg,$scope.downloading=!1,$scope.$apply()})):$window.open(url)},$scope.download=function(){"EPIC"===$scope.selectedVisit.system?$scope.epicDownload():"CERNER"===$scope.selectedVisit.system&&$scope.cernerDownload()},$scope.share=function(){$scope.sharing=!0,$scope.wizardStep=4,"singleVisit"===$scope.recordType?VDT.transmit($scope.shareForm.directAddress,$scope.shareForm.message,$scope.selectedVisit.id).$promise.then(function(){$scope.shareMsg=$scope.shareSuccessMsg,$scope.sharing=!1},function(){$scope.shareMsg=$scope.shareFailureMsg,Notifications.error("Error: Failed to share files"),$scope.sharing=!1}):"visitSummary"===$scope.recordType&&VDT.transmit($scope.shareForm.directAddress,$scope.shareForm.message,$scope.selectedVisit.id).$promise.then(function(){$scope.shareMsg=$scope.shareSuccessMsg,$scope.sharing=!1},function(){$scope.shareMsg=$scope.shareFailureMsg,Notifications.error("Error: Failed to share files"),$scope.sharing=!1})},$scope.reset=function(){$scope.wizardStep=1,$scope.shareForm={},$scope.setMessages()},$scope.setMessages()}var module=angular.module("vdt");module.controller("VdtCtrl",["$scope","$routeParams","VDT","Notifications","usSpinnerService","appConfig","UserAgent","$http","$window","Visits",controller])}(),function(){"use strict";function service($resource,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,"clinicalDocument/:id"].join("/"),resource=$resource(route);this.getVisits=function(){return resource.query()},this.download=function(encounterId){return resource.get({id:encounterId})},this.transmit=function(directAddress,message,encounterId){return resource.save({encounterId:encounterId,directAddress:directAddress,body:message})}}var module=angular.module("vdt");module.service("VDT",["$resource","appConfig",service])}(),angular.module("mdlive",["services","filters"]),angular.module("mdlive").constant("mdliveConfig",{}),function(){"use strict";function _routeConfiguration($routeProvider){$routeProvider.when("/mdlive",{title:"Virtual Visits",templateUrl:"app/mdlive/views/mdlive.html",controller:"MdliveCtrl",roles:["green"]})}var app=angular.module("app");app.config(["$routeProvider",_routeConfiguration])}(),function(){"use strict";function _controller($scope,config,AppLauncher,UserAgent,FeatureStatus,appConfig){$scope.title="MDLive",$scope.launchMDLive=function(){AppLauncher.launchAppOrStore({android:{appAddress:"com.mdlive.mobile",storeAddress:"market://details?id=com.mdlive.mobile"},ios:{appAddress:"mdlive://",storeAddress:"itms://itunes.apple.com/us/app/mdlive/id839671393?mt=8"}})},$scope.isMobileApp=UserAgent.isMobileApp,$scope.videoVisitsEnabled=FeatureStatus.checkFeatureStatus("videoVisits"),$scope.contactCenterPhoneNumber=appConfig.contactCenterPhoneNumber,$scope.contactCenterMarketingPhoneNumber=appConfig.contactCenterMarketingPhoneNumber}var module=angular.module("mdlive");module.controller("MdliveCtrl",["$scope","mdliveConfig","AppLauncher","UserAgent","FeatureStatus","appConfig",_controller])}(),angular.module("rx-manager",["services","filters"]),angular.module("rx-manager").constant("rx-managerConfig",{}),function(){"use strict";function _routeConfiguration($routeProvider){$routeProvider.when("/rx-manager",{title:"Rx Manager",templateUrl:"app/rx-manager/views/rx-manager.html",controller:"RxManagerCtrl",roles:["green"],authorization:"RX_MANAGER"})}var app=angular.module("app");app.config(["$routeProvider",_routeConfiguration])}(),function(){"use strict";function _controller($scope,Authorization,Contracts,Notifications,$busy,Moment,easternTimeFilter){if($scope.title="Rx Manager",$scope.loading=!0,$scope.isGvsu=Authorization.isGvsu(),$scope.isGentex=Authorization.isGentex(),$scope.currentYear=parseInt(easternTimeFilter(new Moment,"YYYY")),$scope.isGentex){var promise=Contracts.getContracts();$busy.watch(promise),promise.then(function(contracts){$scope.isGentexNonHSA=!_.chain(contracts).map("isHsa").includes(!0).value()},function(){Notifications.error("<b>Error:</b> We were unable to load contract information.")})["finally"](function(){$scope.loading=!1})}else $scope.loading=!1}angular.module("rx-manager").controller("RxManagerCtrl",_controller),_controller.$inject=["$scope","Authorization","Contracts","Notifications","$busy","Moment","easternTimeFilter"]}(),angular.module("killswitch",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/status",{title:"Status",templateUrl:"app/killswitch/views/status-page.html"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function KillswitchCtrl(AppStore,KillSwitch,$scope,appConfig,Environment,$location,UserAgent,$window){$scope.accessProblemUrl=appConfig.accessProblemUrl[Environment.get().brand],$scope.getWebsiteUrl=function(){return"spectrum"===appConfig.brand||"sh"===Environment.get().brand?"https://myhealth.spectrumhealth.org":"https://myhealth.priorityhealth.com"},$scope.openMyHealthWebsite=function(){return $window.open($scope.getWebsiteUrl(),"_system"),!1},$scope.launchUpdate=function(){AppStore.launchApp()},$scope.getNewApp=function(){var newAppUrl=KillSwitch.getRetiredUrl();return void 0===newAppUrl||null===newAppUrl||""===newAppUrl?newAppUrl=$scope.getWebsiteUrl():0!==newAppUrl.indexOf("http")&&(newAppUrl=$location.protocol()+"://"+newAppUrl),$window.open(newAppUrl,"_system"),!1},$scope.dismissStatusTile=function(){$scope.statusTileDismissed=!0,$location.path("/login")},appConfig.brand&&""!==appConfig.brand?$scope.brand=appConfig.brand:"ph"===Environment.get().brand?$scope.brand="priority":$scope.brand="spectrum",$scope.getAppStatus=function(reloadStatus){$scope.threatlevel=KillSwitch.getAppStatus($scope.brand,reloadStatus)},$scope.$on("userLoggedOut",function(){delete $scope.threatlevel}),$scope.$on("sessionDeleted",function(){$scope.getAppStatus($scope.brand,!0)}),$scope.refreshAppStatus=function(){$scope.threatlevel=!1,$scope.getAppStatus()},UserAgent.isMobileApp&&$window.document.addEventListener("resume",$scope.refreshAppStatus,!1)}var module=angular.module("killswitch",[]);module.controller("KillswitchCtrl",["AppStore","KillSwitch","$scope","appConfig","Environment","$location","UserAgent","$window",KillswitchCtrl])}(),function(){"use strict";function service(FeatureStatus,appConfig){var NO_UPDATE="None",MINOR_UPDATE="Minor",MAJOR_UPDATE="Major",retiredUrl="",getRetiredUrl=function(){return retiredUrl},getUpdateType=function(app,store){return app[0]>store[0]?NO_UPDATE:app[0]<store[0]?MAJOR_UPDATE:app[1]>store[1]?NO_UPDATE:app[1]<store[1]?MAJOR_UPDATE:app[2]>store[2]?NO_UPDATE:app[2]<store[2]?MINOR_UPDATE:NO_UPDATE},getThreatLevel=function(appStatus,webStatus,majorUpdate,minorUpdate){return appStatus||webStatus?!appStatus&&webStatus?"high":appStatus&&majorUpdate?"elevated":appStatus&&minorUpdate?"guarded":!majorUpdate&&!minorUpdate&&appStatus&&webStatus?"low":void 0:"severe"},getAppStatus=function(brand,reloadStatus){var appVersion,appArray,storeVersion,storeArray,threatLevel,minimumVersion,appStatus,webStatus,majorUpdate,minorUpdate,retiredFlag,data;if(data=FeatureStatus.getFeatureStatus(reloadStatus),"string"==typeof data)return"fallback";if(void 0===data[brand]||null===data[brand])return"severe";if(minimumVersion=data[brand].minimumVersion,appStatus=data[brand].appAvailable,webStatus=data[brand].webAvailable,retiredFlag=data[brand].retiredFlag,void 0!==data[brand].retiredUrl&&null!==data[brand].retiredUrl&&""!==data[brand].retiredUrl&&(retiredUrl=data[brand].retiredUrl),appConfig.killswitch&&angular.isDefined(window.cordova))if(retiredFlag===!0)threatLevel="retired";else{appArray=appConfig.version.split("."),appVersion=appArray.map(Number),storeArray=minimumVersion.split("."),storeVersion=storeArray.map(Number);var updateType=getUpdateType(appVersion,storeVersion);majorUpdate=updateType===MAJOR_UPDATE,minorUpdate=updateType===MINOR_UPDATE,threatLevel=getThreatLevel(appStatus,webStatus,majorUpdate,minorUpdate)}else threatLevel="low",webStatus||(threatLevel="severe");return threatLevel};return{getRetiredUrl:getRetiredUrl,getAppStatus:getAppStatus}}var module=angular.module("killswitch");module.service("KillSwitch",["FeatureStatus","appConfig",service])}(),angular.module("announcements",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/announcements",{title:"Announcements",templateUrl:"app/announcements/views/announcements.html"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("announcements").constant("announcementsConfig",{apiRoutes:{announcements:"/announcements"}}),function(){"use strict";function AnnouncementsController(Announcements,$scope,Notifications,Login){$scope.announcements=[],$scope.getAnnouncements=function(){Announcements.getAnnouncements().$promise.then(function(data){$scope.announcements=data},function(){Login.getLoggedInStatus()&&Notifications.error("Error: Failed to load announcements.")})},$scope.close=function(announcement){$scope.announcements.splice($scope.announcements.indexOf(announcement),1)}}var module=angular.module("announcements");module.controller("AnnouncementsController",["Announcements","$scope","Notifications","Login",AnnouncementsController])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function service($resource,config,appConfig){var resource=$resource(resourceRoute(appConfig.apiEndpoint,config.apiRoutes.announcements));this.getAnnouncements=function(){return resource.query()}}var module=angular.module("announcements");module.service("Announcements",["$resource","announcementsConfig","appConfig",service])}(),angular.module("cost-estimator",["services","filters"]),angular.module("cost-estimator").constant("cost-estimatorConfig",{apiRoutes:{costestimator:"costestimator/url"}}),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/costs/cost-estimator",{title:"Cost Estimator",templateUrl:"app/cost-estimator/views/cost-estimator.html",controller:"CostEstimatorCtrl",roles:["green"],authorization:"COST_ESTIMATOR"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function controller($scope,$sce,CostEstimator){$scope.title="Cost Estimator",$scope.getCostCalcUrl=function(){$scope.isLoading=!0,CostEstimator.get().$promise.then(function(result){$scope.isLoading=!1,$scope.costCalcUrl=$sce.trustAsResourceUrl(result.url)},function(){$scope.isLoading=!1,$scope.error=!0})}}var module=angular.module("cost-estimator");module.controller("CostEstimatorCtrl",["$scope","$sce","CostEstimator",controller])}(),function(){"use strict";function service($resource,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,config.apiRoutes.costestimator].join("/"),global=this;global.get=function(){return $resource(route).get()}}var module=angular.module("cost-estimator");module.service("CostEstimator",["$resource","cost-estimatorConfig","appConfig",service])}(),angular.module("healthcare-bluebook",["services","filters"]),angular.module("healthcare-bluebook").constant("healthcare-bluebookConfig",{apiRoutes:{healthcarebluebook:"healthcarebluebook/url"}}),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/costs/healthcare-bluebook",{title:"HealthCare Bluebook",templateUrl:"app/healthcare-bluebook/views/healthcare-bluebook.html",controller:"HealthcareBluebookCtrl",roles:["green"],authorization:"HEALTHCARE_BLUEBOOK"}).when("/insurance/healthcare-bluebook",{title:"HealthCare Bluebook",templateUrl:"app/healthcare-bluebook/views/healthcare-bluebook.html",controller:"HealthcareBluebookCtrl",roles:["green"],authorization:"HEALTHCARE_BLUEBOOK"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function controller($scope,HcbbResource,$sce){$scope.title="Healthcare Bluebook",$scope.getHcbbUrl=function(){$scope.isLoading=!0,HcbbResource.get().$promise.then(function(result){$scope.isLoading=!1,$scope.hcbbUrl=$sce.trustAsResourceUrl(result.url)},function(){$scope.isLoading=!1,$scope.error=!0})}}var module=angular.module("healthcare-bluebook");module.controller("HealthcareBluebookCtrl",["$scope","HcbbResource","$sce",controller])}(),function(){"use strict";function service($resource,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,config.apiRoutes.healthcarebluebook].join("/"),global=this;global.get=function(){return $resource(route).get()}}var module=angular.module("healthcare-bluebook");module.service("HcbbResource",["$resource","healthcare-bluebookConfig","appConfig",service])}(),function(){"use strict";var module=angular.module("directives"),isDefined=function(what){return"undefined"!=typeof what},directive=function($compile){return{restrict:"A",scope:!0,require:"ngModel",link:function(scope,elem,attrs,ngModel){function validateUsername(email,entered){var username="";return isDefined(email)&&(username=email.split("@")[0]),passwordContains(entered,username)||passwordContains(entered,email)?!1:!0}function passwordContains(password,toContain){return password=angular.lowercase(password),toContain=angular.lowercase(toContain),-1!==password.indexOf(toContain)&&toContain.length>2?!0:!1}function squentialCharacters(password){var characterSets=password.match(/[a-z]{3,}|[A-Z]{3,}|\d{3,}/g);if(!characterSets)return!0;for(var i=0;i<characterSets.length;i+=1)for(var j=0;j<characterSets[i].length-2;j+=1)if(characterSets[i][j].charCodeAt()===characterSets[i][j+1].charCodeAt()-1){if(characterSets[i][j+1].charCodeAt()===characterSets[i][j+2].charCodeAt()-1)return!1;j+=1}return!0}if(ngModel){var popoverTemplateUrl,inputValue,showPopover=!attrs.validatorNoPopover,popoverInitialized=!1,popoverShowing=!1,popoverClasses="popover popover-validator "+attrs.validatorClasses,validatorPopoverTrigger=attrs.validatorPopoverTrigger||"focus",trigger="invalid"===validatorPopoverTrigger?"manual":validatorPopoverTrigger,fieldType=attrs.validator&&attrs.validator.length>0?attrs.validator:attrs.type;scope.$watch(attrs.ngModel,function(val){isDefined(val)&&""!==val||(val=ngModel.value),inputValue=val,scope.$broadcast("input-updated")}),attrs.$observe("compareTo",function(){scope.$broadcast("input-updated")}),scope.$on("input-updated",function(){var entered=inputValue?inputValue:"",templatesDirectory="app/validator/templates/";ngModel.isValid=!0;var setValidity=function(checkName,isValid){ngModel.$setValidity(checkName,isValid),ngModel.isValid=ngModel.isValid&&isValid};switch(fieldType){case"date":popoverTemplateUrl=templatesDirectory+"date.html";var date,formatOkay=!0,futureDate=!0;if(8===entered.length){var monthDayYearString=entered.slice(0,2)+"/"+entered.slice(2,4)+"/"+entered.slice(4);date=Date.parse(monthDayYearString),formatOkay=formatOkay&&!isNaN(date),futureDate=date<=Date.now()}formatOkay=formatOkay&&"string"==typeof entered&&Boolean(entered.match(/^(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(19|20)\d\d$/)),setValidity("date_badFormat",formatOkay),setValidity("future_date",futureDate);break;case"contract-number":popoverTemplateUrl=templatesDirectory+"contract-number.html",setValidity("contract-number",/^(?:[0-9]{9}-[0-9]{2}|[0-9]{7,10})$/.test(entered));break;case"email":popoverTemplateUrl=templatesDirectory+"email.html",setValidity("email",/.+\@.+\..+/.test(entered)),setValidity("noSpace",/^\S*$/.test(entered)),setValidity("tooLong",/^.{0,64}$/.test(entered)),setValidity("inUse",""===attrs.emailInUse||attrs.emailInUse!==entered);break;case"emailAddress":popoverTemplateUrl=templatesDirectory+"email-address.html",setValidity("emailAddress_badFormat",/.+\@.+\..+/.test(entered));break;case"emailNotCurrentUser":popoverTemplateUrl=templatesDirectory+"email-not-current-user.html",setValidity("emailNotCurrentUser",/.+\@.+\..+/.test(entered)),entered===scope.currentUser.username&&setValidity("emailNotCurrentUser",!1);break;case"emailConfirm":if(popoverTemplateUrl=templatesDirectory+"email-confirm.html",void 0===attrs.compareTo)throw ngModel.$setValidity("validEmailConfirm",!1),new Error("The email compare field requires a compare-to attribute.");setValidity("validEmailConfirm",entered===attrs.compareTo&&entered.length>0),entered===scope.currentUser.username&&setValidity("validEmailConfirm",!1);break;case"firstName":popoverTemplateUrl=templatesDirectory+"first-name.html",setValidity("firstName_blank",null!==entered&&entered.length>0);break;case"fiveDigitZipcode":popoverTemplateUrl=templatesDirectory+"five-digit-zipcode.html",setValidity("fiveDigitZipcode_NaN",Boolean(entered.match(/\d+/g))),setValidity("fiveDigitZipcode_wrongLength",5===entered.length);break;case"lastFourSsDigits":popoverTemplateUrl=templatesDirectory+"last-four-ss-digits.html",setValidity("lastFourSsDigits_NaN",Boolean(entered.match(/^[0-9]*$/g))),setValidity("lastFourSsDigits_wrongLength",4===entered.length);break;case"lastName":popoverTemplateUrl=templatesDirectory+"last-name.html",setValidity("lastName_blank",null!==entered&&entered.length>0);break;case"password":popoverTemplateUrl=templatesDirectory+"password.html",scope.passwordRules={},scope.passwordRules.lowerCase=Boolean(entered.match("[a-z]")),scope.passwordRules.upperCase=Boolean(entered.match("[A-Z]")),scope.passwordRules.number=Boolean(entered.match(/\d+/g)),scope.passwordRules.symbol=Boolean(entered.match(/\W|_/));var passed=0;for(var error in scope.passwordRules)scope.passwordRules[error]&&(passed+=1);var minLength=entered.length>=8,whitespace=-1===entered.indexOf(" "),threeOfFive=passed>=3,consecutiveCharacters=!entered.toLowerCase().match(/(.)\1{2,}/),sequentialCharacters=squentialCharacters(entered.toLowerCase()),username=!1,name=!1;scope.loggedIn?(username=validateUsername(scope.currentUser.email,entered),name=!(passwordContains(entered,scope.currentUser.firstName)||passwordContains(entered,scope.currentUser.lastName))):(username=validateUsername(scope.accountModel.email,entered),name=!(passwordContains(entered,scope.accountModel.firstName)||passwordContains(entered,scope.accountModel.lastName))),setValidity("minLength",minLength),setValidity("whitespace",whitespace),setValidity("threeOfFive",threeOfFive),setValidity("username",username),setValidity("name",name),setValidity("consecutiveCharacters",consecutiveCharacters),setValidity("sequentialCharacters",sequentialCharacters),setValidity("validPassword",minLength&&whitespace&&threeOfFive&&username&&name&&consecutiveCharacters&&sequentialCharacters);break;case"password-confirm":if(showPopover=!1,void 0===attrs.compareTo)throw ngModel.$setValidity("validPasswordConfirm",!1),new Error("The password compare field requires a compare-to attribute.");setValidity("validPasswordConfirm",entered===attrs.compareTo&&entered.length>0);break;case"select":popoverTemplateUrl=templatesDirectory+"select.html";for(var validSelection=!1,children=elem.children(),c=0;c<children.length;c+=1){var child=children[c];validSelection=validSelection||child.selected&&null!==child.value&&child.value.length>0}setValidity("select_unused",validSelection);break;case"tel":popoverTemplateUrl=templatesDirectory+"tel.html",setValidity("tel_wrongLength",10===entered.length);break;case"text":popoverTemplateUrl=templatesDirectory+"text.html",setValidity("text_blank",entered.length>0);break;default:return}scope.errors=ngModel.$error,scope.dirty=ngModel.$dirty,scope.$watch(function(){return elem[0].className},function(classes){-1!==classes.indexOf("ng-invalid")&&"invalid"===validatorPopoverTrigger&&elem.popover("show")}),showPopover&&(popoverInitialized?ngModel.isValid&&isDefined(attrs.hideHintsWhenValid)?popoverShowing&&(elem.popover("disable").popover("hide"),popoverShowing=!1):popoverShowing||(elem.popover("enable").popover("show"),popoverShowing=!0):(elem.popover({html:!0,content:$compile("<div><ng-include src=\"'"+popoverTemplateUrl+"'\"></ng-include></div>")(scope),trigger:trigger,placement:"bottom",template:'<div class="'+popoverClasses+'"><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'}),popoverInitialized=!0,popoverShowing=!0))})}},template:"",replace:!1}};module.directive("validator",["$compile",directive])}(),angular.module("legacy",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/legacyinfo",{title:"Legacy",templateUrl:"app/legacy/views/legacy.html"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function LegacyController($scope,usSpinnerService){$scope.getLegacyInfo=function(){usSpinnerService.spin("spinner-main")}}var module=angular.module("legacy");module.controller("LegacyController",["$scope","usSpinnerService",LegacyController])}(),angular.module("pin",["services","filters"]),angular.module("pin").constant("pinConfig",{pinLength:4,refreshTokenStorageName:"myHealthRefreshToken",failedAttemptsStorageName:"myHealthFailedPinAttempts",hasRefreshTokenStorageName:"myHealthHasRefreshToken",defaultPassword:"default"}),function(){"use strict";function _routeConfiguration($routeProvider){$routeProvider.when("/pin/create",{title:"Create Pin",templateUrl:"app/pin/views/pin-shared.html",controller:"CreateCtrl"}).when("/pin/change",{title:"Change Pin",templateUrl:"app/pin/views/pin-shared.html",controller:"ChangeCtrl"}).when("/pin/login",{title:"Login",templateUrl:"app/pin/views/pin-shared.html",controller:"PinLoginCtrl"}).when("/pin/clear",{title:"Clear Pin",templateUrl:"app/pin/views/clear.html",controller:"ClearCtrl"}).when("/pin/logout",{title:"Logout",templateUrl:"app/pin/views/logout.html",controller:"PinLogoutCtrl"})}var app=angular.module("app");app.config(["$routeProvider",_routeConfiguration])}(),function(){"use strict";function _service($rootScope,config,SecureStorage,UserAgent){var pin=this;this.state={isEnabled:!1,hasRefreshToken:!1},this.initialize=function(){return pin.state.isEnabled=UserAgent.isMobileApp,SecureStorage.getValue(config.hasRefreshTokenStorageName,config.defaultPassword).then(function(value){pin.state.hasRefreshToken="true"===value},function(){pin.state.hasRefreshToken=!1})["finally"](function(){$rootScope.$broadcast(events.stateChanged,pin.state)}),this},this.setRefreshToken=function(refreshToken,passcode){return SecureStorage.clear().then(function(){return SecureStorage.setValue(config.refreshTokenStorageName,refreshToken,passcode)}).then(function(){return pin.state.hasRefreshToken=!0,$rootScope.$broadcast(events.refreshTokenChanged,refreshToken),$rootScope.$broadcast(events.stateChanged,pin.state),SecureStorage.setValue(config.hasRefreshTokenStorageName,"true",config.defaultPassword)})},this.getRefreshToken=function(passcode){return SecureStorage.getValue(config.refreshTokenStorageName,passcode)},this.unlock=function(passcode){return this.getRefreshToken(passcode)},this.clear=function(){return pin.state.hasRefreshToken=!1,$rootScope.$broadcast(events.refreshTokenChanged,null),$rootScope.$broadcast(events.stateChanged,pin.state),SecureStorage.clear()}}var module=angular.module("pin"),events={stateChanged:"pin.stateChanged",refreshTokenChanged:"pin.refreshTokenChanged"};module.service("Pin",["$rootScope","pinConfig","SecureStorage","UserAgent",_service])}(),function(){"use strict";function _controller($scope,$http,$location,$window,appConfig,config,usSpinnerService,Users,Pin,Notifications){function initPasscode(){$scope.passcode="",$scope.confirmPasscode=null,$scope.helper=!0,$scope.stepText="Enter a 4-digit passcode"}function passcodeSuccess(){var user=Users.currentUser.get();user.menuRoles.indexOf("lobby")>-1?$location.path("/welcome"):$location.path("/timeline"),$window.scrollTo(0,0)}function passcodeFailure(){}var spinner="spinner-main";$scope.title="Create Passcode",$scope.actionUrl="",$scope.actionText="Cancel",$scope.pinLength=config.pinLength,$scope.error=!1,$scope.errorText=null,$scope.helper=!0,$scope.helperText="A passcode is a quick, convenient way to sign in using a 4-digit code.",$scope.stepText=null,initPasscode(),$scope.$watch("passcode",function(passcode){passcode&&passcode.toString().length===$scope.pinLength&&($scope.errorText=null,$scope.confirmPasscode?$scope.passcode===$scope.confirmPasscode?(usSpinnerService.spin(spinner),$http.get(appConfig.apiEndpoint+"/refreshtoken").success(function(data){
Pin.setRefreshToken(data.refreshToken,$scope.passcode.toString()).then(passcodeSuccess)["catch"](passcodeFailure)["finally"](function(){usSpinnerService.stop(spinner)})}).error(function(){Notifications.clear().warn("It seems like passcode is currently unavailable.  Please try to create your passcode again later."),usSpinnerService.stop(spinner),Pin.clear()})):($scope.errorText="Passcode does not match. Try again.",initPasscode()):($scope.confirmPasscode=$scope.passcode,$scope.passcode="",$scope.stepText="Re-enter your Passcode"))})}var module=angular.module("pin");module.controller("CreateCtrl",["$scope","$http","$location","$window","appConfig","pinConfig","usSpinnerService","Users","Pin","Notifications",_controller])}(),function(){"use strict";function _controller($scope,$http,$location,$window,appConfig,config,usSpinnerService,Users,Pin){function initPasscode(txt){$scope.passcode="",$scope.confirmPasscode=null,$scope.helper=!0,$scope.stepText=txt||"Enter your current 4-digit passcode"}function passcodeSuccess(){var user=Users.currentUser.get();user.menuRoles.indexOf("lobby")>-1?$location.path("/welcome"):$location.path("/timeline"),$window.scrollTo(0,0)}function passcodeFailure(){}var spinner="spinner-main",previousCode=null,refreshToken=null;$scope.title="Change Passcode",$scope.actionUrl="",$scope.actionText="Cancel",$scope.pinLength=config.pinLength,$scope.error=!1,$scope.errorText=null,$scope.helper=!0,$scope.helperText="A Passcode is a quick, convenient way to sign in using a 4-digit code.",initPasscode(),$scope.$watch("passcode",function(passcode){passcode&&passcode.toString().length===$scope.pinLength&&($scope.errorText=null,previousCode?$scope.confirmPasscode?$scope.passcode===$scope.confirmPasscode?(usSpinnerService.spin(spinner),Pin.setRefreshToken(refreshToken,$scope.passcode.toString()).then(passcodeSuccess)["catch"](passcodeFailure)["finally"](function(){usSpinnerService.stop(spinner)})):($scope.errorText="Passcode does not match. Try again.",initPasscode("Enter your new passcode")):($scope.confirmPasscode=$scope.passcode,$scope.passcode="",$scope.stepText="Re-enter your new passcode"):Pin.getRefreshToken($scope.passcode.toString()).then(function(token){refreshToken=token,previousCode=$scope.passcode,$scope.passcode="",$scope.stepText="Enter your new passcode"},function(){$scope.passcode="",$scope.error=!0,$scope.errorText="The passcode you entered is incorrect"}))})}var module=angular.module("pin");module.controller("ChangeCtrl",["$scope","$http","$location","$window","appConfig","pinConfig","usSpinnerService","Users","Pin",_controller])}(),function(){"use strict";function _controller($scope,$location,$window,config,$q,usSpinnerService,Login,Users,Pin,Notifications,ProfilePhotoService){function loginSuccess(){Login.login(),ProfilePhotoService.setProfilePhoto(),passcodeAttempts=0;var user=Users.currentUser.get();user.menuRoles.indexOf("lobby")>-1?$location.path("/welcome"):$location.path("/timeline"),$window.scrollTo(0,0)}function loginFailure(){Pin.clear(),Notifications.clear().error(messages.invalidRefreshToken,5e3,!0),$location.path("/login")}function passcodeFailure(){return $scope.error=!0,$scope.errorText="Failed Passcode Attempt",$scope.passcode="",passcodeAttempts+=1,passcodeAttempts>=maxAttempts&&(Notifications.clear().error(messages.maxPinAttempts,5e3,!0),Pin.clear().then(function(){$location.path("/login")})),usSpinnerService.stop(spinner),$q.reject("passcodeFailure")}var spinner="spinner-main",maxAttempts=5,passcodeAttempts=0;$scope.title="Enter Passcode",$scope.actionUrl="pin/logout",$scope.actionText="Logout",$scope.pinLength=config.pinLength,$scope.error=!1,$scope.errorText=null,$scope.helper=!1,$scope.helperText=null,$scope.stepText="Enter Your 4-Digit Passcode",$scope.passcode="",$scope.$watch("passcode",function(passcode){passcode&&passcode.toString().length===$scope.pinLength&&(usSpinnerService.spin(spinner),$scope.errorText=null,Pin.getRefreshToken($scope.passcode.toString()).then(function(refreshToken){Login.reauthenticate(refreshToken).then(function(data){return Pin.setRefreshToken(data.refreshToken,$scope.passcode.toString())}).then(loginSuccess)["catch"](loginFailure)["finally"](function(){usSpinnerService.stop(spinner)})},passcodeFailure))})}var module=angular.module("pin"),messages={maxPinAttempts:"You entered an invalid passcode 5 times.  Please use your username and password to login",invalidRefreshToken:"Your passcode has expired.  Please login again and create a new passcode."};module.controller("PinLoginCtrl",["$scope","$location","$window","pinConfig","$q","usSpinnerService","Login","Users","Pin","Notifications","ProfilePhotoService",_controller])}(),function(){"use strict";function _directive($timeout){return{scope:{passcode:"="},templateUrl:"app/pin/views/keypad.tmpl.html",restrict:"E",link:function(scope,element){scope.viewPasscode=scope.passcode?scope.passcode.toString():null;var visibleInput,hiddenInput;visibleInput=element.find(".keypad-output").first(),hiddenInput=element.find(".keypad-input").first(),visibleInput.bind("click",function(){hiddenInput.select(),hiddenInput.focus(),$timeout(function(){hiddenInput.select(),hiddenInput.focus()},5)}),scope.$watch("passcode",function(passcode){scope.viewPasscode=passcode?passcode.toString():null})}}}var module=angular.module("pin");module.directive("keypad",["$timeout",_directive])}(),function(){"use strict";function _controller($scope,$location,Notifications,Pin,Login){$scope.title="Clear Passcode",$scope.clear=function(shouldLogout){Pin.clear()["finally"](function(){Notifications.success("Your passcode has been cleared successfully.",5e3,!0),shouldLogout&&Login.logout(),$location.path("/login")})}}var module=angular.module("pin");module.controller("ClearCtrl",["$scope","$location","Notifications","Pin","Login",_controller])}(),function(){"use strict";function _controller($scope,$location,Notifications,Pin,Login,Environment){$scope.title="Confirm Logout?",$scope.phBrand="ph"===Environment.get().brand,$scope.cancel=function(){$location.path("/login")},$scope.logout=function(shouldLogout){Pin.clear()["finally"](function(){Notifications.success("Your passcode has been cleared successfully.",5e3,!0),shouldLogout&&Login.logout(),$location.path("/login")})}}var module=angular.module("pin");module.controller("PinLogoutCtrl",["$scope","$location","Notifications","Pin","Login","Environment",_controller])}(),angular.module("profile",["services","filters"]),function(){"use strict";function menuConfig(MenuTabGroupService,Users,FeatureStatus){var menuChooser=function(){var featureAvailable=FeatureStatus.checkFeatureStatus("communicationPreferences"),manageFHIR=FeatureStatus.checkFeatureStatus("manageFHIR"),user=Users.currentUser.get(),menu=[{title:"About Me",link:"#/profile/about-me"}];return user.isPatient&&featureAvailable&&!Users.isUserProxied()&&menu.push({title:"Communication Settings",link:"#/profile/communication-settings"}),menu.push({title:"Account Settings",link:"#/profile/account-settings"}),user.isPatient&&manageFHIR&&!Users.isUserProxied()&&menu.push({title:"App/Device Access",link:"#/profile/manage-apps"}),menu};MenuTabGroupService.registerMenu("Profile",menuChooser)}var app=angular.module("app");angular.module("profile").constant("profileConfig",{apiRoutes:{profileImage:"profileimage",profileDetailsMedical:"profiledetails/medical",profileDetailsInsurance:"profiledetails/insurance",communicationPreferences:"CommunicationPreferences",saveUserPreferences:"profiledetails/saveUserPreferences",changeUsername:"ChangeUsername",requests:"Requests",changeAddress:"profiledetails/addresses",changeHomePhoneNumber:"profiledetails/homePhoneNumber",changeCellPhoneNumber:"profiledetails/cellPhoneNumber"}}),app.run(["MenuTabGroupService","Users","FeatureStatus",menuConfig])}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/profile",{title:"Profile",templateUrl:"app/layout/views/landing-menu.html",controller:"ProfileCtrl",roles:["blue","green","lobby"]}).when("/profile/account-settings",{title:"Account Settings",templateUrl:"app/profile/views/account-settings.html",controller:"AccountSettingsCtrl",roles:["blue","green","lobby"]}).when("/profile/about-me",{title:"About Me",templateUrl:"app/profile/views/about-me.html",controller:"AboutMeCtrl",roles:["blue","green","lobby"]}).when("/profile/communication-settings",{title:"Communication Settings",templateUrl:"app/profile/views/communication-settings.html",controller:"CommunicationSettingsCtrl",feature:"communicationPreferences",roles:["blue"]}).when("/profile/manage-apps",{title:"App/Device Access",templateUrl:"app/profile/views/manage-apps.html",controller:"ManageAppsCtrl",feature:"manageFHIR",roles:["blue"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function service($http,config,appConfig,$q,Users){function setProfilePhoto(){var photoDeferred=$q.defer(),currentProfile=Users.currentUser.get(),loggedInProfile=Users.loggedInUser.get();return currentProfile.profileImage="assets/images/profile-fallback.png",Users.currentUser.set(currentProfile),getImageUrl().success(function(imageUrl){currentProfile.profileImage=imageUrl,Users.currentUser.set(currentProfile),loggedInProfile.profileImage||(loggedInProfile.profileImage=imageUrl,Users.loggedInUser.set(loggedInProfile)),photoDeferred.resolve(imageUrl)}).error(function(fallbackUrl){photoDeferred.reject(fallbackUrl)}),photoDeferred.promise}function removeProfilePhoto(){var deferredRemove=$q.defer();return $http["delete"](route).then(function(){deferredRemove.resolve()},function(){deferredRemove.reject()}),deferredRemove.promise}function getImageUrl(){var deferredImage=$q.defer();return $http.get(route).then(function(response){deferredImage.resolve(""===response.data?"assets/images/profile-fallback.png":response.data)},function(){deferredImage.reject("assets/images/profile-fallback.png")}),deferredImage.promise}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,"profileimage"].join("/");return{setProfilePhoto:setProfilePhoto,removeProfilePhoto:removeProfilePhoto}}var module=angular.module("profile");module.service("ProfilePhotoService",["$http","profileConfig","appConfig","$q","Users",service])}(),function(){"use strict";function AccountSettingsController($scope,FileUploader,appConfig,usSpinnerService,Notifications,UserAgent,ProfilePhotoService,MenuTabGroupService){function getProfileImage(){var setPromise=ProfilePhotoService.setProfilePhoto();setPromise.then(function(imageUrl){$scope.currentUser.profileImage=imageUrl,usSpinnerService.stop("spinner-main")}),setPromise["catch"](function(imageUrl){$scope.currentUser.profileImage=imageUrl,Notifications.clear(),Notifications.error("<b>Error:</b> We were unable to retrieve your photo."),usSpinnerService.stop("spinner-main")})}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),route=[apiEndpoint,"profileimage"].join("/");$scope.menuList=MenuTabGroupService.getMenu("Profile"),$scope.title="Account Settings",$scope.open={account:!0,image:!0};var uploader=$scope.uploader=new FileUploader({queueLimit:1,removeAfterUpload:!0,method:"Post",url:route}),checkFileType=function(file){var fileType=file.type,fileIsGood=!1;switch(fileType){case"image/jpeg":fileIsGood=!0;break;case"image/jpg":fileIsGood=!0;break;case"image/png":fileIsGood=!0;break;default:fileIsGood=!1}return fileIsGood},checkFileSize=function(file){var fileSize=file.size,fileIsGood=!0;return fileSize>5e6&&(fileIsGood=!1),fileIsGood},uploadFailure=function(){Notifications.clear(),Notifications.error("<b>Error:</b> Something went wrong while uploading your photo, please try again."),usSpinnerService.stop("spinner-main")};uploader.onAfterAddingFile=function(fileItem){usSpinnerService.spin("spinner-main"),checkFileType(fileItem._file)?uploader.isHTML5?window.loadImage.parseMetaData(fileItem._file,function(data){var orientation=0;"undefined"!=typeof data.exif&&(orientation=parseInt(data.exif.get("Orientation"))),window.loadImage(fileItem._file,function(canvas){canvas.id="canvas-1",canvas.style.display="none",angular.element("body").append(canvas);var source=document.getElementById("canvas-1"),blob=$scope.dataURLToBlob(source.toDataURL(fileItem._file.type));fileItem._file=blob,source.remove(),uploader.uploadAll()},{maxWidth:253,orientation:orientation,canvas:!0})}):checkFileSize(fileItem._file)?uploader.uploadAll():(Notifications.clear(),Notifications.error("<b>Error:</b> The file you are trying to upload is too large. Please use a file that is less than 5MB."),usSpinnerService.stop("spinner-main")):(Notifications.clear(),Notifications.error("<b>Error:</b> The file you are trying to upload is not supported.  Please upload a PNG or JPG image type."),usSpinnerService.stop("spinner-main"))},uploader.onSuccessItem=function(){usSpinnerService.spin("spinner-main"),getProfileImage()},uploader.onErrorItem=function(){Notifications.clear(),Notifications.error("<b>Error:</b> Something went wrong while uploading your photo, please try again."),usSpinnerService.stop("spinner-main")},$scope.removeProfileImage=function(){usSpinnerService.spin("spinner-main");var removePromise=ProfilePhotoService.removeProfilePhoto();removePromise.then(function(){getProfileImage()}),removePromise["catch"](function(){Notifications.clear(),Notifications.error("<b>Error:</b> We were unable to remove your photo."),usSpinnerService.stop("spinner-main")})},$scope.fileChooserSuccess=function(data){if(UserAgent.deviceIsAndroid&&0===window.device.version.indexOf("4.4")&&window.resolveLocalFileSystemURL){var filePath=data.filepath,rootPath=window.cordova.file.externalRootDirectory;window.resolveLocalFileSystemURL(rootPath,function(dir){dir.getFile(filePath,{create:!0},function(fileEntry){fileEntry.file(function(file){uploader.addToQueue(file)},uploadFailure)},uploadFailure)},uploadFailure)}},$scope.fileChooserFailure=function(){uploadFailure()},$scope.dataURLToBlob=function(dataURL){var parts,contentType,raw,rawLength,BASE64_MARKER=";base64,";if(-1===dataURL.indexOf(BASE64_MARKER))return parts=dataURL.split(","),contentType=parts[0].split(":")[1],raw=parts[1],$scope.newBlob(raw,contentType);parts=dataURL.split(BASE64_MARKER),contentType=parts[0].split(":")[1],raw=window.atob(parts[1]),rawLength=raw.length;for(var uInt8Array=new Uint8Array(rawLength),i=0;rawLength>i;i+=1)uInt8Array[i]=raw.charCodeAt(i);return $scope.newBlob(uInt8Array,contentType)},$scope.newBlob=function(content,contentType){return new Blob([content],{type:contentType})}}var module=angular.module("profile");module.controller("AccountSettingsCtrl",["$scope","FileUploader","appConfig","usSpinnerService","Notifications","UserAgent","ProfilePhotoService","MenuTabGroupService",AccountSettingsController])}(),function(){"use strict";function ProfileController($scope,Users,FeatureStatus){var user=Users.currentUser.get(),communicationPreferencesAvailable=FeatureStatus.checkFeatureStatus("communicationPreferences"),manageFHIRAvailable=FeatureStatus.checkFeatureStatus("manageFHIR"),items=[{authorized:!0,url:"/profile/about-me",title:"About Me"},{authorized:user.isPatient&&communicationPreferencesAvailable&&!Users.isUserProxied(),url:"/profile/communication-settings",title:"Communication Settings"},{authorized:!$scope.isStandardSharedAccess,url:"/profile/account-settings",title:"Account Settings"},{authorized:user.isPatient&&manageFHIRAvailable&&!Users.isUserProxied(),url:"/profile/manage-apps",title:"App/Device Access"}];$scope.menu={title:"Profile",items:items}}var module=angular.module("profile");module.controller("ProfileCtrl",["$scope","Users","FeatureStatus",ProfileController])}(),function(){"use strict";function _controller($scope,ProfileDetails,Users,$busy,Notifications,MenuTabGroupService,Contracts,Authorization,$window,BillingAddress,FeatureStatus,$q,$timeout){function populateInitialAddress(address){var allAddresses=$scope.insuranceDetails.addresses,initialAddress=_.filter(allAddresses,{addressType:address.addressType});return initialAddress[0]}function setUserType(){$scope.userType=[],Authorization.isMedicare()&&Authorization.isMedigap()?$scope.userType.push("MEDICARE"):Authorization.isMedigap()?$scope.userType.push("GROUP"):selectAuthorizations($scope.userType),$scope.isTeal&&0===$scope.userType.length&&$scope.userType.push("TEAL")}function getActiveContractRelationships(){$scope.canEdit=!1,FeatureStatus.checkFeatureStatus("profileUpdates")&&Contracts.getActiveContractRelationships().then(function(data){if(data.data){var activeContractRelationship=data.data.toUpperCase(),validRelationships=["Subscriber","Spouse","Domestic Partner"].map(function(relationship){return relationship.toUpperCase()}),editableRelationship=_.includes(validRelationships,activeContractRelationship);$scope.canEdit=editableRelationship&&$scope.isNotProxied}})}function selectAuthorizations(userType){angular.forEach(user.authorizations,function(userAuthorization){var authorizationList=["COMMERCIAL_EDI","INDIVIDUAL_FFM","INDIVIDUAL_NON_FFM"];_.includes(authorizationList,userAuthorization)?userType.push("GROUP"):_.includes(["MEDICAID","MEDICARE"],userAuthorization)&&userType.push(userAuthorization)})}function profileShouldShowBilling(){var showBillingAddress=FeatureStatus.checkFeatureStatus("profileUpdates");showBillingAddress&&findBilling()}function findBilling(){BillingAddress.getBillingAddresses().then(function(addresses){if(addresses.data&&addresses.data.length>0){var baseAddress=addresses.data[0],streetAddress=_.filter([baseAddress.addressLine1,baseAddress.addressLine2,baseAddress.addressLine3],function(a){return" "!==a}).toString().replace(/,/g," "),expandedAddress=baseAddress.city+", "+baseAddress.state+" "+baseAddress.zipCode;$scope.billingAddressLineOne=streetAddress,$scope.billingAddressLineTwo=expandedAddress,$scope.billingAddress=!0}else $scope.billingAddress=!1})}function setDisplayHeader(contactType,contactText){var header="";return header="address"===contactText?"Change "+contactType.addressType+" Address":"Change Phone"}var user=Users.currentUser.get();if($scope.title="About Me",$scope.menuList=MenuTabGroupService.getMenu("Profile"),$scope.show={medical:{personal:!0,contact:!0,address:!0,insurance:!0},insurance:{personal:!0,contact:!0,address:!0}},$scope.getUserTemplate=function(){var userTemplate=$scope.userType[0]?$scope.userType[0].toLowerCase():"mypriority";return"app/profile/components/templates/change-address-"+userTemplate+"-template.html"},$scope.isMember=user.isMember,$scope.isPatient=user.isPatient,$scope.isTeal=$scope.isMember&&$scope.isPatient,$scope.isGuest=!$scope.isMember&&!$scope.isPatient,setUserType(),$scope.isLoading=!0,$scope.isSpectrumLoading=!1,$scope.isPriorityLoading=!1,$scope.showUserEditForm=!1,$scope.isNotProxied=Users.currentUser.get().ePersonId===Users.loggedInUser.get().ePersonId,$scope.toggleUserEdit=function(contactType,contactText){contactType&&($scope.methodTypeBeingEdited=setDisplayHeader(contactType,contactText),$scope.initialAddress=populateInitialAddress(contactType)),$scope.showUserEditForm=!$scope.showUserEditForm,$scope.showUserEditForm&&$timeout(function(){$("html, body").animate({scrollTop:$("user-info-edit").offset().top},650)},50)},$scope.save=function(formData){if(formData){var changedAddressPromise,addressType=formData.addressType.toUpperCase();if("HOME"===addressType||"MAIL"===addressType)return changedAddressPromise=ProfileDetails.changeAddress(addressType,formData),changedAddressPromise.then(function(){$scope.toggleUserEdit()}),changedAddressPromise;var deferred=$q.defer();return deferred.resolve(),deferred.promise}},$scope.$watch("isSpectrumLoading",function(newValue){$scope.isSpectrumLoading=newValue,$scope.isSpectrumLoading||$scope.isPriorityLoading||($scope.isLoading=!1)}),$scope.$watch("isPriorityLoading",function(newValue){$scope.isPriorityLoading=newValue,$scope.isSpectrumLoading||$scope.isPriorityLoading||($scope.isLoading=!1)}),$scope.billingAddress=!1,profileShouldShowBilling(),$scope.isPatient){$scope.isSpectrumLoading=!0;var medical=ProfileDetails.getMedical();medical.$promise.then(function(data){$scope.isSpectrumLoading=!1,$scope.medicalDetails=data},function(){Notifications.error("Failed to load Profile medical information."),$scope.isSpectrumLoading=!1})}if($scope.isMember&&$scope.isNotProxied){$scope.isPriorityLoading=!0,getActiveContractRelationships();var insurance=ProfileDetails.getInsurance();insurance.$promise.then(function(data){$scope.isPriorityLoading=!1,data.phonePreference&&(data.phoneNumbers=_.filter(data.phoneNumbers,function(phone){return phone.rawPhoneNumber!==data.phonePreference.rawPhoneNumber})),$scope.insuranceDetails=data},function(){Notifications.error("Failed to load Profile insurance information."),$scope.isPriorityLoading=!1})}}angular.module("profile").controller("AboutMeCtrl",_controller),_controller.$inject=["$scope","ProfileDetails","Users","$busy","Notifications","MenuTabGroupService","Contracts","Authorization","$window","BillingAddress","FeatureStatus","$q","$timeout"]}(),function(){"use strict";function _controller($scope,CommunicationPreferences,MenuTabGroupService,Notifications,FeatureStatus,ProfileDetails,$q){$scope.communicationPreferencesAvailable=FeatureStatus.checkFeatureStatus("communicationPreferences"),$scope.communicationPreferencesPaymentReminderAvailable=FeatureStatus.checkFeatureStatus("communicationPreferences:PaymentReminder"),$scope.menuList=MenuTabGroupService.getMenu("Profile"),$scope.title="Communication Settings",$scope.preferencesLoading=!0,$scope.profileLoading=!0;var getPreferencesPromise=CommunicationPreferences.getPreferences("meddata","patient"),getProfilePromise=ProfileDetails.getMedical().$promise;getPreferencesPromise.then(function(paymentReminderPreference){paymentReminderPreference.forEach(function(preference){preference&&preference.userChannel&&preference.userChannel.channel&&"email"===preference.userChannel.channel.protocol.toLowerCase()?$scope.emailPreference=preference:preference&&preference.userChannel&&preference.userChannel.channel&&"home address"===preference.userChannel.channel.protocol.toLowerCase()&&($scope.mailPreference=preference)})},function(){Notifications.error("Error: unable to load Payment Reminders preference")})["finally"](function(){$scope.preferencesLoading=!1}),getProfilePromise.then(function(profileDetails){if(profileDetails.addresses&&profileDetails.addresses.length>0)for(var i=0;i<profileDetails.addresses.length;i+=1)"HOME"===profileDetails.addresses[i].addressType&&($scope.homeAddress=profileDetails.addresses[i])},function(){Notifications.error("Error: unable to load profile information")})["finally"](function(){$scope.profileLoading=!1}),$q.all([getPreferencesPromise,getProfilePromise]).then(function(){if(!$scope.mailPreference&&$scope.homeAddress){var addressString=$scope.homeAddress.address1+" "+($scope.homeAddress.address2?$scope.homeAddress.address2+" ":"")+$scope.homeAddress.city+", "+$scope.homeAddress.state+" "+$scope.homeAddress.zip;CommunicationPreferences.savePreference("home address","home address","meddata","patient",addressString)}}),$scope.savePaymentReminderPref=function(paymentReminderPref){if("email"===paymentReminderPref&&!$scope.emailPreference||"mail"===paymentReminderPref&&$scope.emailPreference){var promise;$scope.updating=!0,"email"!==paymentReminderPref||$scope.emailPreference?"mail"===paymentReminderPref&&$scope.emailPreference&&(promise=CommunicationPreferences.removePreference($scope.emailPreference).then(function(){delete $scope.emailPreference})):promise=CommunicationPreferences.savePreference("home email","email","meddata","patient",$scope.currentUser.email).then(function(emailPreference){$scope.emailPreference=emailPreference}),promise.then(function(){Notifications.success("Successfully updated Payment Reminders preference")},function(){Notifications.error("Error: unable to update Payment Reminders preference")})["finally"](function(){$scope.updating=!1})}}}var module=angular.module("profile");module.controller("CommunicationSettingsCtrl",["$scope","CommunicationPreferences","MenuTabGroupService","Notifications","FeatureStatus","ProfileDetails","$q",_controller])}(),function(){"use strict";function _controller($scope,config,Account,Users,$busy,Notifications){$scope.passwordForm={},$scope.request={},$scope.visible=!1,$scope.showPasswordForm=function(){$scope.visible=!0},$scope.reset=function(){return $scope.request={},$scope.changePasswordForm&&$scope.changePasswordForm.$setPristine()},$scope.cancel=function(){$scope.visible=!1,$scope.reset()},$scope.submit=function(){if($scope.isValid()){var request=Account.changePassword($scope.currentUser.username,$scope.request.oldPassword,$scope.request.newPassword);$busy.watch(request.$promise),request.$promise.then(function(){Notifications.clear().success("Your password was updated successfully."),$scope.cancel(),window.scrollTo(0,0)},function(resp){resp.data&&"AuthFailure"===resp.data.message?Notifications.clear().error("Your current password was incorrect."):Notifications.clear().error("An error occurred while trying to change your password."),window.scrollTo(0,0)})}},$scope.isValid=function(){return $scope.changePasswordForm&&$scope.changePasswordForm.$dirty&&$scope.changePasswordForm.$valid}}var module=angular.module("profile");module.controller("changePasswordCtrl",["$scope","profileConfig","Account","Users","$busy","Notifications",_controller])}(),function(){"use strict";function ChangeUsernameCtrl(Notifications,ChangeUsername,Users,FeatureStatus){function initialize(){ctrl.changeUsernameEnabled&&!Users.isUserProxied()&&(ctrl.loading=!0,ctrl.token=ChangeUsername.getToken(),ctrl.token.$promise["finally"](function(){ctrl.loading=!1}))}function startNewRequest(){ctrl.loading=!0;var promise=ChangeUsername.isRequestLimitReached();promise.then(function(isLimitReached){ctrl.isLimitReached=isLimitReached,isLimitReached?ctrl.limitReachedTitle="Change Username Limit Reached":(ctrl.creatingRequest=!0,ctrl.limitReachedTitle=null)}),promise["finally"](function(){ctrl.loading=!1})}function cancel(){ctrl.request={},ctrl.creatingRequest=!1}function cancelRequest(){ctrl.cancelLoading=!0;var promise=ChangeUsername.cancelRequest(ctrl.token.tokenValue).$promise;promise.then(function(response){response.success?(ctrl.token={},ctrl.changeUsernameForm&&ctrl.changeUsernameForm.$setPristine()):Notifications.error("An error occurred while trying to cancel the request."),ctrl.cancelLoading=!1}),promise["catch"](function(){Notifications.error("An error occurred while trying to cancel the request."),ctrl.cancelLoading=!1})}function resendEmail(){if(ctrl.token.newUsername){ctrl.loading=!0;var promise=ChangeUsername.submitRequest(ctrl.token.newUsername).$promise;ctrl.limitReachedTitle="Resend Verification Email Limit Reached",promise.then(onRequestSuccess),promise["catch"](onRequestError)}}function isValid(){return ctrl.changeUsernameForm&&ctrl.changeUsernameForm.$dirty&&ctrl.changeUsernameForm.$valid}function submit(){if(ctrl.isValid()){ctrl.loading=!0;var promise=ChangeUsername.submitRequest(ctrl.request.newUsername).$promise;ctrl.limitReachedTitle="Resend Verification Email Limit Reached",promise.then(onRequestSuccess),promise["catch"](onRequestError)}}function onRequestSuccess(token){ctrl.token=token,ctrl.request={},ctrl.creatingRequest=!1,ctrl.loading=!1}function onRequestError(response){if(403===response.status)ctrl.isLimitReached=!0;else switch(response.data.message){case errorEnums.invalidUsername:case errorEnums.invalidEmail:ctrl.request.confirmUsername="",ctrl.changeUsernameForm.newUsername.$setValidity("email",!1);break;case errorEnums.usernameInUse:ctrl.emailInUse=ctrl.request.newUsername||ctrl.token.newUsername,ctrl.request.confirmUsername="",ctrl.changeUsernameForm.newUsername.$setValidity("inUse",!1);break;default:Notifications.error("An error occurred while trying to change your username."),ctrl.request.confirmUsername=""}ctrl.loading=!1}var ctrl=this,errorEnums={invalidUsername:"InvalidUsername",invalidEmail:"InvalidEmailAddress",usernameInUse:"UsernameNotAvailable"};ctrl.changeUsernameEnabled=FeatureStatus.checkFeatureStatus("changeUsername"),ctrl.request={},ctrl.token={},ctrl.creatingRequest=!1,ctrl.isLimitReached=!1,ctrl.limitReachedTitle=null,ctrl.loading=!1,ctrl.cancelLoading=!1,ctrl.resendLoading=!1,ctrl.emailInUse="",ctrl.isResend=!1,ctrl.startNewRequest=startNewRequest,ctrl.cancel=cancel,ctrl.cancelRequest=cancelRequest,ctrl.resendEmail=resendEmail,ctrl.isValid=isValid,ctrl.submit=submit,initialize()}angular.module("profile").controller("ChangeUsernameCtrl",ChangeUsernameCtrl),ChangeUsernameCtrl.$inject=["Notifications","ChangeUsername","Users","FeatureStatus"]}(),function(){"use strict";function ManageAppsCtrl($scope,MenuTabGroupService){$scope.menuList=MenuTabGroupService.getMenu("Profile"),$scope.title="App/Device Access"}var module=angular.module("profile");module.controller("ManageAppsCtrl",["$scope","MenuTabGroupService",ManageAppsCtrl])}(),function(){"use strict";function ProfileDetails($resource,config,appConfig,Users){function route(path){return path=path.replace(/^\//,""),[apiEndpoint,path].join("/")}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,"");this.getMedical=function(){return $resource(route(config.apiRoutes.profileDetailsMedical)).get()},this.getInsurance=function(){return $resource(route(config.apiRoutes.profileDetailsInsurance)).get()},this.changeAddress=function(addressType,newAddress){return $resource(route([config.apiRoutes.changeAddress,addressType].join("/"))).save(JSON.stringify(newAddress)).$promise},this.saveUserPreferences=function(userPreferences){var resource=$resource(route(config.apiRoutes.saveUserPreferences),{},{saveUserPreferences:{method:"POST"}}),resourceResponse=resource.saveUserPreferences(userPreferences);return resourceResponse.$promise.then(function(){var userProfile=Users.loggedInUser.get();userProfile.userPreferences||(userProfile.userPreferences={}),_.each(Object.keys(userPreferences),function(key){userProfile.userPreferences[key]=userPreferences[key]}),Users.loggedInUser.set(userProfile)}),resourceResponse}}angular.module("profile").service("ProfileDetails",ProfileDetails),ProfileDetails.$inject=["$resource","profileConfig","appConfig","Users"]}(),function(){"use strict";function _service($resource,$http,config,appConfig){function route(path){return path=path.replace(/^\//,""),[apiEndpoint,path].join("/")}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),resource=$resource(route(config.apiRoutes.communicationPreferences),null,{getPreferences:{method:"GET",isArray:!0},savePreference:{method:"POST"}});this.getPreferences=function(categoryName,groupName){return resource.getPreferences({categoryName:categoryName,groupName:groupName}).$promise},this.savePreference=function(channelTypeName,channelProtocol,categoryName,groupName,value){return resource.savePreference({channelTypeName:channelTypeName,channelProtocol:channelProtocol,categoryName:categoryName,groupName:groupName,value:value}).$promise},this.removePreference=function(communicationLine){return $http["delete"](route(config.apiRoutes.communicationPreferences),{data:communicationLine,headers:{"Content-Type":"application/json"}})}}var module=angular.module("profile");module.service("CommunicationPreferences",["$resource","$http","profileConfig","appConfig",_service])}(),function(){"use strict";function BillingAddress($http,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,"");this.getBillingAddresses=function(){return $http({method:"GET",url:apiEndpoint+"/billingaddress/get-billing-addresses"})}}angular.module("profile").service("BillingAddress",BillingAddress),BillingAddress.$inject=["$http","profileConfig","appConfig"]}(),function(){"use strict";var module=angular.module("components"),_controller=function($window,$http){function setInitialAddress(controller,initialAddress){controller.streetAddress=initialAddress.address1,controller.suiteApt=initialAddress.address2,
controller.city=initialAddress.city,translateAbbreviationToState().then(function(state){controller.selectedState=state.data[initialAddress.state].toUpperCase()}),controller.zipCode=initialAddress.zip,controller.addressType=initialAddress.addressType}function translateAbbreviationToState(){return $http.get("app/profile/components/data/states.json")}var controller=this;this.initialAddress&&setInitialAddress(controller,this.initialAddress),this.template=this.userTemplate,this.openNewWindow=function(redirectUrl){$window.open(redirectUrl,"_blank")},this.closeEditUserForm=function(){this.closeUserForm()},this.listOfStates=["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"],this.changeDropDown=function(item){this.selectedState=item},this.save=function(){var formData={address1:controller.streetAddress,address2:controller.suiteApt,city:controller.city,state:controller.selectedState,zip:controller.zipCode,addressType:controller.addressType};return this.submitUserForm({formData:formData})}},_component={bindings:{userTemplate:"@",closeUserForm:"&",submitUserForm:"&",isTeal:"<",initialAddress:"<"},template:"<div ng-include=userInfoEditController.template></div>",controller:["$window","$http",_controller],controllerAs:"userInfoEditController"};module.component("userInfoEdit",_component)}(),function(){"use strict";function _directive(){var _link=function(scope,element){var prevInnerHtml=element.html();element.bind("click",function(){scope.processingClick||(scope.processingClick=!0,element.html('<div class="busy-spinner"><div class="bounce1 '+scope.spinnerColor+'"></div><div class="bounce2 '+scope.spinnerColor+'"></div><div class="bounce3 '+scope.spinnerColor+'"></div></div>'),scope.$apply(),scope.spinnerClick().then(function(){element.html(prevInnerHtml),scope.processingClick=!1},function(){element.html(prevInnerHtml),scope.processingClick=!1}))})};return{restrict:"A",transclude:!0,template:"<span ng-transclude></span>",scope:{spinnerClick:"&",spinnerColor:"@"},link:_link}}angular.module("profile").directive("busySpinner",[_directive])}(),function(){"use strict";function _directive(){return{restrict:"E",scope:{method:"=",contactMethods:"="},templateUrl:"app/profile/directives/templates/contact-method-edit.html",controller:_controller}}var module=angular.module("profile"),_controller=["$scope","$filter",function($scope,$filter){$scope.showContactMethodEditBox=!1,$scope.toggleContainerEditBox=function(){$scope.showContactMethodEditBox=!$scope.showContactMethodEditBox,$scope.showContactMethodEditBox&&($scope.methodViewModel={name:$scope.method.name,value:$scope.method.value,isPrimary:$scope.method.isPrimary})},$scope.evaluateEditLink=function(){return $scope.showContactMethodEditBox},$scope.cancelContactMethodEdit=function(){$scope.showContactMethodEditBox=!$scope.showContactMethodEditBox,$scope.methodViewModel={},$scope.reviewedChanges=!1},$scope.contactMethodStyles=function(){var returnStyle="";return"Email"===$scope.method.name?returnStyle="("+$scope.method.value+")":$scope.method.name.match("Phone")&&(returnStyle=$scope.method.isPrimary?"(Primary: "+$filter("phone")($scope.method.value)+")":"("+$filter("phone")($scope.method.value)+")"),returnStyle},$scope.saveContactInformation=function(){$scope.showContactMethodEditBox=!$scope.showContactMethodEditBox,$scope.methodViewModel.isPrimary&&_.each(_.filter($scope.contactMethods,{isPrimary:!0}),function(method){method.isPrimary=!1}),$scope.method.value=$scope.methodViewModel.value,$scope.method.isPrimary=$scope.methodViewModel.isPrimary,$scope.reviewedChanges=!1}}];module.directive("contactMethodEdit",[_directive])}(),angular.module("MakeReservationAppointment",["services","filters","ui.validate","ngResource","ngRoute"]),function(){"use strict";function PatientLocationService($q){function getLocations(){return $q.when([{group:"general",value:"Home",valid:!0},{group:"general",value:"Work",valid:!0},{group:"general",value:"School",valid:!0},{group:"specific",value:"Michigan State University",valid:!0},{group:"specific",value:"Montcalm Community College",valid:!0},{group:"other",value:"Other/Not Listed",valid:!0},{group:"other",value:"Prefer Not To Say",valid:!0}])}var service=this;service.getLocations=getLocations}angular.module("MakeReservationAppointment").service("PatientLocationService",PatientLocationService),PatientLocationService.$inject=["$q"]}(),function(){"use strict";function ReservationSlotsService(appConfig,$resource){function getAvailableSlots(startDate,endDate){return resource.query({startDate:startDate,endDate:endDate}).$promise}function createAppointment(reservation,reason){return schedulingResource.save({createPatient:reservation.patient,slot:{date:reservation.time},reason:reason}).$promise}var resource=$resource([appConfig.apiEndpoint,"videovisit/nonpatient/getslots"].join("/")),schedulingResource=$resource([appConfig.apiEndpoint,"scheduling/nonpatient"].join("/")),service=this;service.getAvailableSlots=getAvailableSlots,service.createAppointment=createAppointment}angular.module("MakeReservationAppointment").service("ReservationSlotsService",ReservationSlotsService),ReservationSlotsService.$inject=["appConfig","$resource"]}(),function(){"use strict";function AilmentsService($q){function getAilments(){return $q.when([{value:"Allergies",valid:!0},{value:"Bites and Stings",valid:!0},{value:"Back Pain",valid:!0},{value:"Cough",valid:!0},{value:"Diarrhea",valid:!0},{value:"Ear Pain",valid:!0},{value:"Eye Irritations",valid:!0},{value:"Fever",valid:!0},{value:"Headache",valid:!0},{value:"Nausea & Vomiting",valid:!0},{value:"Rash, Hives, Skin Eruptions/Irritations",valid:!0},{value:"Sinus Problems",valid:!0},{value:"Sore Throat",valid:!0},{value:"Upper Respiratory Symptoms",valid:!0},{value:"Urinary Symptoms",valid:!0},{value:"Vaginal Discharge",valid:!0},{value:"Other / Not Listed",valid:!1}])}var service=this;service.getAilments=getAilments}angular.module("MakeReservationAppointment").service("AilmentsService",AilmentsService),AilmentsService.$inject=["$q"]}(),function(){"use strict";function ReservationWizardController($scope,Users,Contracts,PatientLocationService,AilmentsService,GeographyService,ReservationSlotsService,Notifications,$q,$location,Moment,appConfig,FeatureStatus,usSpinnerService,Login,AuthService,Environment,$analytics){function getFullNameForReservation(patient){return[patient.name.firstName,patient.name.lastName].join(" ")}function populateUserValues(profile,details){if($scope.reservation.patient.name.firstName=(profile.firstName||"").substring(0,25),$scope.disabledFields.firstName=!!profile.firstName,$scope.reservation.patient.name.lastName=(profile.lastName||"").substring(0,25),$scope.disabledFields.lastName=!!profile.lastName,$scope.reservation.patient.dateOfBirth=moment(new Date(profile.dob)).format("MM/DD/YYYY"),$scope.disabledFields.dateOfBirth=!!profile.dob,details){$scope.reservation.patient.gender=details.gender?details.gender.toLowerCase():"",$scope.disabledFields.gender=!!details.gender,details.middleName&&($scope.reservation.patient.name.PatientMiddleName.Value=(details.middleName||"").substring(0,25),$scope.disabledFields.middleName=!!details.middleName);var addresses=[];addresses=_.filter(details.addresses,function(address){return"h"===address.addressType.toLowerCase()||"home"===address.addressType.toLowerCase()});var address=addresses[0];details.phonePreference&&($scope.reservation.patient.phone.number=details.phonePreference.rawPhoneNumber),address&&($scope.reservation.patient.address.address1=(address.address1||"").substring(0,25),$scope.disabledFields.address1=!!address.address1,$scope.reservation.patient.address.address2=(address.address2||"").substring(0,25),$scope.disabledFields.address2=!!address.address2,$scope.reservation.patient.address.city=address.city,$scope.disabledFields.city=!!address.city,$scope.reservation.patient.address.state=address.state,$scope.disabledFields.state=!!address.state,$scope.reservation.patient.address.zip=address.zip,$scope.disabledFields.zip=!!address.zip)}}function activate(){$scope.currentUser=Users.currentUser.get(),$scope.currentUser.isMember?Contracts.getMemberDetails().$promise.then(function(details){populateUserValues($scope.currentUser,details)})["catch"](function(){populateUserValues($scope.currentUser)}):populateUserValues($scope.currentUser),PatientLocationService.getLocations().then(function(locations){$scope.locations=locations}),AilmentsService.getAilments().then(function(ailments){$scope.ailments=ailments}),$scope.states=GeographyService.getStates(),loadSlots().then(function(){watchForOpenSlots()})}function loadSlots(){return ReservationSlotsService.getAvailableSlots($scope.dateRange.startDate,$scope.dateRange.endDate).then(function(response){$scope.slots=response,$scope.openSlots=getSlotsForDay($scope.reservation.appointmentDate||new Date),filterOpenSlots()},function(){Notifications.error("There was an error retrieving available appointments.")})}function watchForOpenSlots(){$scope.$watch("reservation.appointmentDate",function(newValue){$scope.openSlots=getSlotsForDay(newValue||new Date),filterOpenSlots()})}function filterOpenSlots(){$scope.morningSlots=filterSlotsByHours(0,12),$scope.afternoonSlots=filterSlotsByHours(12,17),$scope.eveningSlots=filterSlotsByHours(17,24)}function authenticate(){var appId=Environment.get().appId;AuthService.generateTempToken(appId).$promise.then(function(data){Login.ssoAuthenticate(data.tempToken),usSpinnerService.stop("spinner-main")})}function createReservation(directiveScope){return usSpinnerService.spin("spinner-main"),ReservationSlotsService.createAppointment($scope.reservation,$scope.reservation.reason.value).then(function(){$analytics.eventTrack("Select patient location",{category:"Video Visit Open Scheduling",label:$scope.reservation.location.value}),authenticate()})["catch"](function(results){var msg="",success=!0;if(results.data&&results.data.reasonCode&&403!==results.status){switch(results.data.reasonCode.toUpperCase()){case"MINIMUMLEADTIMEEXCEEDED":msg="This appointment must be scheduled at least 15 minutes in advance.  Please go back and select a new time.",success=!1,showNotification=!0;break;case"SLOTTAKEN":msg="Sorry, the appointment time you requested has been taken. Please go back and select a new time.",success=!1,showNotification=!0,$scope.reservation.time=null,loadSlots();break;case"INVALIDPARAMETERS":directiveScope.$config.successUrl="app/make-appointment-reservation/views/reservation-steps/failure.html",$scope.failureRetryUrl="#/medical/appointment/member-reservation";break;case"ADLDS":directiveScope.$config.successUrl="app/make-appointment-reservation/views/reservation-steps/failure.html",$scope.failureRetryUrl="#/medical/appointment/member-reservation";break;case"USERISPATIENT":directiveScope.$config.successUrl="app/make-appointment-reservation/views/reservation-steps/failure.html",$scope.failureRetryUrl="#/medical/ecare/video-visits/schedule",authenticate();break;case"PATIENTSERVICE":directiveScope.$config.successUrl="app/make-appointment-reservation/views/reservation-steps/failure.html",$scope.failureRetryUrl="#/medical/appointment/member-reservation";break;case"DUPLICATE":directiveScope.$config.successUrl="app/make-appointment-reservation/views/reservation-steps/failure.html",$scope.disableRetry=!0;break;case"SCHEDULESERVICE":directiveScope.$config.successUrl="app/make-appointment-reservation/views/reservation-steps/failure.html",$scope.failureRetryUrl="#/medical/ecare/video-visits/schedule",authenticate();break;default:directiveScope.$config.successUrl="app/make-appointment-reservation/views/reservation-steps/failure.html"}showNotification&&Notifications.error(msg)}else results.data&&results.data.exceptionMessage&&"an error occurred while getting open time slots."===results.data.exceptionMessage.toLowerCase()?(msg="Oops! We were unable to schedule your video visit.",success=!1,Notifications.error(msg)):(directiveScope.$config.successUrl="app/make-appointment-reservation/views/reservation-steps/failure.html",$scope.disableRetry=!0);return success===!1?$q.reject():void 0})["finally"](function(){usSpinnerService.stop("spinner-main")})}function filterSlotsByHours(min,max){var items=_.filter($scope.openSlots,function(slot){var hour=moment(new Date(slot.date)).hours();return hour>min&&max>=hour&&timeSlotIsStillValid(slot.date)});return items}function getSlotsForDay(dateTime){$scope.reservation.time=null;var selectedDay=moment(new Date(dateTime)).dayOfYear();return _.filter($scope.slots,function(slot){return moment(new Date(slot.date)).dayOfYear()===selectedDay})}function selectTime(){$scope.reservation.time=new Date}function timeSlotIsStillValid(timeslot){var futureLimit=moment().add(15,"minutes");return futureLimit.isBefore(timeslot)}function isAcceptableDOB(dob){if(!dob)return!1;var m=moment(new Date(dob.replace(/[YMD]/g,"")));return m.isValid()?m.isAfter(moment(new Date("1900-01-01"))):!1}function wizardStepChanged(){filterOpenSlots()}$scope.currentUser={},$scope.dispalyReservationTimeFormat="MMM dd yyyy 'at' hh:mm a",$scope.showConfirmButton=FeatureStatus.checkFeatureStatus("dtConfirmAppointment");var showNotification=!1;$scope.wizardConfig={backUrl:"#/medical/appointment-tool",successUrl:"app/make-appointment-reservation/views/reservation-steps/success.html",submitText:"Confirm",prevText:"Previous"},$scope.dateRange={startDate:(new Moment).startOf("day").toDate(),endDate:(new Moment).startOf("day").add(6,"days").toDate()},$scope.datePickerConfig={showWeeks:!1,formatDay:"d",minDate:$scope.dateRange.startDate,maxDate:$scope.dateRange.endDate},$scope.createReservationSteps=[{title:"Reason",templateUrl:"app/make-appointment-reservation/views/reservation-steps/reason.html",showNextButton:!0},{title:"Consent",templateUrl:"app/make-appointment-reservation/views/reservation-steps/consent.html",showNextButton:!0,nextText:"Agree",showPrevButton:!0,showCancelButton:!0},{title:"Date & Time",templateUrl:"app/make-appointment-reservation/views/reservation-steps/date-and-time.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"Patient Info",templateUrl:"app/make-appointment-reservation/views/reservation-steps/patient-info.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"Review",templateUrl:"app/make-appointment-reservation/views/reservation-steps/review.html",showNextButton:!1,showPrevButton:!0,showCancelButton:!0}],$scope.reservation={isMichigan:void 0,isLoggedInUser:void 0,appointmentDate:$scope.dateRange.startDate,patient:{name:{PatientMiddleName:{}},address:{},phone:{}},slot:{}},$scope.appointmentDate=$scope.dateRange.startDate,$scope.states=[],$scope.locations=[],$scope.ailments=[],$scope.slots=[],$scope.createReservation=createReservation,$scope.selectTime=selectTime,$scope.getSlotsForDay=getSlotsForDay,$scope.filterSlotsByHours=filterSlotsByHours,$scope.isAcceptableDOB=isAcceptableDOB,$scope.timeSlotIsStillValid=timeSlotIsStillValid,$scope.wizardStepChanged=wizardStepChanged,$scope.getFullNameForReservation=getFullNameForReservation,$scope.contactCenterPhoneNumber=appConfig.contactCenterPhoneNumber,$scope.failureRetryUrl="#/medical",$scope.disabledFields={},activate()}angular.module("MakeReservationAppointment").controller("ReservationWizardController",ReservationWizardController),ReservationWizardController.$inject=["$scope","Users","Contracts","PatientLocationService","AilmentsService","GeographyService","ReservationSlotsService","Notifications","$q","$location","Moment","appConfig","FeatureStatus","usSpinnerService","Login","AuthService","Environment","$analytics"]}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/appointment/member-reservation",{title:"Video Visit",templateUrl:"app/make-appointment-reservation/views/make-reservation.html",controller:"ReservationWizardController",roles:["isLoggedInMember","lobby"],feature:"memberVideoVisits"}).when("/medical/appointment-tool",{title:"Appointment Tool",templateUrl:"app/make-appointment-reservation/views/appointment-tool.html",controller:"AppointmentMakeController",roles:["green","lobby"],feature:"memberVideoVisits"})}var app=angular.module("MakeReservationAppointment");app.config(["$routeProvider",routeConfiguration])}(),angular.module("makeAppointments",["services","filters","ngRoute","ui.validate","MedNow"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/ecare/evisits",{title:"Appointment Tool",templateUrl:"app/make-appointments/views/evisit.html",controller:"EvisitController",roles:["blue"]}),$routeProvider.when("/medical/ecare/video-visits",{title:"Video Visit",templateUrl:"app/make-appointments/views/video-visits-landing.html",controller:"VideoVisitsLandingCtrl",roles:["blue"]}),$routeProvider.when("/medical/ecare/video-visits/schedule",{title:"Video Visit",templateUrl:"app/make-appointments/views/video-visits-schedule.html",controller:"ECareVideoVisitsScheduleCtrl",roles:["blue"]}),$routeProvider.when("/medical/ecare/video-visits/schedule/success",{title:"Video Visit",templateUrl:"app/make-appointments/views/vv-schedule-steps/success.html",controller:"ECareVideoVisitScheduleSuccessController",roles:["blue"]}),$routeProvider.when("/medical/appointments/make/schedule",{title:"Appointment Tool",templateUrl:"app/make-appointments/views/scheduling-choose-flow.html",roles:["blue"]}),$routeProvider.when("/medical/appointments/make/schedule/reason",{title:"Schedule by Reason",templateUrl:"app/make-appointments/views/scheduling-wizard.html",controller:"SchedulingWizardController",roles:["blue"],resolve:{schedulingWizardConfig:function(){return{wizardMode:"reason",wizardSteps:["Reason","Provider","Location","Date & Time","Review"]}}}}),$routeProvider.when("/medical/appointments/make/schedule/provider",{title:"Schedule by Provider",templateUrl:"app/make-appointments/views/scheduling-wizard.html",controller:"SchedulingWizardController",roles:["blue"],resolve:{schedulingWizardConfig:function(){return{wizardMode:"provider",wizardSteps:["Provider","Reason","Location","Date & Time","Review"]}}}}),$routeProvider.when("/medical/appointments/make/schedule/datatile",{title:"Schedule an Appointment",templateUrl:"app/make-appointments/views/scheduling-datatile.html",controller:"SchedulingDataTileCtrl",controllerAs:"scheduleDataTileVM",roles:["blue"],feature:["dtScheduling"]}),$routeProvider.when("/medical/appointments/make/schedule/ebola",{title:"Ebola Agreement",templateUrl:"app/make-appointments/views/os-steps/scheduling-wizard-ebola.html",controller:"SchedulingWizardEbolaController",roles:["blue"],feature:["dtScheduling"]}),$routeProvider.when("/medical/appointments/make/schedule/success",{title:"Appointment",templateUrl:"app/make-appointments/views/scheduling-success.html",roles:["blue"]}),$routeProvider.when("/medical/appointments/make",{title:"Appointment Tool",templateUrl:"app/make-appointments/views/appointment-make.html",controller:"AppointmentMakeController",roles:["blue"]}),$routeProvider.when("/medical/appointments/request",{title:"Appointment Tool",templateUrl:"app/make-appointments/views/appointment-request.html",controller:"AppointmentDetailController",roles:["blue"]}),$routeProvider.when("/medical/appointments/ticket-schedule",{title:"Schedule by Ticket",templateUrl:"app/make-appointments/views/schedule-by-ticket.html",roles:["blue"],feature:["ticketScheduling"]})}var app=angular.module("makeAppointments");app.config(["$routeProvider",routeConfiguration])}(),angular.module("makeAppointments").constant("ecareConfig",{apiRoutes:{videoVisitScheduling:"scheduling/videovisit",videoVisitReasons:"app/make-appointments/data/video-visit-reasons.json"}}),function(){"use strict";function controller($scope,$location,FeatureStatus){$scope.cancel=function(){$location.url("/medical/appointments/make")},FeatureStatus.checkFeatureStatus("evisits")||$location.url("/medical/appointments/make")}var module=angular.module("makeAppointments");module.controller("EvisitController",["$scope","$location","FeatureStatus",controller])}(),function(){"use strict";function controller($scope,ContentList){$scope.faqLayout={groups:ContentList.query()}}var module=angular.module("makeAppointments");module.controller("ECareEVisitsFAQController",["$scope","ContentList",controller])}(),function(){"use strict";function controller($scope){$scope.videoVisitsOnComputersLayout={groups:[{title:"Video Visits for Windows",contentSrc:"app/make-appointments/views/video-visits-requirements-content/for-windows.html"},{title:"Video Visits for Mac",contentSrc:"app/make-appointments/views/video-visits-requirements-content/for-mac.html"}]},$scope.videoVisitsOnMobileLayout={groups:[{title:"Video Visits on Android",contentSrc:"app/make-appointments/views/video-visits-requirements-content/for-android.html"},{title:"Video Visits on iOS",contentSrc:"app/make-appointments/views/video-visits-requirements-content/for-ios.html"}]}}var module=angular.module("makeAppointments");module.controller("ECareVideoVisitsReqController",["$scope",controller])}(),function(){"use strict";function _controller($scope,appConfig,FeatureStatus){$scope.ailments=["Allergies","Asthma","Back Pain","Bumps & Rashes","Cold & Flu","Cough","Cuts & Scrapes","Diarrhea","Ear Aches","Fever","Headache","Nausea","Pink Eye","Sinus Infections","Sore Throat","Sprains & Strains","Urinary Problems"],$scope.ailmentsDisplay={threeCol:{itemsPerCol:Math.ceil($scope.ailments.length/3)},twoCol:{itemsPerCol:Math.ceil($scope.ailments.length/2)}},$scope.videoVisitsEnabled=FeatureStatus.checkFeatureStatus("videoVisits"),$scope.contactCenterPhoneNumber=appConfig.contactCenterPhoneNumber,$scope.contactCenterMarketingPhoneNumber=appConfig.contactCenterMarketingPhoneNumber}var module=angular.module("makeAppointments");module.controller("VideoVisitsLandingCtrl",["$scope","appConfig","FeatureStatus",_controller])}(),function(){"use strict";function _controller($scope,$filter,Notifications,VideoVisitsSchedulingSvc,Moment,VideoVisitReason,$location,$window,usSpinnerService,VideoVisitStatus,PatientLocationService,appConfig,$analytics){var spinner="spinner-main";return VideoVisitStatus.isOnlineSchedulingAvailable()?($scope.dateRange={startDate:(new Moment).toDate(),endDate:(new Moment).add(7,"days").toDate()},$scope.datepickerOptions={formatDay:"d",minDate:$scope.dateRange.startDate,maxDate:$scope.dateRange.endDate,showWeeks:!1},$scope.contactCenterPhoneNumber=appConfig.contactCenterPhoneNumber,$scope.visit={date:(new Moment).toDate(),reason:{}},$scope.steps=[{title:"Reason",templateUrl:"app/make-appointments/views/vv-schedule-steps/reason.html",showNextButton:!0,showCancelButton:!0},{title:"Consent",templateUrl:"app/make-appointments/views/vv-schedule-steps/consent.html",showNextButton:!0,nextText:"Agree",showPrevButton:!0,showCancelButton:!0,cancelText:"Cancel"},{title:"Date & Time",templateUrl:"app/make-appointments/views/vv-schedule-steps/datetime.html",showNextButton:!0,showPrevButton:!0,showCancelButton:!0},{title:"Review",templateUrl:"app/make-appointments/views/vv-schedule-steps/review.html",showPrevButton:!0,showCancelButton:!0,showNextButton:!1,showSubmitButton:!0}],$scope.wizard={currentStep:null,currentIndex:0,currentStepNum:1,hideNav:!1,next:function(){$scope.wizard.setStep(Math.min($scope.wizard.currentStepNum+1,$scope.steps.length)),$window.scrollTo(0,0)},prev:function(){$scope.wizard.setStep(Math.max($scope.wizard.currentStepNum-1,1)),$window.scrollTo(0,0)},submit:function(){var slot=$scope.visit.timeSlots.slots[0];usSpinnerService.spin(spinner),VideoVisitsSchedulingSvc.createAppointment(slot,$scope.visit.reason.description).then(function(){$analytics.eventTrack("Select patient location",{category:"Video Visit Scheduling",label:$scope.visit.location.value}),$location.url("/medical/ecare/video-visits/schedule/success"),usSpinnerService.stop(spinner)},function(error){var message;message="minimumleadtimeexceeded"===error.data.toLowerCase()?"This appointment must be scheduled at least 5 minutes in advance. Please go back and select a new one.":"slottaken"===error.data.toLowerCase()?"Error: This date and time is no longer available. Please go back to select a new one.":"Error: Something went wrong while scheduling your appointment. Please go back to select a new one.",usSpinnerService.stop(spinner),Notifications.error(message)})},setStep:function(step){$scope.wizard.currentStepNum=step,$scope.wizard.currentIndex=step-1,$scope.wizard.currentStep=$scope.steps[$scope.wizard.currentIndex]},isNextAvailable:function(){return $scope.wizardForm.$valid}},$scope.dateChanged=function(date){$scope.visit.date=new Moment(date),$scope.visit.timeSlots=null,$scope.dateAsHtml=$scope.visit.date.format("MMM Do YYYY"),$scope.showAvailableTimesForDate($scope.visit.date.format("YYYY-MM-DD"))},$scope.showAvailableTimesForDate=function(selectedDate){return $scope.slotsLoading=!0,$scope.morningSlots=null,$scope.afternoonSlots=null,$scope.eveningSlots=null,VideoVisitsSchedulingSvc.getAvailableSlotsForSpecificDay(new Moment(selectedDate,"YYYY-MM-DD")).then(function(availableSlots){var availableTimesByTimeOfDay=VideoVisitsSchedulingSvc.getAvailableTimesByTimeOfDay(availableSlots);$scope.morningSlots=availableTimesByTimeOfDay.morning,$scope.afternoonSlots=availableTimesByTimeOfDay.afternoon,$scope.eveningSlots=availableTimesByTimeOfDay.evening,$scope.slotsLoading=!1},function(){Notifications.error("There was an error retrieving available appointments."),$scope.slotsLoading=!1})},$scope.getSlotReviewInfo=function(){usSpinnerService.spin("spinner-main"),$scope.disableSubmitBtn=!1,VideoVisitsSchedulingSvc.getSlotReviewInfo($scope.visit.timeSlots.slots[0]).then(function(){$scope.disableSubmitBtn=!1,usSpinnerService.stop("spinner-main")},function(errorMsg){errorMsg.data&&("slottaken"===errorMsg.data.toLowerCase()?(Notifications.error("Error: This date and time is no longer available. Please go back to select a new one."),$scope.disableSubmitBtn=!0):"anotherappointment"===errorMsg.data.toLowerCase()&&(Notifications.error("Error: "+$filter("titlecase")($scope.currentUser.displayName)+" has another appointment that overlaps with this one. Please go back to select a new one."),$scope.disableSubmitBtn=!0)),usSpinnerService.stop("spinner-main")})},$scope.wizard.setStep(1),$scope.dateChanged(new Moment($scope.visit.date).format("YYYY-MM-DD")),$scope.reasons=[],VideoVisitReason.all().then(function(data){$scope.reasons=data,$scope.visit.reason=$scope.reasons[0]}),$scope.locations=[],PatientLocationService.getLocations().then(function(locations){$scope.locations=locations}),$scope.$watch("visit.timeSlots",function(){if(null!==$scope.visit.timeSlots){var theDate=$scope.visit.timeSlots.dateTime;$scope.dateAsHtml=theDate.format("MMM Do YYYY")+' <span class="text-light">at</span> '+theDate.format("h:mmA")}}),$scope.clickNavigationEnabled=!0,void($scope.hideVideoVisits=!0)):void $location.path("/medical/appointments/make")}var module=angular.module("makeAppointments");module.controller("ECareVideoVisitsScheduleCtrl",["$scope","$filter","Notifications","VideoVisitsSchedulingSvc","Moment","VideoVisitReason","$location","$window","usSpinnerService","VideoVisitStatus","PatientLocationService","appConfig","$analytics",_controller])}(),function(){"use strict";function controller($scope,MedNowAppLinksService,FeatureStatus){$scope.showConfirmButton=FeatureStatus.checkFeatureStatus("dtConfirmAppointment"),$scope.medNowVidyoEnabled=FeatureStatus.checkFeatureStatus("medNow_Vidyo"),$scope.itunesUrl=MedNowAppLinksService.itunesUrl,$scope.googlePlayUrl=MedNowAppLinksService.googlePlayUrl}var module=angular.module("makeAppointments");module.controller("ECareVideoVisitScheduleSuccessController",["$scope","MedNowAppLinksService","FeatureStatus",controller])}(),function(){"use strict";function controller($scope,Users,FeatureStatus,VideoVisitStatus,NavigationService){$scope.currentUser=Users.currentUser.get(),$scope.eVisitsIsEnabled=FeatureStatus.checkFeatureStatus("evisits"),$scope.videoVisitSchedulingEnabled=FeatureStatus.checkFeatureStatus("videoVisitScheduling"),$scope.videoVisitsEnabled=FeatureStatus.checkFeatureStatus("videoVisits"),$scope.videoVisitSchedulingAvailable=VideoVisitStatus.isOnlineSchedulingAvailable(),$scope.schedulingReasonFirstAvailable=FeatureStatus.checkFeatureStatus("schedulingReasonFirst"),$scope.schedulingProviderFirstAvailable=FeatureStatus.checkFeatureStatus("schedulingProviderFirst"),$scope.schedulingDT=FeatureStatus.checkFeatureStatus("dtScheduling"),$scope.patientVideoVisitsUrl="",FeatureStatus.checkFeatureStatus("mednow")?$scope.patientVideoVisitsUrl=NavigationService.locations.mednowLandingPage:$scope.patientVideoVisitsUrl=NavigationService.locations.startPatientVideoVisit}angular.module("appointments").controller("AppointmentMakeController",controller),controller.$inject=["$scope","Users","FeatureStatus","VideoVisitStatus","NavigationService"]}(),function(){"use strict";function directive(){return{templateUrl:"app/make-appointments/views/appointment-type-card.html",restrict:"E",scope:{isBeta:"=isBeta",iconName:"=iconName",contentHeaderText:"=contentHeaderText",contentText:"=contentText",footerLinkHref:"@footerLinkHref",footerTemplateUrl:"=footerTemplateUrl",subFooterLinkText:"=subFooterLinkText",subFooterLinkHref:"=subFooterLinkHref",linkEnabled:"@linkEnabled"},controller:function($scope,$location){var defaultFooterTemplateUrl="app/make-appointments/views/appointment-card-footer-template.html";$scope.footerLinkTextToUse="Select",$scope.footerTemplateUrlToUse=$scope.footerTemplateUrl||defaultFooterTemplateUrl,$scope.navigateTo=function(){$scope.linkEnabled&&$location.path($scope.footerLinkHref)}}}}var module=angular.module("makeAppointments");module.directive("appointmentTypeCard",["$location",directive])}(),function(){"use strict";function _controller($scope,appConfig){$scope.contactCenterPhoneNumber=appConfig.contactCenterPhoneNumber,$scope.contactCenterMarketingPhoneNumber=appConfig.contactCenterMarketingPhoneNumber}var module=angular.module("appointments");module.controller("VideoVisitCardFooterCtrl",["$scope","appConfig",_controller])}(),function(){"use strict";function _service(){this.setEbolaConsent=function(ePersonID){ebolaConsent[ePersonID]=!0,sessionStorage.setItem(ebolaConsentKey,JSON.stringify(ebolaConsent))},this.createEbolaConsent=function(){sessionStorage.setItem(ebolaConsentKey,"{}")},this.getEbolaConsent=function(){return sessionStorage.getItem(ebolaConsentKey)}}var module=angular.module("makeAppointments"),ebolaConsent={},ebolaConsentKey="ebolaConsent";module.service("EbolaConsentService",[_service])}(),function(){"use strict";function _service($q,$http,$cacheFactory,config){function getCacheOtherwise(key,callback){var deferred=$q.defer(),data=cache.get(key);return data?deferred.resolve(data):callback&&callback.call(this,deferred),deferred.promise}var cache=$cacheFactory("videoVisitReason");this.all=function(){var cacheKey="videoVisitReason:all";return getCacheOtherwise(cacheKey,function(deferred){var url=config.apiRoutes.videoVisitReasons;$http.get(url).success(function(data){cache.put(cacheKey,data),deferred.resolve(data)}).error(function(data){deferred.reject(data)})})}}var module=angular.module("makeAppointments");module.service("VideoVisitReason",["$q","$http","$cacheFactory","ecareConfig",_service])}(),function(){"use strict";function _service($resource,Moment,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),urls={
base:[apiEndpoint,config.apiRoutes.videoVisitScheduling].join("/"),slotReview:[apiEndpoint,config.apiRoutes.videoVisitScheduling,"review"].join("/")},resources={base:$resource(urls.base),slotReview:$resource(urls.slotReview)};this.getAvailableTimesForDay=function(slots){var uniqueDateTimes=_.uniq(_.map(slots,function(slot){return slot.date})),slotsByTime=[];return _.each(uniqueDateTimes,function(dateTime){var slotByTime={dateTime:new Moment(dateTime),slots:_.filter(slots,{date:dateTime})};slotsByTime.push(slotByTime)}),slotsByTime},this.getAvailableSlotsForSpecificDay=function(date){var momentDate=new Moment(date);return resources.base.query({date:momentDate.format("YYYY-MM-DD")}).$promise},this.getAvailableTimesByTimeOfDay=function(slots){var slotsByTime=this.getAvailableTimesForDay(slots),timesByTimeOfDay={morning:[],afternoon:[],evening:[]};return _.each(slotsByTime,function(slotByTime){var dateOfSlots=slotByTime.dateTime.format("YYYY-MM-DD"),afternoon=dateOfSlots+"T12:00:00",evening=dateOfSlots+"T17:00:00";slotByTime.dateTime.isBefore(afternoon)?timesByTimeOfDay.morning.push(slotByTime):slotByTime.dateTime.isSame(afternoon)||slotByTime.dateTime.isAfter(afternoon)&&slotByTime.dateTime.isBefore(evening)?timesByTimeOfDay.afternoon.push(slotByTime):timesByTimeOfDay.evening.push(slotByTime)}),timesByTimeOfDay},this.getSlotReviewInfo=function(slot){return resources.slotReview.save({slot:slot}).$promise},this.createAppointment=function(slot,reason){return resources.base.save({slot:slot,reason:reason}).$promise}}var module=angular.module("makeAppointments");module.service("VideoVisitsSchedulingSvc",["$resource","Moment","ecareConfig","appConfig",_service])}(),function(){"use strict";function _service($resource,$http,$log,$q){function queryResolveSrc(){var result=[],deferred=$q.defer();result.$promise=deferred.promise,resource.query().$promise.then(function(data){_.each(data,function(item){item.contentSrc&&$http({url:item.contentSrc,method:"GET",cache:!0}).success(function(content){item.content=content}).error(function(){deferred.reject("Error retrieving: "+item.contentSrc),item.content=void 0}),result.push(item)}),deferred.resolve(result)},function(error){$log.error(error)})}function queryRaw(){return resource.query()}var resource=$resource("app/make-appointments/data/ecare-evisits-faq-content.json"),self=this;self.query=function(config){return config=config||{},config.resolveSrc?queryResolveSrc():queryRaw()}}var module=angular.module("makeAppointments");module.service("ContentList",["$resource","$http","$log","$q",_service])}(),function(){"use strict";function _service(FeatureStatus,Users){this.isPhoneAvailable=function(){return FeatureStatus.checkFeatureStatus("videoVisits")?Users.currentUser.get().isAMinor()?!1:!0:!1},this.isOnlineSchedulingAvailable=function(){if(!FeatureStatus.checkFeatureStatus("videoVisits"))return!1;if(!FeatureStatus.checkFeatureStatus("videoVisitScheduling"))return!1;var currentUser=Users.currentUser.get();return!currentUser.isMedicalGroupPatient&&currentUser.isPatient?!1:Users.currentUser.get().isAMinor()?!1:currentUser.username!==Users.loggedInUser.get().username?!1:!0}}var module=angular.module("makeAppointments");module.service("VideoVisitStatus",["FeatureStatus","Users",_service])}(),function(){"use strict";function SchedulingWizardController($scope,$location,Scheduling,Notifications,FeatureStatus,schedulingWizardConfig){$scope.init=function(){$scope.schedulingModel={reason:{},provider:{},useSelectedProvider:{},location:{},slot:{dateTime:null,arrivalTime:null}},$scope.schedulingModelInitializer=angular.copy($scope.schedulingModel),$scope.schedulingAvailable=FeatureStatus.checkFeatureStatus("scheduling"),$scope.ebolaAvailable=FeatureStatus.checkFeatureStatus("schedulingEbola"),$scope.loggedInUserId=$scope.currentUser.ePersonId,$scope.ebolaConsent=JSON.parse(sessionStorage.getItem("ebolaConsent")),$scope.wizardSteps=schedulingWizardConfig.wizardSteps,$scope.wizardMode=schedulingWizardConfig.wizardMode,$scope.defaultRows=5,$scope.numToShow=5,$scope.toggleText="show all",$scope.getSlotsCurrentStartDate="",$scope.datePattern="^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$",$scope.datepicker="",$scope.clickNavigationEnabled=!0,$scope.hideScheduling=!0,null===$scope.ebolaConsent&&(sessionStorage.getItem("ebolaConsent","{}"),$scope.ebolaConsent={}),$scope.ebolaAvailable&&$scope.schedulingAvailable&&!$scope.ebolaConsent[$scope.loggedInUserId]?$scope.wizardStep="Ebola":$scope.schedulingAvailable?$scope.goToWizardStep(0):Notifications.error("Error: Scheduling is not currently available.")},$scope.nextStep=function(){var index=$scope.wizardSteps.indexOf($scope.wizardStep)+1;$scope.goToWizardStep(index)},$scope.previousStep=function(){var index=$scope.wizardSteps.indexOf($scope.wizardStep)-1;$scope.goToWizardStep(index)},$scope.goToWizardStep=function(wizardStepNumber){$scope.wizardStep=$scope.wizardSteps[wizardStepNumber]},$scope.validateSlot=function(){Scheduling.scheduleAllowed($scope.schedulingModel.slot)?$scope.nextStep():Notifications.error("This appointment must be scheduled at least 1 hour in advance. Please go back and select a new one.")},$scope.initReview=function(){$scope.scheduleButtonDisabled=!1},$scope.createAppointment=function(){$scope.isLoading=!0,Scheduling.createAppointment($scope.schedulingModel.slot,$scope.schedulingModel.reason.index,$scope.schedulingModel.comments,$scope.schedulingModel.useSelectedProvider).then(function(){$location.path("/medical/appointments/make/schedule/success")},function(errorMsg){500===errorMsg.status?Notifications.error("Error: Something went wrong while scheduling your appointment. Please go back to select a new one."):errorMsg.message&&"slottaken"===errorMsg.message.toLowerCase()?Notifications.error("Error: This date and time is no longer available. Please go back to select a new one."):errorMsg.message&&"minimumleadtimeexceeded"===errorMsg.message.toLowerCase()?Notifications.error("Error: This appointment must be scheduled at least 1 hour in advance. Please go back and select a new one."):Notifications.error("Error: Something went wrong while scheduling your appointment. Please go back to select a new one."),$scope.scheduleButtonDisabled=!0})["finally"](function(){$scope.isLoading=!1})},$scope.init()}var module=angular.module("makeAppointments");module.controller("SchedulingWizardController",["$scope","$location","Scheduling","Notifications","FeatureStatus","schedulingWizardConfig",SchedulingWizardController])}(),function(){"use strict";function SchedulingWizardEbolaController($scope,$location,FeatureStatus,EbolaConsentService){$scope.schedulingDT=FeatureStatus.checkFeatureStatus("dtScheduling"),$scope.ebolaAgree=function(){$scope.schedulingDT?(EbolaConsentService.setEbolaConsent($scope.currentUser.ePersonId),$location.path("/medical/appointments/make/schedule/datatile")):($scope.ebolaConsent[$scope.currentUser.ePersonId]=!0,sessionStorage.setItem("ebolaConsent",JSON.stringify($scope.ebolaConsent)),$scope.goToWizardStep(0))}}var module=angular.module("makeAppointments");module.controller("SchedulingWizardEbolaController",["$scope","$location","FeatureStatus","EbolaConsentService",SchedulingWizardEbolaController])}(),function(){"use strict";function SchedulingWizardReasonController($scope,$location,$filter,Scheduling,Notifications){$scope.getReasons=function(){delete $scope.reasons,"reason"===$scope.wizardMode&&($scope.schedulingModel.provider={});var serviceParam=void 0===$scope.schedulingModel.provider.id?null:$scope.schedulingModel.provider.id;$scope.isLoading=!0,Scheduling.getReasons(serviceParam).then(function(data){$scope.commentsRequired=data.commentsRequired,$scope.reasons=data.reasons,$scope.reasons.forEach(function(reason){reason.moreInfo={show:!1}}),$scope.isLoading=!1},function(){Notifications.error("Error: Failed to load the list of reasons for visit."),$scope.isLoading=!1})},$scope.setReason=function(reason){$scope.schedulingModel.reason=reason,$scope.nextStep()},$scope.getReasons()}var module=angular.module("makeAppointments");module.controller("SchedulingWizardReasonController",["$scope","$location","$filter","Scheduling","Notifications",SchedulingWizardReasonController])}(),function(){"use strict";function SchedulingWizardProviderController($scope,$location,$filter,Scheduling,Notifications){$scope.getProviders=function(){delete $scope.providers,"provider"===$scope.wizardMode&&($scope.schedulingModel.reason={}),$scope.isLoading=!0;var serviceParam=void 0===$scope.schedulingModel.reason.index?null:$scope.schedulingModel.reason.index;Scheduling.getProviders(serviceParam).then(function(data){$scope.providers=data,$scope.isLoading=!1},function(){Notifications.error("Error: Failed to load the list of providers."),$scope.isLoading=!1})},$scope.toggleProviders=function(){$scope.numToShow===$scope.defaultRows?($scope.numToShow=$scope.providers.length,$scope.toggleText="show less"):($scope.numToShow=$scope.defaultRows,$scope.toggleText="show all")},$scope.setProvider=function(provider,departmentIds,specialties){$scope.schedulingModel.useSelectedProvider={provider:provider,departmentIds:departmentIds},$scope.schedulingModel.provider=provider,$scope.schedulingModel.provider.specialties=specialties,$scope.nextStep()},$scope.getProviders()}var module=angular.module("makeAppointments");module.controller("SchedulingWizardProviderController",["$scope","$location","$filter","Scheduling","Notifications",SchedulingWizardProviderController])}(),function(){"use strict";function SchedulingWizardLocationController($scope,$location,$filter,$timeout,Scheduling,Notifications,GoogleMaps){$scope.getLocations=function(){delete $scope.locations,$scope.isLoading=!0,Scheduling.getLocations($scope.schedulingModel.reason.index,$scope.schedulingModel.provider.id).then(function(data){$scope.locations=[];var address,geocoder=new GoogleMaps.Geocoder;data.forEach(function(location){address=[location.addressLines[0],location.city,location.state,location.zip].join(" "),geocoder.geocode({address:address},function(results,status){"OK"===status&&results[0]&&results[0].geometry&&results[0].geometry.location&&(location.lat=results[0].geometry.location.lat(),location["long"]=results[0].geometry.location.lng()),$scope.locations.push(location),$scope.$$phase||$scope.$digest()})}),$scope.isLoading=!1},function(){Notifications.error("Error: Failed to load the list of locations."),$scope.isLoading=!1})},$scope.toggleLocations=function(){$scope.numToShow===$scope.defaultRows?($scope.numToShow=$scope.locations.length,$scope.toggleText="show less"):($scope.numToShow=$scope.defaultRows,$scope.toggleText="show all")},$scope.setLocation=function(location){$scope.schedulingModel.location=location,$scope.nextStep()},$scope.toggleMoreInfo=function(location){location.hideMoreInfo=!location.hideMoreInfo,$timeout(function(){GoogleMaps.event.trigger(location.map,"resize",!0)},0)},$scope.getMapConfig=function(lat,long){return{center:new GoogleMaps.LatLng(lat,long),zoom:15,disableDefaultUI:!0,draggable:!1,scrollwheel:!1}},$scope.goToWizardStepByName=function(wizardStepName){var index=$scope.wizardSteps.indexOf(wizardStepName);$scope.goToWizardStep(index)},$scope.getMarkerConfig=function(map,lat,long){return new GoogleMaps.Marker({position:new GoogleMaps.LatLng(lat,long),map:map})},$scope.mapRecenter=function(gmap,lat,long){gmap.setCenter(new GoogleMaps.LatLng(lat,long))},$scope.getLocations()}var module=angular.module("makeAppointments");module.controller("SchedulingWizardLocationController",["$scope","$location","$filter","$timeout","Scheduling","Notifications","GoogleMaps",SchedulingWizardLocationController])}(),function(){"use strict";function SchedulingWizardSlotsController($scope,$location,$filter,Scheduling,Notifications,Moment,easternTimeFilter,$timeout){$scope.getSlots=function(){var startDate=easternTimeFilter($scope.schedulingModel.startDate,"MM/DD/YYYY"),endDate=easternTimeFilter(new Moment($scope.getMaxDate()),"MM/DD/YYYY");($scope.prevSlotDate!==startDate||$scope.slotsLoaded)&&($scope.prevSlotDate===startDate&&$scope.slotsLoaded?startDate=easternTimeFilter(new Moment($scope.slots[$scope.slots.length-1].date).add(1,"days"),"MM/DD/YYYY"):($scope.numToShow=10,delete $scope.slots,delete $scope.noLoadMore,delete $scope.getSlotsCurrentStartDate,$scope.slotsLoaded=!1,$scope.prevSlotDate=startDate),$scope.isLoading=!0,$scope.getSlotsCurrentStartDate=$scope.schedulingModel.startDate,Scheduling.getSlots($scope.schedulingModel.reason.index,$scope.schedulingModel.provider.id,$scope.schedulingModel.location.id,startDate,endDate).then(function(data){$scope.slots=$scope.slots?$scope.slots.concat(data):data,(0===data.length||$scope.slots.length>0&&new Moment($scope.slots[$scope.slots.length-1].date).add(1,"days")>=new Moment(endDate))&&($scope.noLoadMore=!0),$scope.numToShow<$scope.slots.length&&$scope.slotsLoaded&&($scope.numToShow+=10),$scope.isLoading=!1,$scope.otherProviders=!1,$scope.availableToday=!1,$scope.slotsLoaded=!0;var startDateCompare=easternTimeFilter($scope.schedulingModel.startDate,"L");$scope.slots.forEach(function(slot){slot.provider.id!==$scope.schedulingModel.provider.id&&($scope.otherProviders=!0);var slotDate=easternTimeFilter(slot.date,"L");slotDate===startDateCompare&&($scope.availableToday=!0)})},function(){Notifications.error("Error: Failed to load the list of appointment slots."),$scope.isLoading=!1}))},$scope.initSlots=function(){delete $scope.slots,delete $scope.noLoadMore,delete $scope.prevSlotDate,delete $scope.getSlotsCurrentStartDate,delete $scope.schedulingModel.slot,delete $scope.schedulingModel.startDate,$scope.slotsLoaded=!1,$scope.numToShow=10},$scope.setSlot=function(slot){$scope.schedulingModel.slot=slot,$scope.schedulingModel.slot.dateTime=easternTimeFilter(slot.date),$scope.schedulingModel.slot.arrivalTime=new Moment(slot.date).add(-15,"minutes");var matchingProvider=_.find($scope.providers,function(item){return item.provider.id===$scope.schedulingModel.slot.provider.id});$scope.schedulingModel.reviewProvider=matchingProvider?matchingProvider.provider:$scope.schedulingModel.slot.provider},$scope.showMoreSlots=function(){$scope.numToShow+=$scope.numToShow},$scope.toggleDatepicker=function(openOnly,$event){$event.stopPropagation(),$timeout(function(){$event.target.focus()},50),openOnly?$scope.datepicker.opened=!0:$scope.datepicker.opened=!$scope.datepicker.opened},$scope.getMinDate=function(){return new Date(easternTimeFilter(new Moment))},$scope.getMaxDate=function(){return $scope.schedulingModel&&"5"===$scope.schedulingModel.reason.index?new Date(easternTimeFilter((new Moment).add(1,"days"))):new Date(easternTimeFilter((new Moment).add(100,"days")))},$scope.todaysDate=function(){var today=new Date(easternTimeFilter(new Moment));(null===$scope.schedulingModel.startDate||$scope.schedulingModel.startDate.getTime()!==today.getTime())&&($scope.schedulingModel.startDate=today,$scope.getSlots())},$scope.datepicker={opened:!1,options:{showWeeks:!1,minDate:$scope.getMinDate(),maxDate:$scope.getMaxDate()}},$scope.initSlots()}var module=angular.module("makeAppointments");module.controller("SchedulingWizardSlotsController",["$scope","$location","$filter","Scheduling","Notifications","Moment","easternTimeFilter","$timeout",SchedulingWizardSlotsController])}(),function(){"use strict";function controller($scope,$location,FeatureStatus,EbolaConsentService,Notifications,RslCacheClearKeys,RslCacheClearer,$log){$scope.schedulingAvailable=FeatureStatus.checkFeatureStatus("scheduling"),$scope.ebolaAvailable=FeatureStatus.checkFeatureStatus("schedulingEbola"),$scope.loggedInUserId=$scope.currentUser.ePersonId,$scope.ebolaConsent=JSON.parse(EbolaConsentService.getEbolaConsent()),$scope.clickNavigationEnabled=!0,$scope.hideScheduling=!0,null===$scope.ebolaConsent&&(EbolaConsentService.createEbolaConsent(),$scope.ebolaConsent={}),$scope.ebolaAvailable&&$scope.schedulingAvailable&&!$scope.ebolaConsent[$scope.loggedInUserId]?$location.path("/medical/appointments/make/schedule/ebola"):$scope.schedulingAvailable?$location.path("/medical/appointments/make/schedule/datatile"):Notifications.error("Error: Scheduling is not currently available.");var scheduleDataTileVM=this;scheduleDataTileVM.datatileCompletedDetectorConfig=[{targetSelector:".completeworkflow",eventToRaise:"scheduling-workflow-completed"}],$scope.$on("scheduling-workflow-completed",function(){RslCacheClearer.clear([RslCacheClearKeys.TimelineCache,RslCacheClearKeys.AppointmentsCache]).then(function(){$log.debug(RslCacheClearKeys.TimelineCache+" was called"),$log.debug(RslCacheClearKeys.AppointmentsCache+" was called")})})}angular.module("makeAppointments").controller("SchedulingDataTileCtrl",controller),controller.$inject=["$scope","$location","FeatureStatus","EbolaConsentService","Notifications","RslCacheClearKeys","RslCacheClearer","$log"]}(),function(){"use strict";function directive(){return{templateUrl:"app/make-appointments/views/additional-services.html",restrict:"E"}}angular.module("makeAppointments").directive("additionalServicesWidget",directive)}(),function(){"use strict";var module=angular.module("makeAppointments"),directive=function(QueryStringParser){return{restrict:"A",link:function(scope,elem){function fixLandingPage(){iframe.$('a.scheduleoptions[href*="mode=apptsched"]',iframe.document).remove()}function fixSlotTargetArea(){iframe.$(".content [id^=tableshowtimes] tbody tr",iframe.document).css("cursor","pointer"),iframe.$(".content [id^=tableshowtimes] tbody tr",iframe.document).on("click",function(a){iframe.$(a.currentTarget,iframe.document).children(".selector").children("input").prop("checked",!0)})}var iframe=elem[0].contentWindow;scope.$on("dtLocationChanged",function(){var queryObj=QueryStringParser.parse(iframe.location.search);angular.equals(queryObj,{})?fixLandingPage():("SHOWTIMES"===queryObj.step||"showtimes"===queryObj.action||"prefs"===queryObj.action&&iframe.$(".content [id^=tableshowtimes]",iframe.document).length>0)&&fixSlotTargetArea()})}}};module.directive("datatileScheduling",["QueryStringParser",directive])}(),angular.module("growth-chart",["filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/growthchart",{title:"Growth Chart",templateUrl:"app/growth-chart/views/growth-chart.html",controller:"GrowthChartCtrl",roles:["growthChart"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("growth-chart").constant("growthChartConfig",{}),function(){"use strict";function controller($scope){$scope.title="Growth Chart"}var module=angular.module("growth-chart"),app=angular.module("app");app.requires.push("growth-chart"),module.controller("GrowthChartCtrl",["$scope",controller])}(),angular.module("fhir-auth",[]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/fhir-auth",{templateUrl:"app/fhir-auth/views/fhir-dt.html"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("diabetes",["services","filters"]),angular.module("diabetes").constant("diabetesConfig",{apiRoutes:{rewards:"Rewards"},rewardsProgramId:1,diabetesPublishDate:"01/01/2016 00:00:00"}),function(){"use strict";function _routeConfiguration($routeProvider){$routeProvider.when("/medical/care-toolbox",{title:"Care ToolBox",template:"<i-dont-do-anything />",controller:"CareToolboxLandingRedirectCtrl"}).when("/medical/care-toolbox/win",{title:"Care ToolBox Diabetes Win",templateUrl:"app/care-toolbox/views/diabetes-win.html",controller:"DiabetesWinCtrl",roles:["RewardsProgram_Diabetes"],feature:"careToolbox"}).when("/medical/care-toolbox/plan",{title:"Care ToolBox Diabetes Plan",templateUrl:"app/care-toolbox/views/diabetes-plan.html",controller:"DiabetesPlanCtrl",roles:["CareManagedMember","HealthCoached"],feature:"careToolbox"}).when("/medical/care-toolbox/learn",{title:"Care ToolBox Diabetes Learn",templateUrl:"app/care-toolbox/views/diabetes-learn.html",controller:"DiabetesLearnCtrl",roles:["RewardsProgram_Diabetes","CareManagedMember","HealthCoached"],feature:"careToolbox"}).when("/medical/care-toolbox/connect",{title:"Care ToolBox Diabetes Connect",templateUrl:"app/care-toolbox/views/diabetes-connect.html",roles:["RewardsProgram_Diabetes","CareManagedMember","HealthCoached"],controller:"DiabetesConnectCtrl",feature:"careToolbox"})}var app=angular.module("app");app.config(["$routeProvider",_routeConfiguration])}(),function(){"use strict";function diabetesHeader(){var directive={templateUrl:"app/care-toolbox/views/templates/diabetes-header-tpl.html",restrict:"E",scope:{currentStep:"="},controller:diabetesHeaderController};return directive}function diabetesHeaderController($scope,Users){function doesUserMenuRolesContainStepRole(stepRole){return-1!==currentUser.menuRoles.indexOf(stepRole)}var currentUser=Users.currentUser.get(),steps=[{id:"win",title:"WIN",roles:["RewardsProgram_Diabetes"],activeImage:"app/care-toolbox/assets/images/toolkit_nav_win.png",inactiveImage:"app/care-toolbox/assets/images/toolkit_nav_win_disabled.png",url:"#/medical/care-toolbox/win"},{id:"plan",title:"PLAN",roles:["CareManagedMember","HealthCoached"],activeImage:"app/care-toolbox/assets/images/toolkit_nav_plan.png",inactiveImage:"app/care-toolbox/assets/images/toolkit_nav_plan_disabled.png",url:"#/medical/care-toolbox/plan"},{id:"learn",title:"LEARN",roles:["RewardsProgram_Diabetes","CareManagedMember","HealthCoached"],activeImage:"app/care-toolbox/assets/images/toolkit_nav_learn.png",inactiveImage:"app/care-toolbox/assets/images/toolkit_nav_learn_disabled.png",url:"#/medical/care-toolbox/learn"},{id:"connect",title:"CONNECT",roles:["RewardsProgram_Diabetes","CareManagedMember","HealthCoached"],activeImage:"app/care-toolbox/assets/images/toolkit_nav_connect.png",inactiveImage:"app/care-toolbox/assets/images/toolkit_nav_connect_disabled.png",url:"#/medical/care-toolbox/connect"}];$scope.steps=_.filter(steps,function(step){return _.some(step.roles,doesUserMenuRolesContainStepRole)})}angular.module("diabetes").directive("diabetesHeader",diabetesHeader),diabetesHeaderController.$inject=["$scope","Users"]}(),function(){"use strict";function _service($resource,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),url=apiEndpoint+"/"+config.apiRoutes.rewards+"/Commitments?ProgramId=:programId";this.all=function(programId){return $resource(url,{programId:programId},{get:{isArray:!0}}).get()}}var module=angular.module("diabetes");module.service("Commitments",["$resource","diabetesConfig","appConfig",_service])}(),function(){"use strict";function _service($q,$cacheFactory,Commitments,Payouts,Programs,Users){function getCacheOtherwise(key,callback){var deferred=$q.defer(),data=cache.get(key);return data?deferred.resolve(data):_.isFunction(callback)&&(data=callback.call(this,deferred)),data.$promise=deferred.promise,data}var cache=$cacheFactory("rewards"),cacheKey="rewards:all";this.all=function(programId){var cacheKeyWithUser=cacheKey+Users.currentUser.get().ePersonId;return getCacheOtherwise(cacheKeyWithUser,function(deferred){var result=[];return $q.all([Commitments.all(programId).$promise,Payouts.all(programId).$promise]).then(function(data){var commitments=data[0],payouts=data[1],rewards=_.chain(payouts).map(function(payout){return payout.commitments=_.filter(commitments,function(commitment){return _.includes(payout.commitmentIds,commitment.id)}),payout.isComplete=_.reduce(payout.commitments,function(memo,commitment){return memo&&commitment.isComplete},!0),payout}).filter(function(payout){return _.isArray(payout.commitments)&&payout.commitments.length>0}).value();1===programId&&rewards.push({id:"ExerciseRewards",description:"Earn money by being active",amount:"120",commitments:[{id:"ExerciseRewards",description:"Coming Jan. 1, 2016!"}]}),cache.put(cacheKeyWithUser,rewards),result.push.apply(result,rewards),deferred.resolve(rewards)},function(data){deferred.reject(data)}),result})};var programInteractionsAlreadyTracked=[];this.trackProgramInteraction=function(programId){_.includes(programInteractionsAlreadyTracked,programId)||(Programs.trackInteraction(programId),programInteractionsAlreadyTracked.push(programId))}}var module=angular.module("diabetes");module.service("Rewards",["$q","$cacheFactory","Commitments","Payouts","Programs","Users",_service])}(),function(){"use strict";function _service($resource,config,appConfig){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),url=apiEndpoint+"/"+config.apiRoutes.rewards+"/Payouts?ProgramId=:programId";this.all=function(programId){return $resource(url,{programId:programId},{get:{isArray:!0}}).get()}}var module=angular.module("diabetes");module.service("Payouts",["$resource","diabetesConfig","appConfig",_service])}(),function(){"use strict";function _service($http,config,appConfig){this.trackInteraction=function(programId){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),url=apiEndpoint+"/"+config.apiRoutes.rewards+"/Programs/TrackInteraction?ProgramId="+programId;$http.post(url)}}var module=angular.module("diabetes");module.service("Programs",["$http","diabetesConfig","appConfig",_service])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function LearnService(appConfig,$resource){function getVideos(){return resource.getVideos().$promise}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),resource=$resource("videos",{},{getVideos:{method:"GET",url:resourceRoute(apiEndpoint,"/healtheducation"),isArray:!0}});return{getVideos:getVideos}}angular.module("diabetes").service("LearnService",["appConfig","$resource",LearnService])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function PlanService(appConfig,$resource){function getHealthyActions(){return resource.getHealthyActions().$promise}function updateHealthyActionStatus(id,isComplete){return resource.updateHealthyActionStatus({id:id,isComplete:isComplete}).$promise}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),resource=$resource("healthyActions",{},{getHealthyActions:{method:"GET",url:resourceRoute(apiEndpoint,"/healthyaction"),isArray:!0},updateHealthyActionStatus:{method:"POST",url:resourceRoute(apiEndpoint,"/healthyaction")}});return{getHealthyActions:getHealthyActions,updateHealthyActionStatus:updateHealthyActionStatus}}angular.module("diabetes").service("PlanService",["appConfig","$resource",PlanService])}(),function(){"use strict";function controller($location,Users){var currentUser=Users.currentUser.get();-1!==currentUser.menuRoles.indexOf("RewardsProgram_Diabetes")?$location.path("/medical/care-toolbox/win"):$location.path("/medical/care-toolbox/learn")}angular.module("diabetes").controller("CareToolboxLandingRedirectCtrl",controller),controller.$inject=["$location","Users"]}(),function(){"use strict";function _controller($scope,$log,$q,$filter,config,CareTeam,usSpinnerService){var promises=[];usSpinnerService.spin("spinner-main"),$scope.careTeam=CareTeam.getCareTeam(),$scope.careTeam.$promise.then(function(data){_.each(data,function(staff){_.isObject(staff.phone)&&_.isString(staff.phone.rawPhoneNumber)&&(staff.phone.fixedPhoneNumber=staff.phone.rawPhoneNumber)});var careManagers=_.filter(data,function(staff){return(1===staff.providerType||2===staff.providerType)&&!staff.epicId&&staff.isActive});if(1===careManagers.length){var phoneFilter=$filter("phone"),phone=_.head(careManagers).phone;$scope.contactUsPhone={text:phoneFilter(phone.rawPhoneNumber),value:phone.rawPhoneNumber},$scope.contactUsCareManagerId=_.head(careManagers).careManagerId}})["finally"](function(){$scope.contactUsPhone=$scope.contactUsPhone||{text:"800.998.1037",value:"18009981037"},$scope.contactUsCareManagerId=$scope.contactUsCareManagerId||""}),promises.push($scope.careTeam.$promise),$scope.title="Stay Connected",$q.all(promises).then(function(){usSpinnerService.stop("spinner-main")},function(error){usSpinnerService.stop("spinner-main"),$log.error(error)})}var module=angular.module("diabetes");module.controller("DiabetesConnectCtrl",["$scope","$log","$q","$filter","diabetesConfig","CareTeam","usSpinnerService",_controller])}(),function(){"use strict";function _controller($sce,$scope,$timeout,LearnService,Notifications,$window){$scope.title="Diabetes Learn",$scope.loadingShort=!1,$scope.loadingLong=!1,$scope.initLearning=function(){$scope.loadingShort=!0,$scope.loadingLong=!1;var timer=$timeout(function(){$scope.updateLoadingFlags()},5e3);LearnService.getVideos().then(function(data){data&&(data=_.slice(_.sortBy(data,"date").reverse(),0,5),_.forOwn(data,function(value){value.url=$sce.trustAsResourceUrl(value.topicLink)}),$scope.learningResources=data)},function(){Notifications.clear(),Notifications.error("Error: Failed to load videos.")})["finally"](function(){$scope.loadingShort=!1,$scope.loadingLong=!1,$timeout.cancel(timer)})},$scope.openLearningItem=function(item){$window.open(item.topicLink)},$scope.updateLoadingFlags=function(){$scope.loadingShort=!1,$scope.loadingLong=!0}}var module=angular.module("diabetes");module.controller("DiabetesLearnCtrl",["$sce","$scope","$timeout","LearnService","Notifications","$window",_controller])}(),function(){"use strict";function _controller($scope,$log,$q,config,Rewards,usSpinnerService,Moment){Rewards.trackProgramInteraction(config.rewardsProgramId);var promises=[],payoutSortOrder={1:5,2:1,3:2,ExerciseRewards:4,4:3},commitmentSortOrder={2:1,3:2},diabetesPublishDate=new Moment(config.diabetesPublishDate,"MM/DD/YYYY HH:mm:ss");$scope.diabetesPublishDate=config.diabetesPublishDate;var today=new Moment;$scope.titleByActionId={1:today.isAfter(diabetesPublishDate)||today.isSame(diabetesPublishDate)?"Get an assessment of your health risks, including recommendations for getting healthier.":"Coming Soon! Get an assessment of your health risks, including recommendations for getting healthier.",2:"Visit your Primary Care Provider",3:"What is Diabetes?",4:"Maintaining a healthy blood pressure helps reduce your risk of heart disease, stroke and kidney damage.",5:"Maintaining a healthy body mass index (BMI) is important for reducing your risk of heart disease, stroke and kidney damage.",ExerciseRewards:today.isAfter(diabetesPublishDate)||today.isSame(diabetesPublishDate)?"Earn money by being active!":"Coming Jan. 1, 2016!"},$scope.contentByActionId={1:"app/care-toolbox/views/actions/health-appraisal.html",2:"app/care-toolbox/views/actions/pcp-visit.html",3:"app/care-toolbox/views/actions/what-is-diabetes.html",4:"app/care-toolbox/views/actions/blood-pressure.html",5:"app/care-toolbox/views/actions/bmi.html",ExerciseRewards:"app/care-toolbox/views/actions/exercise-rewards.html"},$scope.buttonsByAccomplishmentId={1:"app/care-toolbox/views/actions/buttons/health-appraisal.html",2:"app/care-toolbox/views/actions/buttons/close-button.html",3:"app/care-toolbox/views/actions/buttons/close-button.html",4:"app/care-toolbox/views/actions/buttons/close-button.html",ExerciseRewards:"app/care-toolbox/views/actions/buttons/exercise-rewards.html"},usSpinnerService.spin("spinner-main"),$scope.title="For the Win",$scope.accomplishments=Rewards.all(config.rewardsProgramId),$scope.accomplishments.$promise.then(function(){$scope.accomplishments.forEach(function(payout){payout.sortOrder=100,payout.isCollapsed=!0,payoutSortOrder[payout.id]&&(payout.sortOrder=payoutSortOrder[payout.id]),payout.commitments.forEach(function(commitment){commitment.sortOrder=100,commitmentSortOrder[commitment.id]&&(commitment.sortOrder=commitmentSortOrder[commitment.id])})})}),promises.push($scope.accomplishments.$promise),$q.all(promises).then(function(){$scope.ready=!0,usSpinnerService.stop("spinner-main")},function(error){$log.error(error),usSpinnerService.stop("spinner-main")})}var module=angular.module("diabetes");module.controller("DiabetesWinCtrl",["$scope","$log","$q","diabetesConfig","Rewards","usSpinnerService","Moment",_controller]);
}(),function(){"use strict";function _controller($scope,PlanService,Notifications,usSpinnerService){$scope.title="Make a Plan",$scope.isCollapsed=!0,$scope.initPlan=function(){usSpinnerService.spin("spinner-main"),PlanService.getHealthyActions().then(function(data){data&&($scope.healthyActions=data)},function(){Notifications.clear(),Notifications.error("Error: Failed to load Healthy Actions.")})["finally"](function(){usSpinnerService.stop("spinner-main")})},$scope.toggleCollapse=function(action,isCollapsed){return action.congratulations&&!isCollapsed&&(action.congratulations=!1),!isCollapsed},$scope.updateHealthyActionStatus=function($event,action,isCollapsed){action.updateInProgress=!0,isCollapsed||$event.stopPropagation(),PlanService.updateHealthyActionStatus(action.assignmentId,!action.isComplete).then(function(data){data&&_.each($scope.healthyActions,function(item){item.assignmentId===action.assignmentId&&(action.congratulations=data.isComplete,action.isComplete=data.isComplete,action.closed=data.closed)})},function(){Notifications.clear(),Notifications.error("Error: Failed to update Healthy Action.")})["finally"](function(){action.updateInProgress=!1})}}var module=angular.module("diabetes");module.controller("DiabetesPlanCtrl",["$scope","PlanService","Notifications","usSpinnerService",_controller])}(),function(){"use strict";function _controller($scope,NotebookService,Notifications,Moment,$timeout){$scope.daysSinceLastPost=null,$scope.lastModifiedDate=null,$scope.posting=!1,$scope.noteSaved=!1,$scope.initNotebookWidget=function(){NotebookService.getNotes(0,1,"DateCreated",!0).then(function(data){data&&$scope.getDaysSinceLastPost(data.items)},function(){Notifications.clear(),Notifications.error("Error: Failed to load Notebook details.")})["finally"](function(){}),NotebookService.getNotes(0,1,"DateModified",!0).then(function(data){data&&$scope.getLastModifiedDate(data.items)},function(){Notifications.clear(),Notifications.error("Error: Failed to load Notebook details.")})["finally"](function(){})},$scope.getDaysSinceLastPost=function(notes){if($scope.daysSinceLastPost=null,notes){var postDate=new Moment(notes[0].dateCreated),now=new Moment,days=now.diff(postDate,"days");$scope.daysSinceLastPost=days}},$scope.getLastModifiedDate=function(notes){$scope.lastModifiedDate=null,notes&&($scope.lastModifiedDate=notes[0].dateModified)},$scope.post=function(){$scope.posting=!0,NotebookService.addNote($scope.noteText).then(function(){$scope.noteText="",$scope.posting=!1,$scope.noteSaved=!0,$timeout(function(){$scope.noteSaved=!1},5e3)},function(){Notifications.clear(),Notifications.error("Error: Failed to add the note.")})["finally"](function(){$scope.posting=!1})}}var module=angular.module("diabetes");module.controller("NotebookWidgetCtrl",["$scope","NotebookService","Notifications","Moment","$timeout",_controller])}(),function(){"use strict";angular.module("customerSupportChat",["ngRoute"])}(),function(){"use strict";function routeConfig($routeProvider){$routeProvider.when("/support/chat",{title:"Customer Support",templateUrl:"app/customer-support-chat/views/customer-support-landing.html",controller:"customerSupportController",roles:["green"],hardRefresh:!0,feature:["customerSupportChat"]})}var module=angular.module("customerSupportChat");module.config(["$routeProvider",routeConfig])}(),function(){"use strict";function customerSupportController($scope,Authorization){$scope.title="Chat Options",$scope.hasFullyFundedChat=Authorization.hasFullyFundedChat(),$scope.hasMyPriorityChat=Authorization.hasMyPriorityChat(),$scope.hasFullyFundedChat&&$scope.hasMyPriorityChat&&($scope.hasMyPriorityChat=!1)}angular.module("customerSupportChat").controller("customerSupportController",customerSupportController),customerSupportController.$inject=["$scope","Authorization"]}(),function(){"use strict";function _service(){this.watchBuffer=[],this.initialized=!1,this.addWatch=function(watchFunc){this.watchBuffer.push(watchFunc)},this.watchCount=function(){return this.watchBuffer.length},this.getWatches=function(){return this.watchBuffer},this.getInitialized=function(){return this.initialized},this.setInitialized=function(val){this.initialized=val}}angular.module("customerSupportChat").service("customerSupportWatchService",_service)}(),function(){"use strict";function launchChatButton(appConfig,$timeout,customerSupportWatchService,ContractsService){function linker(scope){function initializeFromWatchService(previousWatchCount){var currentCount=customerSupportWatchService.watchCount();customerSupportWatchService.getInitialized()||$timeout(function(){var newCount=customerSupportWatchService.watchCount();if(!customerSupportWatchService.getInitialized())if(newCount>currentCount||newCount!==previousWatchCount)initializeFromWatchService(newCount);else{if(customerSupportWatchService.setInitialized(!0),!window._laq){if(contractIds){var contractIdsString=contractIdsArrayToCommaSeparatedString(contractIds);liveagent.addCustomDetail("contractID",contractIdsString)}scope.user&&(scope.user.phMemberId&&liveagent.addCustomDetail("memberID",scope.user.phMemberId),scope.user.email&&liveagent.addCustomDetail("email",scope.user.email)),liveagent.init(appConfig.liveAgentChatChannel.url,appConfig.liveAgentChatChannel.deploymentId,appConfig.liveAgentChatChannel.orgId),liveagent.setChatWindowHeight(650),liveagent.setChatWindowWidth(650),window._laq=[]}angular.forEach(customerSupportWatchService.getWatches(),function(watch){window._laq.push(function(){liveagent.showWhenOnline(watch.id,document.getElementById("liveagent_button_online_"+watch.channel)),liveagent.showWhenOffline(watch.id,document.getElementById("liveagent_button_offline_"+watch.channel))})})}},1e3)}function loadChatConfig(){return"undefined"!=typeof liveagent&&contractIds?(customerSupportWatchService.addWatch({id:scope.chatId,channel:scope.chatChannel}),void initializeFromWatchService(0)):$timeout(function(){loadChatConfig()})}function getContracts(){ContractsService.getContracts().then(function(contracts){contracts&&contracts.length&&(contractIds=contracts.map(function(contract){return contract.contractID}))})["catch"](function(){contractIds=[]})}getContracts(),loadChatConfig()}var directive={restrict:"E",templateUrl:"app/customer-support-chat/directives/customer-support-launch-chat-button/salesforce-chat-button.tpl.html",replace:!0,controller:controller,scope:{chatId:"@",chatChannel:"@",buttonText:"@",user:"="},link:linker},contractIds=null;return directive}function controller($scope){$scope.startChat=function(){liveagent.startChat($scope.chatId)}}function contractIdsArrayToCommaSeparatedString(contractIds){return _.reduce(contractIds,function(memo,contractId){return memo+=","+contractId})}angular.module("customerSupportChat").directive("customerSupportLaunchChatButton",launchChatButton),launchChatButton.$inject=["appConfig","$timeout","customerSupportWatchService","Contracts"],controller.$inject=["$scope"]}(),angular.module("combinedTimelineEvents",["services","filters"]),function(){"use strict";function SharedAccessLink(CombinedTimelineEvents){var sharedAccessLink=this;sharedAccessLink.showModal=function(){CombinedTimelineEvents.showModal()}}angular.module("combinedTimelineEvents").component("sharedAccessLink",{templateUrl:"app/combined-timeline-events/templates/shared-access-link-component.html",controller:SharedAccessLink,controllerAs:"sharedAccessLink"}),SharedAccessLink.$inject=["CombinedTimelineEvents"]}(),function(){"use strict";angular.module("combinedTimelineEvents").component("sharedAccessModalAppointment",{templateUrl:"app/combined-timeline-events/templates/shared-access-modal-appointment.html",bindings:{appt:"="}})}(),function(){"use strict";function SharedAccessModalController($scope,$q,$uibModalInstance,combinedSharedAccess,Users,$log,Appointments,Moment){function initialize(){$scope.$on("loggedInStatusChanged",function(){$uibModalInstance&&$uibModalInstance.dismiss("login status changed")}),$scope.sidebarOpen=!1,$scope.sharedAccessUsers=[],$scope.appointmentsLoaded=!1,$scope.currentUser=Users.currentUser.get(),$scope.currentUser.name=$scope.currentUser.fullName,getRelationships(),$scope.timeFilters=[{displayText:"This month",value:0,idx:0},{displayText:"Up to three months",value:2,idx:1},{displayText:"Up to six months",value:5,idx:2},{displayText:"Up to a year",value:11,idx:3,cannotLoadMore:!0}],$scope.next12Months=[];for(var i=0;12>i;i+=1)$scope.next12Months[i]=(new Moment).add(i,"months").startOf("month").toDate();for(var ix=0;ix<$scope.timeFilters.length-1;ix+=1)$scope.timeFilters[ix].buttonText=$scope.timeFilters[ix+1].displayText;$scope.selectedTimeFilter=$scope.timeFilters[0],$scope.loadedTimeFilter=$scope.timeFilters[0],$scope.sidebarOpen=!1,$scope.appointments=[],$scope.showSpinner=!0,$scope.notification={message:'<strong>Error</strong> - Information failed to load. Please <a href="" ng-click="reload()">reload</a> or come back later to try again.',error:!1,remove:function(){$scope.notification.error=!1}}}function getRelationships(){return combinedSharedAccess.getRelationships().then(function(data){$scope.sharedAccessUsers=_.union([$scope.currentUser],data.legacy.grantors,data.relationships.grantors),_.forEach($scope.sharedAccessUsers,function(user){user.selected=!0}),getAppointments()})["catch"](function(err){$scope.relationships="Unable to retrieve relationships.",$scope.notification.error=!0,$log.debug(err)})}function getAppointments(timefilter){var deferred=$q.defer();$scope.notification.remove();var filter=timefilter||$scope.selectedTimeFilter,filterIdx=filter.idx,monthRange=$scope.timeFilters[filterIdx].value,start=(new Moment).startOf("month").toDate(),end=(new Moment).add(monthRange,"months").endOf("month").toDate(),appointmentsRequest={startDate:start,endDate:end,ePersonIds:_.map(_.filter($scope.sharedAccessUsers,{selected:!0}),"ePersonId")},key=JSON.stringify(appointmentsRequest);return key in appointmentsHash?($scope.appointments=appointmentsHash[key],$scope.isLoading=!1,$scope.showSpinner=!1,$scope.loadedTimeFilter=$scope.timeFilters[filterIdx],deferred.resolve($scope.appointments)):Appointments.getAppointmentsByEPersonIds(appointmentsRequest).then(function(data){appointmentsHash[key]=data,$scope.appointments=data,$scope.loadedTimeFilter=$scope.timeFilters[filterIdx],deferred.resolve($scope.appointments)})["catch"](function(err){$scope.notification.error=!0,$log.debug(err),deferred.reject(err)})["finally"](function(){$scope.isLoading=!1,$scope.showSpinner=!1,$scope.appointmentsLoaded=!0}),deferred.promise}var appointmentsHash=[],lastRequestType="apply";initialize(),$scope.reload=function(){$scope.appointmentsLoaded=!1,"apply"===lastRequestType?$scope.apply():$scope.loadMoreTimePeriods()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.toggleSidebar=function(){$scope.sidebarOpen=!$scope.sidebarOpen},$scope.loadMoreTimePeriods=function(){$scope.isLoading=!0,lastRequestType="load more";var timePeriodToLoad=$scope.timeFilters[$scope.loadedTimeFilter.idx+1];getAppointments(timePeriodToLoad).then(function(){$scope.loadedTimeFilter=timePeriodToLoad,$scope.selectedTimeFilter=timePeriodToLoad})},$scope.apply=function(){$scope.showSpinner=!0,lastRequestType="apply",getAppointments()}}angular.module("combinedTimelineEvents").controller("SharedAccessModalController",SharedAccessModalController),SharedAccessModalController.$inject=["$scope","$q","$uibModalInstance","combinedSharedAccess","Users","$log","Appointments","Moment"]}(),function(){"use strict";function CombinedTimelineEventService(Users,combinedSharedAccess,FeatureStatus,$rootScope,SharedAccessModalService){function initialize(){checkSharedAccess(),$rootScope.$on("relationshipsChanged",checkSharedAccess)}function updateStatus(numGrantors){isAvailable=numGrantors>0&&currentUser.isPatient?!0:!1}function checkSharedAccess(){return isAvailable=!1,currentUser=Users.currentUser.get(),Users.isUserProxied()?void(isAvailable=!1):void(FeatureStatus.checkFeatureStatus("sharedAccessView")&&combinedSharedAccess.getRelationships().then(function(data){updateStatus(_.union(data.legacy.grantors,data.relationships.grantors).length)}))}var currentUser=Users.currentUser.get(),isAvailable=!1;return initialize(),{get isAvailable(){return currentUser.ePersonId!==Users.currentUser.get().ePersonId&&checkSharedAccess(),isAvailable},showModal:function(){SharedAccessModalService.showModal()}}}angular.module("combinedTimelineEvents").factory("CombinedTimelineEvents",CombinedTimelineEventService),CombinedTimelineEventService.$inject=["Users","combinedSharedAccess","FeatureStatus","$rootScope","SharedAccessModalService"]}(),function(){"use strict";function SharedAccessModalService($modal){return{showModal:function(){$modal.open({templateUrl:"app/combined-timeline-events/templates/shared-access-modal.tpl.html",controller:"SharedAccessModalController",size:"lg",windowClass:"shared-access-modal"})}}}angular.module("combinedTimelineEvents").factory("SharedAccessModalService",SharedAccessModalService),SharedAccessModalService.$inject=["$uibModal"]}(),function(){"use strict";function filterByMonth(Moment){return function(appts,month){var d=new Moment(month);return _.chain(appts).filter(function(appt){return appt=new Moment(appt.start),appt.month()===d.month()&&appt.year()===d.year()}).sortBy("start").value()}}angular.module("combinedTimelineEvents").filter("filterByMonth",filterByMonth),filterByMonth.$inject=["Moment"]}(),angular.module("healthyactions",["services","filters"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/healthyactions",{title:"Healthy Actions",templateUrl:"app/healthy-actions/views/healthy-actions.html",controller:"HealthyActionsController"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";function controller($scope,usSpinnerService,Notifications,FeatureStatus,$timeout,HealthyActions){$scope.showMore=function(){$scope.numToShow+=10},$scope.allResults=[],$scope.numToShow=10,$scope.loadingMessage="Loading Results",$scope.isCollapsed=!0,$scope.actionsLoaded=!1,$scope.showAll=!0,$scope.completedFilter=!1,$scope.healthyActionsAvailable=FeatureStatus.checkFeatureStatus("healthyActions"),$scope.showAllActive=!0,$scope.showToDoActive=!1,$scope.showCompletedActive=!1,$scope.getResults=function(){$scope.actionsLoaded=!1,HealthyActions.getHealthyActions().then(function(data){$scope.allResults=data,$scope.actionsLoaded=!0},function(){Notifications.error("Error: Failed to load Healthy Actions."),$scope.loadingMessage="Failed to load Healthy Actions.",$scope.actionsLoaded=!0})},$scope.toggleCollapse=function(action,isCollapsed){return action.congratulations&&!isCollapsed&&(action.congratulations=!1),!isCollapsed},$scope.updateHealthyActionStatus=function($event,action,isCollapsed){action.updateInProgress=!0,isCollapsed||$event.stopPropagation(),HealthyActions.updateHealthyActionStatus(action.assignmentId,!action.isComplete).then(function(data){data&&_.each($scope.allResults,function(item){item.assignmentId===action.assignmentId&&(action.congratulations=data.isComplete,action.isComplete=data.isComplete,action.closed=data.closed)})},function(){Notifications.clear(),Notifications.error("Error: Failed to update Healthy Action.")})["finally"](function(){action.updateInProgress=!1})},$scope.filterResults=function(filter){switch($scope.showAllActive=!1,$scope.showToDoActive=!1,$scope.showCompletedActive=!1,filter){case"all":$scope.showAll=!0,$scope.showAllActive=!0,$scope.completedFilter=!1;break;case"todo":$scope.showAll=!1,$scope.showToDoActive=!0,$scope.completedFilter=!1;break;case"completed":$scope.showAll=!1,$scope.showCompletedActive=!0,$scope.completedFilter=!0}}}var module=angular.module("healthyactions");module.controller("HealthyActionsController",["$scope","usSpinnerService","Notifications","FeatureStatus","$timeout","HealthyActions",controller])}(),function(){"use strict";function resourceRoute(host,path){return path=path.replace(/^\//,""),[host,path].join("/")}function HealthyActions(appConfig,$resource){function getHealthyActions(){return resource.getHealthyActions({getAll:!0}).$promise}function updateHealthyActionStatus(id,isComplete){return resource.updateHealthyActionStatus({id:id,isComplete:isComplete}).$promise}var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),resource=$resource("healthyActions",{},{getHealthyActions:{method:"GET",url:resourceRoute(apiEndpoint,"/healthyaction"),isArray:!0},updateHealthyActionStatus:{method:"POST",url:resourceRoute(apiEndpoint,"/healthyaction")}});return{getHealthyActions:getHealthyActions,updateHealthyActionStatus:updateHealthyActionStatus}}angular.module("healthyactions").service("HealthyActions",["appConfig","$resource",HealthyActions])}(),angular.module("patientHistory",[]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/patient-history",{title:"Patient History",templateUrl:"app/patient-history/views/patient-history.html",roles:["isPatientAndSameUserOrMinor"],feature:"dtPatientHistory"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("healthConditions",["directives","ngRoute"]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/health-conditions",{title:"Health Conditions",templateUrl:"app/health-conditions/views/health-conditions.html",roles:["blue"],feature:"healthConditions",keywords:["MyConditions","Diabetes","Diabetes Care"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";var module=angular.module("healthConditions"),directive=function(){return{restrict:"A",link:function(scope,elem){function removeAnchor(hrefContent){var contentBlock=iframe.$("#topic_6 .content",iframe.document)[0],anchors=$(contentBlock).find("a");_.each(anchors,function(anchor){var href=$(anchor).attr("href");href.indexOf(hrefContent)>-1&&$(anchor).remove()})}function replaceErrorMessage(){var contentBlock=iframe.$("#datatile .section",iframe.document)[0],alerts=$(contentBlock).find(".alert");angular.forEach(alerts,function(alert){alert.innerHTML.length>=1&&$(alert).replaceWith("<p>You do not have any currently supported Health Conditions assigned.</p>")})}var iframe=elem[0].contentWindow;scope.$on("dtLocationChanged",function(){removeAnchor("messages"),replaceErrorMessage()})}}};module.directive("datatileHealthConditions",[directive])}(),angular.module("feedbackSurvey",["ngRoute"]),function(){"use strict";function controller($scope,$window){$scope.goToSurvey=function(){$window.open("https://www.surveygizmo.com/s3/3120355/MyHealth-Customer-Satisfaction-Survey","_system")}}var module=angular.module("feedbackSurvey");module.controller("FeedbackSurveyCtrl",["$scope","$window",controller])}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/feedback-survey",{title:"Feedback Survey",templateUrl:"app/feedback-survey/views/feedback-survey.html",controller:"FeedbackSurveyCtrl",feature:"feedbackSurvey",roles:["blue","green","guest"]})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),angular.module("referrals",[]),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/medical/referrals/view",{title:" View Referrals",templateUrl:"app/referrals/views/view-referrals.html",feature:"dtViewReferrals"}).when("/medical/referrals/request",{title:"Request Referrals",templateUrl:"app/referrals/views/request-referral.html",feature:"requestReferral"})}var app=angular.module("app");app.config(["$routeProvider",routeConfiguration])}(),function(){"use strict";var module=angular.module("contracts"),directive=function(){return{restrict:"A",link:function(scope,elem){var iframe=elem[0].contentWindow;scope.$on("dtLocationChanged",function(){iframe.$("#innertabs a",iframe.document).remove()})}}};module.directive("datatileReferrals",[directive])}(),angular.module("quick-search",["services","filters"]),function(){"use strict";function service($http,$q,$route,$location,MenuService,Users){function getSearchableItems(){return $q.all([getMenuItems(),getCarouselItems(),getItemsFromRoutes()]).then(function(items){return _.uniqBy([].concat.apply([],items),"title")})}function getMenuItems(){return MenuService.getFullMenuWithStatusAndRoles($location.path(),Users.currentUser.get().menuRoles,Users.currentUser.get().authorizations).then(function(data){return _.filter(flatten(data.items),function(item){return item.authorized})})["catch"](function(){return $q.reject()})}function getCarouselItems(){return MenuService.getQuickLinksWithStatusAndRoles($location.path(),Users.currentUser.get().menuRoles,Users.currentUser.get().authorizations).then(function(data){return _.filter(flatten(data.items),function(item){return item.authorized})})["catch"](function(){return $q.reject()})}function getItemsFromRoutes(){return MenuService.getRoutesWithStatusAndRoles($location.path(),Users.currentUser.get().menuRoles,Users.currentUser.get().authorizations).then(function(data){return _.filter(data,function(item){return item.title&&item.authorized&&"Appointment"!==item.title})})["catch"](function(){return $q.reject()})}function flatten(items){var flattenedItems=[];return items.forEach(function(item){if(item.items){flattenedItems.push(item);var subitems=flatten(item.items);flattenedItems=flattenedItems.concat(subitems)}else flattenedItems.push(item)}),flattenedItems}this.getSearchableItems=getSearchableItems}var module=angular.module("quick-search");module.service("QuickSearch",["$http","$q","$route","$location","MenuService","Users",service])}(),function(){"use strict";function quickSearchFilter(){return function(items,term){if(!term)return null;var result=_.filter(items,function(item){return isMatchToTitleAndKeyword(item,term)});return _.uniq(result,function(item){return item.title})}}function isMatchToTitleAndKeyword(item,term){if(item.title.toLowerCase().indexOf(term.toLowerCase())>-1)return!0;if(item.keywords&&item.keywords.length>0){var keywordMatch=!1;return item.keywords.forEach(function(keyword){keyword.toLowerCase().indexOf(term.toLowerCase())>-1&&(keywordMatch=!0)}),keywordMatch}return!1}var module=angular.module("quick-search");module.filter("quickSearch",[quickSearchFilter])}(),function(){"use strict";function directive(){return{restrict:"E",templateUrl:"app/quick-search/views/search-bar.html",link:{post:function($scope,element){element.find("input").bind("focus",function(){element.find("div").addClass("search-input-selected")}),angular.element("body").on("click",function(e){element[0].contains(e.target)||$scope.clearSearch()}),element.find("input").bind("blur",function(){element.find("div").addClass("search-input-selected").removeClass("search-input-selected"),$scope.fireAnalytics($scope.search)})}},controller:_controller}}var module=angular.module("quick-search"),_controller=["$scope","QuickSearch","$sce","quickSearchFilter","$analytics",function($scope,QuickSearch,$sce,quickSearchFilter,$analytics){$scope.search="",$scope.noResults=!1,$scope.searchItems=[],$scope.searchableItems=[],$scope.currentSearchWord="",$scope.analyticsRecorded=!1,$scope.$watch("search",function(){$scope.search.length>2?(QuickSearch.getSearchableItems().then(function(items){$scope.searchableItems=items,$scope.searchItems=quickSearchFilter(items,$scope.search),$scope.noResults=$scope.searchItems&&0===$scope.searchItems.length}),$scope.search.indexOf($scope.currentSearchWord)>-1?$scope.currentSearchWord=$scope.search:$scope.currentSearchWord.length-$scope.search.length===1&&($scope.fireAnalytics($scope.currentSearchWord.trim()),$scope.analyticsRecorded=!0)):0===$scope.search.length?($scope.currentSearchWord.length>0&&!$scope.analyticsRecorded&&$scope.fireAnalytics($scope.currentSearchWord.trim()),$scope.clearSearch()):$scope.currentSearchWord.length<=2&&($scope.currentSearchWord=$scope.search)}),$scope.formattedItem=function(itemTitle){var highlightedTitle;if($scope.search){var startIndex=itemTitle.toLowerCase().indexOf($scope.search.toLowerCase());highlightedTitle=startIndex>-1?itemTitle.slice(0,startIndex)+"<strong>"+itemTitle.slice(startIndex,startIndex+$scope.search.length)+"</strong>"+itemTitle.substring(startIndex+$scope.search.length):"<strong>"+itemTitle+"</strong>"}return $sce.trustAsHtml(highlightedTitle)},$scope.clearSearch=function(){$scope.search="",$scope.searchItems="",$scope.noResults=!1,$scope.currentSearchWord="",$scope.$evalAsync()},$scope.fireAnalytics=function(label){$analytics.eventTrack($scope.noResults?"No results found":"Results found",{category:"MyHealth Quick Search",label:label})}}];module.directive("quickSearch",["$q","$analytics","$sce",directive])}(),function(){"use strict";angular.module("strive",["services","ngRoute"])}(),function(){"use strict";function StriveRouteConfiguration($routeProvider){$routeProvider.when("/strive",{title:"STR!VE Membership",templateUrl:"app/strive/views/strive.html",controller:"StriveController",authorization:"STRIVE",feature:"strive",roles:["isLoggedInPatient"]})}angular.module("strive").config(StriveRouteConfiguration),StriveRouteConfiguration.$inject=["$routeProvider"]}(),function(){"use strict";function StriveController(StriveLocationSvc,$scope,Notifications){function buildMap(address,locationName){var geocoder=new google.maps.Geocoder;geocoder.geocode({address:address},function(results,status){if(status===google.maps.GeocoderStatus.OK){var latLng={lat:results[0].geometry.location.lat(),lng:results[0].geometry.location.lng()},mapOptions={center:latLng,zoom:16,mapTypeId:google.maps.MapTypeId.ROADMAP},map=new google.maps.Map(document.getElementById("map"),mapOptions),marker=new google.maps.Marker({position:latLng,title:locationName});marker.setMap(map),google.maps.event.addDomListener(window,"resize",function(){google.maps.event.trigger(map,"resize"),map.setCenter(latLng)})}})}$scope.getStriveLocations=function(){$scope.isLoading=!0,StriveLocationSvc.getInformation().$promise.then(function(data){$scope.striveLocations=data,$scope.striveLocations.forEach(function(location){location.fullAddress=location.address+"+"+location.city+"+"+location.state+"+"+location.zip,buildMap(location.fullAddress,location.facility)}),$scope.isLoading=!1},function(){Notifications.error("Error: Failed to load STR!VE location information."),$scope.isLoading=!1})}}var module=angular.module("strive");StriveController.$inject=["$scope","Notifications"],module.controller("StriveController",["StriveLocationSvc","$scope","Notifications",StriveController])}(),function(){"use strict";function service($resource){var resource=$resource("app/strive/data/strive-locations.json");this.getInformation=function(){return resource.query()}}var module=angular.module("strive");module.service("StriveLocationSvc",["$resource",service])}(),angular.module("inpatient",["services","filters"]),function(){"use strict";function service($resource,appConfig,PartnerBrandingService){var apiEndpoint=appConfig.apiEndpoint.replace(/\/$/,""),routes={summary:[apiEndpoint,"encounter/currentadmission"].join("/")},resources={summary:$resource(routes.summary)};this.getCurrentAdmission=function(){var promise=resources.summary.get().$promise;return promise.then(PartnerBrandingService.getPartnerIcons)}}angular.module("app").service("Admissions",service),service.$inject=["$resource","appConfig","PartnerBrandingService"]}(),function(){"use strict";function service($resource,appConfig){var currentAdmissionRoute=[appConfig.apiEndpoint,"encounter","currentadmission"].join("/"),currentAdmissionResource=$resource(currentAdmissionRoute);this.getCurrentAdmission=function(){return currentAdmissionResource.get().$promise}}var module=angular.module("inpatient");module.service("CurrentAdmission",["$resource","appConfig",service])}(),function(){"use strict";function controller(Admissions,$scope,usSpinnerService,Notifications){$scope.getAdmission=function(){$scope.isLoading=!0,Admissions.getCurrentAdmission().then(function(data){$scope.item=data,$scope.isLoading=!1,$scope.item.displayProvider=_.find(data.providers,function(provider){return provider.isDisplayProvider}),$scope.item.physicianName=$scope.item.displayProvider.name},function(){$scope.loading=!1,Notifications.error("Error: Failed to load current appointments."),$scope.isLoading=!1})}}angular.module("inpatient").controller("AdmissionSummaryController",controller),controller.$inject=["Admissions","$scope","usSpinnerService","Notifications"]}(),function(){"use strict";function controller($scope,CurrentAdmission,Notifications,usSpinnerService,MealPhoneNumbers){usSpinnerService.spin("spinner-main"),CurrentAdmission.getCurrentAdmission().then(function(currentAdmission){$scope.currentAdmission=currentAdmission;var deptId;currentAdmission&&currentAdmission.location&&currentAdmission.location.identifier&&currentAdmission.location.identifier.value?deptId=currentAdmission.location.identifier.value:currentAdmission&&currentAdmission.location&&currentAdmission.location.id&&(deptId=currentAdmission.location.id),deptId&&MealPhoneNumbers.getPhoneNumberByDepartmentId(deptId).then(function(data){$scope.mealPhoneNumber={phone:data.phone,ext:data.ext}})},function(){Notifications.error("Error: unable to load current admission details")})["finally"](function(){usSpinnerService.stop("spinner-main")})}var module=angular.module("inpatient");module.controller("CurrentAdmissionCtrl",["$scope","CurrentAdmission","Notifications","usSpinnerService","MealPhoneNumbers",controller])}(),function(){"use strict";function service($resource){function getPhoneNumberByDepartmentId(departmentId){return resource.query().$promise.then(function(data){var phone;return data.forEach(function(element){element.departmentIds.indexOf(departmentId)>-1&&(phone=element)}),phone})}var resource=$resource("app/inpatient/data/meal-phone-numbers.json");this.getPhoneNumberByDepartmentId=getPhoneNumberByDepartmentId}var module=angular.module("inpatient");module.service("MealPhoneNumbers",["$resource",service])}(),function(){"use strict";function routeConfiguration($routeProvider){$routeProvider.when("/current-admission",{title:"CurrentAdmission",templateUrl:"app/inpatient/views/current-admission.html",feature:"inpatientExperience",controller:"CurrentAdmissionCtrl",roles:["Inpatient"]}).when("/medical/admissions",{title:"Current Appointments",templateUrl:"app/inpatient/views/admission-summary.html",feature:"inpatientExperience",controller:"AdmissionSummaryController",roles:["Inpatient"],keywords:["admissions"]}).when("/real-time-hospital-chart",{title:"Real Time Hospital Chart",templateUrl:"app/inpatient/views/real-time-hospital-chart.html",feature:"dtRealTimeHospitalChart",roles:["Inpatient"]})}angular.module("app").config(["$routeProvider",routeConfiguration])}();